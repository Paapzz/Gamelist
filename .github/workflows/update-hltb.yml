name: update-hltb (minimal + sanitize)

on:
  workflow_dispatch:
  push:
    paths:
      - index111.html

permissions:
  contents: write

jobs:
  scrape:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install minimal Python deps (playwright + requests)
        run: |
          python -m pip install --upgrade pip
          pip install playwright requests

      - name: Install Playwright browser (chromium only)
        run: |
          python -m playwright install chromium

      - name: Run HLTB worker
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          python hltb_worker.py

      - name: Sanitize artifact filenames (replace forbidden chars)
        run: |
          python - <<'PY'
          import os, re, time, sys
          roots = ["debug_dumps", "hltb_data"]
          # Pattern includes characters disallowed by upload-artifact / NTFS etc.
          pattern = re.compile(r'["<>:|*\?\\\r\n/\\\\]+')
          for root in roots:
              if not os.path.isdir(root):
                  # nothing to sanitize in this root
                  continue
              for dirpath, dirnames, filenames in os.walk(root):
                  for fn in filenames:
                      if pattern.search(fn):
                          safe = pattern.sub('_', fn)
                          # collapse multiple underscores/spaces and trim
                          safe = re.sub(r'[_\s]+','_', safe).strip('_')
                          # ensure basename not empty
                          if not safe:
                              safe = 'file'
                          old = os.path.join(dirpath, fn)
                          new = os.path.join(dirpath, safe)
                          if old == new:
                              continue
                          # avoid overwriting an existing file accidentally
                          if os.path.exists(new):
                              base, ext = os.path.splitext(safe)
                              new = os.path.join(dirpath, f"{base}_{int(time.time())}{ext}")
                          try:
                              print(f"Renaming: {old} -> {new}")
                              os.rename(old, new)
                          except Exception as e:
                              print(f"ERROR renaming {old} -> {new}: {e}", file=sys.stderr)
          PY

      - name: Upload debug dumps
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: hltb-debug-dumps
          path: debug_dumps/**

      - name: Upload per-run results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: hltb-results
          path: |
            hltb_data/hltb_data_*.json
            scraping_report.json
