name: Update HLTB

on:
  # –ó–∞–ø—É—Å–∫ —Ä–∞–∑ –≤ –≥–æ–¥ - 20 —è–Ω–≤–∞—Ä—è –≤ 00:00 UTC
  schedule:
    - cron: '0 0 20 1 *'
  
  # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # –ü–µ—Ä–≤—ã–π —á–∞–Ω–∫: –∏–≥—Ä—ã 1-500
  run-hltb-chunk-0:
    runs-on: ubuntu-latest
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –≤–µ—á–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤ ‚Äî –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 6 —á–∞—Å–æ–≤ (360 –º–∏–Ω—É—Ç)
    timeout-minutes: 360
    concurrency:
      group: hltb-worker-${{ github.run_id }}-chunk-0
      cancel-in-progress: false

    env:
      PYTHONUNBUFFERED: 1
      HLTB_DEBUG: "true"
      CHUNK_INDEX: "0"
      CHUNK_SIZE: "500"

    steps:
      - name: Checkout (with token for push)
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-hltb-worker
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install required Python packages
        run: |
          python -m pip install --upgrade pip
          python -m pip install playwright pyee requests

      - name: Install Playwright browsers
        run: |
          python -m playwright install chromium

      - name: Show basic versions (non-fatal)
        run: |
          python -V
          python - <<'PY'
          import importlib
          for pkg in ("playwright","pyee","requests"):
              try:
                  mod = importlib.import_module(pkg)
                  print(pkg, getattr(mod, "__version__", "ok"))
              except Exception as e:
                  print(pkg, "NOT INSTALLED:", e)
          PY

      - name: Run HLTB worker (Chunk 0: games 1-500)
        env:
          HLTB_DEBUG: ${{ env.HLTB_DEBUG }}
          CHUNK_INDEX: ${{ env.CHUNK_INDEX }}
          CHUNK_SIZE: ${{ env.CHUNK_SIZE }}
        run: |
          echo "Starting hltb_worker.py (DEBUG=${HLTB_DEBUG}, CHUNK_INDEX=${CHUNK_INDEX}, CHUNK_SIZE=${CHUNK_SIZE})"
          python hltb_worker.py

      - name: Upload debug dumps (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: hltb-debug-dumps
          path: |
            debug_*.json
            hltb_debug.log
            progress.json
          if-no-files-found: warn

      - name: Upload hltb data
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: hltb-data
          path: |
            hltb_data/*.json
          if-no-files-found: warn

      - name: Commit & push results (Chunk 0)
        if: always()
        env:
          GIT_AUTHOR_NAME: "HLTB Worker"
          GIT_AUTHOR_EMAIL: "hltb-worker@users.noreply.github.com"
        run: |
          set -euo pipefail
          echo "Preparing to commit results for chunk 0..."
          git config user.name "${GIT_AUTHOR_NAME}"
          git config user.email "${GIT_AUTHOR_EMAIL}"
          git checkout main

          CHANGED=0
          if ls hltb_data/*.json 1> /dev/null 2>&1; then
            git add hltb_data/*.json
            CHANGED=1
          fi
          # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π HTML —Ñ–∞–π–ª
          if [ -f index111.html ]; then
            git add index111.html
            CHANGED=1
          fi
          if [ -f progress.json ]; then
            git add progress.json
            CHANGED=1
          fi

          if [ "$CHANGED" -eq 0 ]; then
            echo "No output files to commit. Exiting."
            exit 0
          fi

          COMMIT_MSG="HLTB worker: chunk 0 (games 1-500) $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          
          if git diff --cached --quiet; then
            echo "No changes staged for commit"
          else
            git commit -m "${COMMIT_MSG}"
          fi

          git fetch origin main

          set +e
          git merge --no-edit -s recursive -X ours origin/main
          MERGE_RC=$?
          set -e

          if [ $MERGE_RC -ne 0 ]; then
            echo "‚ö†Ô∏è Merge returned non-zero rc=${MERGE_RC}. Will create fallback branch to avoid overwriting remote unexpectedly."
            BRANCH="hltb-worker-fallback-$(date -u +%Y%m%d%H%M%S)"
            git checkout -b "${BRANCH}"
            git push origin "${BRANCH}"
            echo "üîÄ Pushed fallback branch: ${BRANCH}. Please review and merge manually."
            exit 0
          fi

          if ls hltb_data/*.json 1> /dev/null 2>&1; then
            git add hltb_data/*.json
          fi
          # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π HTML —Ñ–∞–π–ª
          if [ -f index111.html ]; then
            git add index111.html
          fi
          if [ -f progress.json ]; then
            git add progress.json
          fi

          if git diff --cached --quiet; then
            echo "No post-merge changes to commit"
          else
            git commit -m "${COMMIT_MSG} (post-merge)"
          fi

          set +e
          git push origin HEAD:main
          PUSH_RC=$?
          set -e

          if [ $PUSH_RC -eq 0 ]; then
            echo "‚úÖ Pushed results to main"
            exit 0
          else
            echo "‚ö†Ô∏è Push to main failed (RC=$PUSH_RC). Creating fallback branch and pushing there."
            BRANCH="hltb-worker-fallback-$(date -u +%Y%m%d%H%M%S)"
            git checkout -b "${BRANCH}"
            git push origin "${BRANCH}"
            echo "üîÄ Pushed fallback branch: ${BRANCH}. Please merge manually."
            exit 0
          fi

  # –í—Ç–æ—Ä–æ–π —á–∞–Ω–∫: –∏–≥—Ä—ã 501-1000
  run-hltb-chunk-1:
    runs-on: ubuntu-latest
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –≤–µ—á–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤ ‚Äî –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 6 —á–∞—Å–æ–≤ (360 –º–∏–Ω—É—Ç)
    timeout-minutes: 360
    concurrency:
      group: hltb-worker-${{ github.run_id }}-chunk-1
      cancel-in-progress: false
    # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —á–∞–Ω–∫–∞
    needs: run-hltb-chunk-0

    env:
      PYTHONUNBUFFERED: 1
      HLTB_DEBUG: "true"
      CHUNK_INDEX: "1"
      CHUNK_SIZE: "500"

    steps:
      - name: Checkout (with token for push)
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-hltb-worker
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install required Python packages
        run: |
          python -m pip install --upgrade pip
          python -m pip install playwright pyee requests

      - name: Install Playwright browsers
        run: |
          python -m playwright install chromium

      - name: Show basic versions (non-fatal)
        run: |
          python -V
          python - <<'PY'
          import importlib
          for pkg in ("playwright","pyee","requests"):
              try:
                  mod = importlib.import_module(pkg)
                  print(pkg, getattr(mod, "__version__", "ok"))
              except Exception as e:
                  print(pkg, "NOT INSTALLED:", e)
          PY

      - name: Run HLTB worker (Chunk 1: games 501-1000)
        env:
          HLTB_DEBUG: ${{ env.HLTB_DEBUG }}
          CHUNK_INDEX: ${{ env.CHUNK_INDEX }}
          CHUNK_SIZE: ${{ env.CHUNK_SIZE }}
        run: |
          echo "Starting hltb_worker.py (DEBUG=${HLTB_DEBUG}, CHUNK_INDEX=${CHUNK_INDEX}, CHUNK_SIZE=${CHUNK_SIZE})"
          python hltb_worker.py

      - name: Upload debug dumps (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: hltb-debug-dumps-chunk-1
          path: |
            debug_*.json
            hltb_debug.log
            progress.json
          if-no-files-found: warn

      - name: Upload hltb data
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: hltb-data-chunk-1
          path: |
            hltb_data/*.json
          if-no-files-found: warn

      - name: Commit & push results (Chunk 1)
        if: always()
        env:
          GIT_AUTHOR_NAME: "HLTB Worker"
          GIT_AUTHOR_EMAIL: "hltb-worker@users.noreply.github.com"
        run: |
          set -euo pipefail
          echo "Preparing to commit results for chunk 1..."
          git config user.name "${GIT_AUTHOR_NAME}"
          git config user.email "${GIT_AUTHOR_EMAIL}"
          git checkout main

          CHANGED=0
          if ls hltb_data/*.json 1> /dev/null 2>&1; then
            git add hltb_data/*.json
            CHANGED=1
          fi
          # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π HTML —Ñ–∞–π–ª
          if [ -f index111.html ]; then
            git add index111.html
            CHANGED=1
          fi
          if [ -f progress.json ]; then
            git add progress.json
            CHANGED=1
          fi

          if [ "$CHANGED" -eq 0 ]; then
            echo "No output files to commit. Exiting."
            exit 0
          fi

          COMMIT_MSG="HLTB worker: chunk 1 (games 501-1000) $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          
          if git diff --cached --quiet; then
            echo "No changes staged for commit"
          else
            git commit -m "${COMMIT_MSG}"
          fi

          git fetch origin main

          set +e
          git merge --no-edit -s recursive -X ours origin/main
          MERGE_RC=$?
          set -e

          if [ $MERGE_RC -ne 0 ]; then
            echo "‚ö†Ô∏è Merge returned non-zero rc=${MERGE_RC}. Will create fallback branch to avoid overwriting remote unexpectedly."
            BRANCH="hltb-worker-fallback-$(date -u +%Y%m%d%H%M%S)"
            git checkout -b "${BRANCH}"
            git push origin "${BRANCH}"
            echo "üîÄ Pushed fallback branch: ${BRANCH}. Please review and merge manually."
            exit 0
          fi

          if ls hltb_data/*.json 1> /dev/null 2>&1; then
            git add hltb_data/*.json
          fi
          # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π HTML —Ñ–∞–π–ª
          if [ -f index111.html ]; then
            git add index111.html
          fi
          if [ -f progress.json ]; then
            git add progress.json
          fi

          if git diff --cached --quiet; then
            echo "No post-merge changes to commit"
          else
            git commit -m "${COMMIT_MSG} (post-merge)"
          fi

          set +e
          git push origin HEAD:main
          PUSH_RC=$?
          set -e

          if [ $PUSH_RC -eq 0 ]; then
            echo "‚úÖ Pushed results to main"
            exit 0
          else
            echo "‚ö†Ô∏è Push to main failed (RC=$PUSH_RC). Creating fallback branch and pushing there."
            BRANCH="hltb-worker-fallback-$(date -u +%Y%m%d%H%M%S)"
            git checkout -b "${BRANCH}"
            git push origin "${BRANCH}"
            echo "üîÄ Pushed fallback branch: ${BRANCH}. Please merge manually."
            exit 0
          fi
