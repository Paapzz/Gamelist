name: Update Games List

on:
  schedule:
    - cron: '0 3 * * *'  # Запускается каждый день в 3:00 UTC
  workflow_dispatch: 

jobs:
  update-games:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Fetch and process games data
      run: |
        mkdir -p data
        python3 - <<EOF
        import json
        import math
        import requests
        import time
        import sys

        def fetch_games(offset, limit):
            url = "https://nu3ichego5ti2suda7prishel.uhadi.workers.dev"
            params = {"offset": offset, "limit": limit}
            try:
                response = requests.get(url, params=params, timeout=30)
                response.raise_for_status()
                return response.json()
            except requests.RequestException as e:
                print(f"Error fetching games: {e}")
                return None

        all_games = []
        offset = 0
        limit = 1000
        batch = 1
        max_retries = 3

        while True:
            print(f"Fetching batch {batch} (offset: {offset}, limit: {limit})...")
            for attempt in range(max_retries):
                games = fetch_games(offset, limit)
                if games is not None:
                    break
                print(f"Retry {attempt + 1}/{max_retries}")
                time.sleep(5)
            else:
                print("Failed to fetch games after multiple attempts. Exiting.")
                sys.exit(1)

            if not games:
                print("No more games to fetch.")
                break
            all_games.extend(games)
            print(f"Fetched {len(games)} games. Total games so far: {len(all_games)}")
            offset += limit
            batch += 1
            time.sleep(1)

            if len(all_games) % 5000 == 0:
                print(f"Saving intermediate results ({len(all_games)} games)...")
                with open(f'data/games_intermediate_{len(all_games)}.json', 'w') as f:
                    json.dump(all_games, f)

        total_games = len(all_games)
        games_per_file = 5000
        total_files = math.ceil(total_games / games_per_file)

        print(f"Total games fetched: {total_games}")
        print(f"Creating {total_files} file(s)...")

        for i in range(total_files):
            start = i * games_per_file
            end = min((i + 1) * games_per_file, total_games)
            with open(f'data/games_{i+1}.json', 'w') as f:
                json.dump(all_games[start:end], f)
            print(f"Created file data/games_{i+1}.json with {end - start} games")

        index = {
            "total_games": total_games,
            "total_files": total_files,
            "last_updated": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
        }
        with open('data/index.json', 'w') as f:
            json.dump(index, f)
        print("Created index.json file")
        print("Data processing complete!")
        EOF

    - name: Commit and push if changed
      run: |
        git config --global user.email "github-actions@github.com"
        git config --global user.name "GitHub Actions"
        git add data
        git diff --quiet && git diff --staged --quiet || (git commit -m "Update games list" && git push)
