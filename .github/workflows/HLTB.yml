name: Update HLTB Data

on:
  schedule:
    - cron: '0 4 * * *'  #7 утра
  workflow_dispatch:  

jobs:
  update-hltb:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        token: ${{ secrets.PAT }}
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install howlongtobeatpy aiohttp

    - name: Process HLTB data
      run: |
        python3 - <<EOF
        import json
        import math
        import asyncio
        from howlongtobeatpy import HowLongToBeat
        import aiohttp

        async def get_hltb_info(session, game):
            try:
                results = await HowLongToBeat().async_search(game['title'])
                if results and len(results) > 0:
                    game_info = max(results, key=lambda element: element.similarity)
                    return {
                        "id": game['id'],
                        "title": game['title'],
                        "main_story": game_info.main_story,
                        "main_extra": game_info.main_extra,
                        "completionist": game_info.completionist
                    }
            except Exception as e:
                print(f"Error fetching HLTB data for {game['title']}: {e}")
            return None

        async def process_hltb_data(games):
            hltb_data = []
            async with aiohttp.ClientSession() as session:
                tasks = [get_hltb_info(session, game) for game in games]
                results = await asyncio.gather(*tasks)
                hltb_data = [result for result in results if result]
            return hltb_data

        print("Loading games data...")
        all_games = []
        with open('data/index.json', 'r') as f:
            index = json.load(f)
        
        for i in range(1, index['total_files'] + 1):
            with open(f'data/games_{i}.json', 'r') as f:
                all_games.extend(json.load(f))

        print("Processing HLTB data...")
        hltb_data = asyncio.run(process_hltb_data(all_games))

        hltb_per_file = 10000
        total_hltb_files = math.ceil(len(hltb_data) / hltb_per_file)

        print(f"Creating {total_hltb_files} HLTB file(s)...")

        for i in range(total_hltb_files):
            start = i * hltb_per_file
            end = min((i + 1) * hltb_per_file, len(hltb_data))
            with open(f'data/hltb_{i+1}.json', 'w') as f:
                json.dump(hltb_data[start:end], f)
            print(f"Created file data/hltb_{i+1}.json with {end - start} games")

        # Создаем индекс для HLTB данных
        hltb_index = {}
        for game in hltb_data:
            hltb_index[game['id']] = {
                'file': f"hltb_{math.floor(hltb_data.index(game) / hltb_per_file) + 1}.json",
                'index': hltb_data.index(game) % hltb_per_file
            }

        with open('data/hltb_index.json', 'w') as f:
            json.dump(hltb_index, f)
        print("Created hltb_index.json file")

        # Обновляем основной индекс
        index['total_hltb_files'] = total_hltb_files
        index['total_hltb_games'] = len(hltb_data)
        index['last_hltb_update'] = "$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
        with open('data/index.json', 'w') as f:
            json.dump(index, f)
        print("Updated index.json file with HLTB data")

        print("HLTB data processing complete!")
        EOF

    - name: Commit and push if changed
      run: |
        git config --global user.email "github-actions@github.com"
        git config --global user.name "GitHub Actions"
        git add data
        git diff --quiet && git diff --staged --quiet || (git commit -m "Update HLTB data" && git push)
