name: Update HLTB Data

on:
  schedule:
    - cron: '0 4 * * *'  #7 утра
  workflow_dispatch:  

jobs:
  update-hltb:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        token: ${{ secrets.PAT }}
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install howlongtobeatpy aiohttp tqdm

    - name: Process HLTB data
      run: |
        python3 - <<EOF
        import json
        import math
        import asyncio
        from howlongtobeatpy import HowLongToBeat
        import aiohttp
        import time
        from tqdm import tqdm
        
        CONCURRENT_REQUESTS = 10
        RATE_LIMIT = 1  # Запросов в секунду
        DELAY = 0.3 / RATE_LIMIT
        MAX_RETRIES = 3
        TIMEOUT = 10  # секунд
        SAVE_INTERVAL = 1000

        async def get_hltb_info(session, game, semaphore, pbar):
            async with semaphore:
                for attempt in range(MAX_RETRIES):
                    try:
                        game_title = game['name']
                        async with session.get(f'https://howlongtobeat.com/api/search?q={game_title}', timeout=TIMEOUT) as response:
                            if response.status == 200:
                                data = await response.json()
                                if data and len(data) > 0:
                                    game_info = max(data, key=lambda x: x.get('similarity', 0))
                                    return {
                                        "id": game['id'],
                                        "title": game_title,
                                        "main_story": game_info.get('main_story', 0),
                                        "main_extra": game_info.get('main_extra', 0),
                                        "completionist": game_info.get('completionist', 0)
                                    }
                            else:
                                print(f"Error fetching HLTB data for {game_title}: HTTP {response.status}")
                    except asyncio.TimeoutError:
                        print(f"Timeout error fetching HLTB data for {game_title}")
                    except Exception as e:
                        print(f"Error fetching HLTB data for {game_title}: {str(e)}")
                    
                    if attempt < MAX_RETRIES - 1:
                        await asyncio.sleep(DELAY * (attempt + 1))
                    else:
                        print(f"Failed to fetch HLTB data for {game_title} after {MAX_RETRIES} attempts")
                
                pbar.update(1)
                await asyncio.sleep(DELAY)
            return None

        async def process_hltb_data(games):
            hltb_data = []
            semaphore = asyncio.Semaphore(RATE_LIMIT)
            async with aiohttp.ClientSession() as session:
                pbar = tqdm(total=len(games), desc="Processing games")
                tasks = [get_hltb_info(session, game, semaphore, pbar) for game in games]
                results = await asyncio.gather(*tasks, return_exceptions=True)
                pbar.close()
                hltb_data = [result for result in results if result and not isinstance(result, Exception)]
            return hltb_data

        print("Loading games data...")
        all_games = []
        try:
            with open('data/index.json', 'r') as f:
                index = json.load(f)
            
            for i in range(1, index['total_files'] + 1):
                with open(f'data/games_{i}.json', 'r') as f:
                    games = json.load(f)
                    all_games.extend(games)
        except Exception as e:
            print(f"Error loading games data: {e}")
            exit(1)

        if not all_games:
            print("No games loaded. Exiting.")
            exit(1)

        print(f"Loaded {len(all_games)} games.")
        print("Processing HLTB data...")
        start_time = time.time()
        try:
            hltb_data = asyncio.run(process_hltb_data(all_games))
        except asyncio.exceptions.CancelledError:
            print("Operation was cancelled. Saving partial results...")
        end_time = time.time()
        print(f"HLTB data processing took {end_time - start_time:.2f} seconds")
        print(f"Successfully processed {len(hltb_data)} games")

        hltb_per_file = 10000
        total_hltb_files = math.ceil(len(hltb_data) / hltb_per_file)

        print(f"Creating {total_hltb_files} HLTB file(s)...")

        for i in range(total_hltb_files):
            start = i * hltb_per_file
            end = min((i + 1) * hltb_per_file, len(hltb_data))
            with open(f'data/hltb_{i+1}.json', 'w') as f:
                json.dump(hltb_data[start:end], f)
            print(f"Created file data/hltb_{i+1}.json with {end - start} games")

        # Создаем индекс для HLTB данных
        hltb_index = {}
        for game in hltb_data:
            hltb_index[game['id']] = {
                'file': f"hltb_{math.floor(hltb_data.index(game) / hltb_per_file) + 1}.json",
                'index': hltb_data.index(game) % hltb_per_file
            }

        with open('data/hltb_index.json', 'w') as f:
            json.dump(hltb_index, f)
        print("Created hltb_index.json file")

        # Обновляем основной индекс
        index['total_hltb_files'] = total_hltb_files
        index['total_hltb_games'] = len(hltb_data)
        index['last_hltb_update'] = "$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
        with open('data/index.json', 'w') as f:
            json.dump(index, f)
        print("Updated index.json file with HLTB data")

        print("HLTB data processing complete!")
        EOF

    - name: Commit and push if changed
      run: |
        git config --global user.email "github-actions@github.com"
        git config --global user.name "GitHub Actions"
        git add data
        git diff --quiet && git diff --staged --quiet || (git commit -m "Update HLTB data" && git push)
