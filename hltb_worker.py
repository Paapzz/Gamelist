#!/usr/bin/env python3

import json
import time
import random
import re
import os
from datetime import datetime
from urllib.parse import quote
from playwright.sync_api import sync_playwright

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "https://howlongtobeat.com"
GAMES_LIST_FILE = "index111.html"
OUTPUT_DIR = "hltb_data"
OUTPUT_FILE = f"{OUTPUT_DIR}/hltb_data.json"
PROGRESS_FILE = "progress.json"

# –ó–∞–¥–µ—Ä–∂–∫–∏ (—É–±—Ä–∞–Ω–∞ –≤–µ–∂–ª–∏–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏)
BREAK_INTERVAL = 6 * 60  # 6 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
BREAK_DURATION = 2 * 60  # 2 –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

def setup_directories():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    
def log_message(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"[{timestamp}] {message}"
    print(log_entry)

def count_hltb_data(hltb_data):
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö HLTB –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    categories = {"ms": 0, "mpe": 0, "comp": 0, "all": 0}
    total_polled = {"ms": 0, "mpe": 0, "comp": 0, "all": 0}
    
    for game in hltb_data:
        if "hltb" in game:
            for category in categories:
                if category in game["hltb"] and game["hltb"][category]:
                    categories[category] += 1
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤
                    if isinstance(game["hltb"][category], dict) and "p" in game["hltb"][category]:
                        total_polled[category] += game["hltb"][category]["p"]
    
    return categories, total_polled

def extract_games_list(html_file):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –∏–∑ HTML —Ñ–∞–π–ª–∞"""
    try:
        log_message(f"üìñ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª {html_file}...")
        with open(html_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        log_message(f"üìÑ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ gamesList
        log_message("üîç –ò—â–µ–º 'const gamesList = ['...")
        start = content.find('const gamesList = [')
        if start == -1:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω const gamesList –≤ HTML —Ñ–∞–π–ª–µ")
        
        log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω const gamesList –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {start}")
        
        # –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –º–∞—Å—Å–∏–≤–∞
        log_message("üîç –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –º–∞—Å—Å–∏–≤–∞...")
        bracket_count = 0
        end = start
        for i, char in enumerate(content[start:], start):
            if char == '[':
                bracket_count += 1
            elif char == ']':
                bracket_count -= 1
                if bracket_count == 0:
                    end = i + 1
                    break
        
        if bracket_count != 0:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ gamesList")
        
        log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {end}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON
        log_message("‚úÇÔ∏è –ò–∑–≤–ª–µ–∫–∞–µ–º JSON...")
        games_json = content[start:end]
        games_json = games_json.replace('const gamesList = ', '')
        
        log_message(f"üìù JSON –∏–∑–≤–ª–µ—á–µ–Ω, —Ä–∞–∑–º–µ—Ä: {len(games_json)} —Å–∏–º–≤–æ–ª–æ–≤")
        log_message("üîÑ –ü–∞—Ä—Å–∏–º JSON...")
        
        games_list = json.loads(games_json)
        log_message(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(games_list)} –∏–≥—Ä –∏–∑ HTML —Ñ–∞–π–ª–∞")
        return games_list
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä: {e}")
        raise

def parse_time_to_hours(time_str):
    """–ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Xh Ym' –≤ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã"""
    if not time_str or time_str == "N/A":
        return 0, 0
    
    # –ò—â–µ–º —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
    hours_match = re.search(r'(\d+)h', time_str)
    minutes_match = re.search(r'(\d+)m', time_str)
    
    hours = int(hours_match.group(1)) if hours_match else 0
    minutes = int(minutes_match.group(1)) if minutes_match else 0
    
    return hours, minutes

def round_time(time_str):
    """–û–∫—Ä—É–≥–ª—è–µ—Ç –≤—Ä–µ–º—è –∫ –±–ª–∏–∂–∞–π—à–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é"""
    if not time_str or time_str == "N/A":
        return None
    
    hours, minutes = parse_time_to_hours(time_str)
    
    if minutes <= 14:
        return f"{hours}h"           # 0-14 –º–∏–Ω ‚Üí —Ü–µ–ª—ã–π —á–∞—Å
    elif minutes <= 44:
        return f"{hours}.5h"         # 15-44 –º–∏–Ω ‚Üí +0.5 —á–∞—Å–∞
    else:
        return f"{hours + 1}h"       # 45-59 –º–∏–Ω ‚Üí +1 —á–∞—Å

def random_delay(min_seconds, max_seconds):
    """–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"""
    delay = random.uniform(min_seconds, max_seconds)
    time.sleep(delay)

def check_break_time(start_time, games_processed):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ—Ä—ã–≤"""
    elapsed_seconds = time.time() - start_time
    
    if elapsed_seconds >= BREAK_INTERVAL:
        log_message(f"‚è∏Ô∏è  –ü–µ—Ä–µ—Ä—ã–≤ 2 –º–∏–Ω—É—Ç—ã... (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {games_processed} –∏–≥—Ä)")
        time.sleep(BREAK_DURATION)
        return time.time()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    
    return start_time

def search_game_on_hltb(page, game_title):
    """–ò—â–µ—Ç –∏–≥—Ä—É –Ω–∞ HLTB –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    max_attempts = 3
    delays = [0, (15, 18), (65, 70)]  # –ü–∞—É–∑—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    for attempt in range(max_attempts):
        try:
            if attempt > 0:
                log_message(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts} –¥–ª—è '{game_title}'")
                if isinstance(delays[attempt], tuple):
                    min_delay, max_delay = delays[attempt]
                    log_message(f"‚è≥ –ü–∞—É–∑–∞ {min_delay}-{max_delay} —Å–µ–∫—É–Ω–¥...")
                    random_delay(min_delay, max_delay)
                else:
                    log_message(f"‚è≥ –ü–∞—É–∑–∞ {delays[attempt]} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(delays[attempt])
            
            result = search_game_single_attempt(page, game_title)
            if result is not None:
                if attempt > 0:
                    log_message(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–æ —Å –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1}")
                return result
            
        except Exception as e:
            log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1} –¥–ª—è '{game_title}': {e}")
            if attempt == max_attempts - 1:
                log_message(f"üí• –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è '{game_title}'")
                return None
    
    return None

def search_game_single_attempt(page, game_title):
    """–û–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä—ã –Ω–∞ HLTB"""
    try:
        # –ö–æ–¥–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è URL
        safe_title = quote(game_title, safe="")
        search_url = f"{BASE_URL}/?q={safe_title}"
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞
        page.goto(search_url, timeout=15000)
        page.wait_for_load_state("domcontentloaded", timeout=10000)
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ (React –∫–æ–Ω—Ç–µ–Ω—Ç)
        random_delay(3, 5)  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 3-5 —Å–µ–∫—É–Ω–¥
        
        # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—ã
        game_links = page.locator('a[href^="/game/"]')
        found_count = game_links.count()
        
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç, –∂–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ
        if found_count == 0:
            random_delay(2, 4)  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 2-4 —Å–µ–∫—É–Ω–¥—ã
            found_count = game_links.count()
        
        if found_count == 0:
            return None
        
        # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        best_match = find_best_match(page, game_links, game_title)
        if not best_match:
            return None
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
        game_url = best_match.get_attribute("href")
        full_url = f"{BASE_URL}{game_url}"
        
        page.goto(full_url, timeout=15000)
        page.wait_for_load_state("domcontentloaded", timeout=10000)
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã (React –∫–æ–Ω—Ç–µ–Ω—Ç)
        random_delay(2, 3)  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 2-3 —Å–µ–∫—É–Ω–¥—ã
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        hltb_data = extract_hltb_data_from_page(page)
        return hltb_data
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä—ã '{game_title}': {e}")
        return None

def find_best_match(page, game_links, original_title):
    """–ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–≥—Ä"""
    try:
        best_match = None
        best_score = 0
        
        # –û—á–∏—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        original_clean = clean_title_for_comparison(original_title)
        
        for i in range(min(game_links.count(), 10)):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            link = game_links.nth(i)
            link_text = link.inner_text().strip()
            
            if link_text:
                # –û—á–∏—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                found_clean = clean_title_for_comparison(link_text)
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å
                score = calculate_title_similarity(original_clean, found_clean)
                
                if score > best_score:
                    best_score = score
                    best_match = link
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if score >= 0.9:
                    break
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä
        if best_match and best_score > 0:
            chosen_title = best_match.inner_text().strip()
            log_message(f"üéØ –í—ã–±—Ä–∞–Ω–æ: '{chosen_title}' (—Å—Ö–æ–∂–µ—Å—Ç—å: {best_score:.2f})")
        
        return best_match if best_score >= 0.3 else None  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {e}")
        return game_links.first if game_links.count() > 0 else None

def clean_title_for_comparison(title):
    """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    import re
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    cleaned = re.sub(r'[^\w\s]', '', title.lower())
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    cleaned = re.sub(r'\s+', ' ', cleaned).strip()
    return cleaned

def calculate_title_similarity(title1, title2):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏–≥—Ä"""
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å—Ö–æ–∂–µ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö —Å–ª–æ–≤
        words1 = set(title1.split())
        words2 = set(title2.split())
        
        if not words1 or not words2:
            return 0.0
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–ª–æ–≤
        common_words = words1.intersection(words2)
        total_words = words1.union(words2)
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å –ø–æ —Å–ª–æ–≤–∞–º
        word_similarity = len(common_words) / len(total_words)
        
        # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if title1 == title2:
            return 1.0
        
        # –ë–æ–Ω—É—Å –∑–∞ –≤–∫–ª—é—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –≤ –¥—Ä—É–≥–æ–µ
        if title1 in title2 or title2 in title1:
            word_similarity += 0.2
        
        # –ë–æ–Ω—É—Å –∑–∞ –æ–±—â–∏–µ –¥–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (–±–æ–ª–µ–µ 4 —Å–∏–º–≤–æ–ª–æ–≤)
        long_common = [w for w in common_words if len(w) > 4]
        if long_common:
            word_similarity += 0.1 * len(long_common)
        
        return min(word_similarity, 1.0)
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ö–æ–∂–µ—Å—Ç–∏: {e}")
        return 0.0

def extract_hltb_data_from_page(page):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ HLTB —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä—ã"""
    try:
        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏
        table_rows = page.locator("table tr")
        hltb_data = {}
        
        for i in range(table_rows.count()):
            row_text = table_rows.nth(i).inner_text().strip()
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω—É–∂–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            if "Main Story" in row_text:
                hltb_data["ms"] = extract_time_and_polled_from_row(row_text)
            elif "Main + Extras" in row_text:
                hltb_data["mpe"] = extract_time_and_polled_from_row(row_text)
            elif "Completionist" in row_text:
                hltb_data["comp"] = extract_time_and_polled_from_row(row_text)
            elif "All PlayStyles" in row_text:
                hltb_data["all"] = extract_time_and_polled_from_row(row_text)
        
        return hltb_data if hltb_data else None
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return None

def extract_time_and_polled_from_row(row_text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        # –ò—â–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "Xh Ym"
        time_match = re.search(r'(\d+h\s*\d*m)', row_text)
        if time_match:
            time_str = time_match.group(1)
            rounded_time = round_time(time_str)
            
            # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ - –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–æ–∏—Å–∫
            polled_count = None
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –ò—â–µ–º —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ "Polled"
            polled_match = re.search(r'(\d+(?:\.\d+)?[Kk]?)\s*(?:Polled|polled)', row_text, re.IGNORECASE)
            if polled_match:
                polled_str = polled_match.group(1)
                polled_count = parse_polled_number(polled_str)
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –ò—â–µ–º —á–∏—Å–ª–æ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (—á–∞—Å—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º)
            if not polled_count:
                first_number_match = re.search(r'^(\d+(?:\.\d+)?[Kk]?)', row_text.strip())
                if first_number_match:
                    polled_str = first_number_match.group(1)
                    polled_count = parse_polled_number(polled_str)
            
            # –í–∞—Ä–∏–∞–Ω—Ç 3: –ò—â–µ–º –ª—é–±–æ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–µ (–µ—Å–ª–∏ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏)
            if not polled_count:
                any_number_match = re.search(r'(\d+(?:\.\d+)?[Kk]?)', row_text)
                if any_number_match:
                    polled_str = any_number_match.group(1)
                    polled_count = parse_polled_number(polled_str)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
            result = {"t": rounded_time}
            if polled_count:
                result["p"] = polled_count
            
            return result
        return None
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏: {e}")
        return None

def parse_polled_number(polled_str):
    """–ü–∞—Ä—Å–∏—Ç —á–∏—Å–ª–æ –≥–æ–ª–æ—Å–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    try:
        if 'K' in polled_str.upper():
            return int(float(polled_str.upper().replace('K', '')) * 1000)
        else:
            return int(float(polled_str))
    except:
        return None

def extract_time_from_row(row_text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    try:
        # –ò—â–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "Xh Ym"
        time_match = re.search(r'(\d+h\s*\d*m)', row_text)
        if time_match:
            time_str = time_match.group(1)
            return round_time(time_str)
        return None
    except:
        return None

def save_progress(games_data, current_index, total_games):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    progress_data = {
        "current_index": current_index,
        "total_games": total_games,
        "processed_games": len([g for g in games_data if "hltb" in g]),
        "last_updated": datetime.now().isoformat(),
        "status": "in_progress" if current_index < total_games else "completed"
    }
    
    with open(PROGRESS_FILE, "w", encoding="utf-8") as f:
        json.dump(progress_data, f, indent=2, ensure_ascii=False)

def save_results(games_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    try:
        with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
            for i, game in enumerate(games_data):
                # –ö–∞–∂–¥–∞—è –∏–≥—Ä–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –±–µ–∑ –æ—Ç—Å—Ç—É–ø–æ–≤
                if i > 0:
                    f.write("\n")
                json.dump(game, f, separators=(',', ':'), ensure_ascii=False)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        categories, total_polled = count_hltb_data(games_data)
        successful = len([g for g in games_data if "hltb" in g])
        
        log_message(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {OUTPUT_FILE}")
        log_message(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {successful}/{len(games_data)} –∏–≥—Ä —Å –¥–∞–Ω–Ω—ã–º–∏ HLTB")
        log_message(f"üìä Main Story: {categories['ms']} ({total_polled['ms']} –≥–æ–ª–æ—Å–æ–≤), Main+Extras: {categories['mpe']} ({total_polled['mpe']} –≥–æ–ª–æ—Å–æ–≤)")
        log_message(f"üìä Completionist: {categories['comp']} ({total_polled['comp']} –≥–æ–ª–æ—Å–æ–≤), All: {categories['all']} ({total_polled['all']} –≥–æ–ª–æ—Å–æ–≤)")
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        raise

def log_progress(current, total, start_time):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    elapsed = time.time() - start_time
    rate = current / elapsed * 60 if elapsed > 0 else 0  # –∏–≥—Ä –≤ –º–∏–Ω—É—Ç—É
    eta = (total - current) / rate if rate > 0 else 0  # –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    
    log_message(f"üìä {current}/{total} | {rate:.1f} –∏–≥—Ä/–º–∏–Ω | ETA: {eta:.0f} –º–∏–Ω")

def update_html_with_hltb(html_file, hltb_data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç HTML —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ HLTB –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º HTML
        with open(html_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º gamesList
        start = content.find('const gamesList = [')
        if start == -1:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω const gamesList –≤ HTML —Ñ–∞–π–ª–µ")
        
        end = content.find('];', start) + 2
        if end == 1:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ gamesList")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π JSON —Å HLTB –¥–∞–Ω–Ω—ã–º–∏ (–≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É)
        new_games_list = json.dumps(hltb_data, separators=(',', ':'), ensure_ascii=False)
        new_content = content[:start] + f'const gamesList = {new_games_list}' + content[end:]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π HTML
        with open(html_file, 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        log_message(f"‚úÖ HTML —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {html_file}")
        return True
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è HTML: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞"""
    log_message("üöÄ –ó–∞–ø—É—Å–∫ HLTB Worker")
    log_message(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    log_message(f"üìÑ –ò—â–µ–º —Ñ–∞–π–ª: {GAMES_LIST_FILE}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(GAMES_LIST_FILE):
        log_message(f"‚ùå –§–∞–π–ª {GAMES_LIST_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    log_message(f"‚úÖ –§–∞–π–ª {GAMES_LIST_FILE} –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(GAMES_LIST_FILE)} –±–∞–π—Ç")
    
    setup_directories()
    log_message("üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    try:
        log_message("üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä...")
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä
        games_list = extract_games_list(GAMES_LIST_FILE)
        total_games = len(games_list)
        log_message(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {total_games} –∏–≥—Ä")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å, –µ—Å–ª–∏ –µ—Å—Ç—å
        if os.path.exists(PROGRESS_FILE):
            with open(PROGRESS_FILE, "r", encoding="utf-8") as f:
                progress = json.load(f)
            start_index = progress.get("current_index", 0)
            log_message(f"üìÇ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø–æ–∑–∏—Ü–∏–∏ {start_index}")
        else:
            start_index = 0
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        log_message("üåê –ó–∞–ø—É—Å–∫–∞–µ–º Playwright...")
        with sync_playwright() as p:
            log_message("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Chromium...")
            browser = p.chromium.launch(headless=True)
            log_message("‚úÖ Chromium –∑–∞–ø—É—â–µ–Ω")
            
            log_message("üîß –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞...")
            context = browser.new_context(
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0 Safari/537.36",
                viewport={"width": 1280, "height": 800},
                locale="en-US"
            )
            log_message("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω")
            
            log_message("üìÑ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
            page = context.new_page()
            log_message("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–≥—Ä")
            
            start_time = time.time()
            processed_count = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–≥—Ä—ã
            for i in range(start_index, total_games):
                game = games_list[i]
                game_title = game["title"]
                
                log_message(f"üéÆ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {i+1}/{total_games}: {game_title}")
                
                # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ HLTB
                hltb_data = search_game_on_hltb(page, game_title)
                
                if hltb_data:
                    game["hltb"] = hltb_data
                    processed_count += 1
                    log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {hltb_data}")
                else:
                    log_message(f"‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è: {game_title}")
                
                # –í–µ–∂–ª–∏–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —É–±—Ä–∞–Ω–∞ - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–¥–µ—Ä–∂–µ–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∏—Å–∫–∞
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ä—ã–≤
                start_time = check_break_time(start_time, i + 1)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –∏–≥—Ä
                if (i + 1) % 50 == 0:
                    save_progress(games_list, i + 1, total_games)
                    log_progress(i + 1, total_games, start_time)
            
            browser.close()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        save_results(games_list)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        successful = len([g for g in games_list if "hltb" in g])
        log_message(f"üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {successful}/{total_games} –∏–≥—Ä ({successful/total_games*100:.1f}%)")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º HTML —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        log_message("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HTML —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ HLTB...")
        if update_html_with_hltb(GAMES_LIST_FILE, games_list):
            log_message("‚úÖ HTML —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        else:
            log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å HTML —Ñ–∞–π–ª")
        
    except Exception as e:
        log_message(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    main()
