#!/usr/bin/env python3

print("üöÄ HLTB Worker –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
print("üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏...")

import json
print("‚úÖ json –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

import time
print("‚úÖ time –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

import random
print("‚úÖ random –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

import re
print("‚úÖ re –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

import os
print("‚úÖ os –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

from datetime import datetime
print("‚úÖ datetime –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

from urllib.parse import quote
print("‚úÖ urllib.parse –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

print("üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Playwright...")
from playwright.sync_api import sync_playwright
print("‚úÖ Playwright –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "https://howlongtobeat.com"
GAMES_LIST_FILE = "index111.html"
OUTPUT_DIR = "hltb_data"
OUTPUT_FILE = f"{OUTPUT_DIR}/hltb_data.json"

# –ó–∞–¥–µ—Ä–∂–∫–∏ (—É–±—Ä–∞–Ω–∞ –≤–µ–∂–ª–∏–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏)
BREAK_INTERVAL_MIN = 8 * 60  # 8 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
BREAK_INTERVAL_MAX = 10 * 60  # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
BREAK_DURATION_MIN = 40  # 40 —Å–µ–∫—É–Ω–¥
BREAK_DURATION_MAX = 80  # 80 —Å–µ–∫—É–Ω–¥

def setup_directories():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print(f"üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {OUTPUT_DIR}")
    try:
        os.makedirs(OUTPUT_DIR, exist_ok=True)
        print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {OUTPUT_DIR} —Å–æ–∑–¥–∞–Ω–∞/—Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
        raise
    
def log_message(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    try:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        print(log_entry)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}")

def count_hltb_data(hltb_data):
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö HLTB –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    categories = {"ms": 0, "mpe": 0, "comp": 0, "coop": 0, "vs": 0}
    total_polled = {"ms": 0, "mpe": 0, "comp": 0, "coop": 0, "vs": 0}
    na_count = 0
    
    for game in hltb_data:
        if "hltb" in game:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ N/A –∑–∞–ø–∏—Å—å—é
            if (isinstance(game["hltb"], dict) and 
                game["hltb"].get("ms") == "N/A" and 
                game["hltb"].get("mpe") == "N/A" and 
                game["hltb"].get("comp") == "N/A"):
                na_count += 1
                continue
            
            for category in categories:
                if category in game["hltb"] and game["hltb"][category] and game["hltb"][category] != "N/A":
                    categories[category] += 1
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤
                    if isinstance(game["hltb"][category], dict) and "p" in game["hltb"][category]:
                        total_polled[category] += game["hltb"][category]["p"]
    
    return categories, total_polled, na_count

def extract_games_list(html_file):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –∏–∑ HTML —Ñ–∞–π–ª–∞"""
    try:
        log_message(f"üìñ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª {html_file}...")
        with open(html_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        log_message(f"üìÑ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ gamesList
        log_message("üîç –ò—â–µ–º 'const gamesList = ['...")
        start = content.find('const gamesList = [')
        if start == -1:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω const gamesList –≤ HTML —Ñ–∞–π–ª–µ")
        
        log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω const gamesList –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {start}")
        
        # –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –º–∞—Å—Å–∏–≤–∞
        log_message("üîç –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –º–∞—Å—Å–∏–≤–∞...")
        bracket_count = 0
        end = start
        for i, char in enumerate(content[start:], start):
            if char == '[':
                bracket_count += 1
            elif char == ']':
                bracket_count -= 1
                if bracket_count == 0:
                    end = i + 1
                    break
        
        if bracket_count != 0:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ gamesList")
        
        log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {end}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON
        log_message("‚úÇÔ∏è –ò–∑–≤–ª–µ–∫–∞–µ–º JSON...")
        games_json = content[start:end]
        games_json = games_json.replace('const gamesList = ', '')
        
        log_message(f"üìù JSON –∏–∑–≤–ª–µ—á–µ–Ω, —Ä–∞–∑–º–µ—Ä: {len(games_json)} —Å–∏–º–≤–æ–ª–æ–≤")
        log_message("üîÑ –ü–∞—Ä—Å–∏–º JSON...")
        
        games_list = json.loads(games_json)
        log_message(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(games_list)} –∏–≥—Ä –∏–∑ HTML —Ñ–∞–π–ª–∞")
        return games_list
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä: {e}")
        raise

def parse_time_to_hours(time_str):
    """–ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Xh Ym' –∏–ª–∏ 'X Hours' –≤ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã"""
    if not time_str or time_str == "N/A":
        return 0, 0
    
    # –£–±–∏—Ä–∞–µ–º "Hours" –µ—Å–ª–∏ –µ—Å—Ç—å
    time_str = time_str.replace("Hours", "").strip()
    
    # –ò—â–µ–º —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥—Ä–æ–±–Ω—ã–µ —á–∞—Å—ã)
    hours_match = re.search(r'(\d+(?:\.\d+)?)h', time_str)
    minutes_match = re.search(r'(\d+)m', time_str)
    
    hours = float(hours_match.group(1)) if hours_match else 0
    minutes = int(minutes_match.group(1)) if minutes_match else 0
    
    # –ï—Å–ª–∏ –Ω–µ—Ç "h" –∏ "m", –Ω–æ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (—á–∞—Å—ã)
    if hours == 0 and minutes == 0:
        number_match = re.search(r'(\d+(?:\.\d+)?)', time_str)
        if number_match:
            hours = float(number_match.group(1))
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å –≤ –º–∏–Ω—É—Ç—ã
            if hours != int(hours):
                minutes = int((hours - int(hours)) * 60)
                hours = int(hours)
    
    # –ï—Å–ª–∏ —á–∞—Å—ã –¥—Ä–æ–±–Ω—ã–µ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å –≤ –º–∏–Ω—É—Ç—ã
    if hours != int(hours):
        minutes += int((hours - int(hours)) * 60)
        hours = int(hours)
    
    return hours, minutes

def round_time(time_str):
    """–û–∫—Ä—É–≥–ª—è–µ—Ç –≤—Ä–µ–º—è –∫ –±–ª–∏–∂–∞–π—à–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é"""
    if not time_str or time_str == "N/A":
        return None
    
    hours, minutes = parse_time_to_hours(time_str)
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ hours - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    hours = int(hours)
    
    if minutes <= 14:
        return f"{hours}h"           # 0-14 –º–∏–Ω ‚Üí —Ü–µ–ª—ã–π —á–∞—Å
    elif minutes <= 44:
        return f"{hours}.5h"         # 15-44 –º–∏–Ω ‚Üí +0.5 —á–∞—Å–∞
    else:
        return f"{hours + 1}h"       # 45-59 –º–∏–Ω ‚Üí +1 —á–∞—Å

def random_delay(min_seconds, max_seconds):
    """–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"""
    delay = random.uniform(min_seconds, max_seconds)
    time.sleep(delay)

def check_break_time(start_time, games_processed):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ—Ä—ã–≤"""
    elapsed_seconds = time.time() - start_time
    
    # –†–∞–Ω–¥–æ–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–µ—Ä–µ—Ä—ã–≤–∞–º–∏
    break_interval = random.randint(BREAK_INTERVAL_MIN, BREAK_INTERVAL_MAX)
    
    if elapsed_seconds >= break_interval:
        # –†–∞–Ω–¥–æ–º–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ä—ã–≤–∞
        break_duration = random.randint(BREAK_DURATION_MIN, BREAK_DURATION_MAX)
        log_message(f"‚è∏Ô∏è  –ü–µ—Ä–µ—Ä—ã–≤ {break_duration} —Å–µ–∫—É–Ω–¥... (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {games_processed} –∏–≥—Ä)")
        time.sleep(break_duration)
        return time.time()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    
    return start_time

def search_game_on_hltb(page, game_title, game_year=None):
    """–ò—â–µ—Ç –∏–≥—Ä—É –Ω–∞ HLTB –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏, —É—á–∏—Ç—ã–≤–∞—è –≥–æ–¥ —Ä–µ–ª–∏–∑–∞"""
    max_attempts = 3
    delays = [0, (15, 18), (65, 70)]  # –ü–∞—É–∑—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    alternative_titles = generate_alternative_titles(game_title)
    log_message(f"üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è '{game_title}': {alternative_titles}")
    
    for attempt in range(max_attempts):
        try:
            if attempt > 0:
                log_message(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts} –¥–ª—è '{game_title}'")
                if isinstance(delays[attempt], tuple):
                    min_delay, max_delay = delays[attempt]
                    log_message(f"‚è≥ –ü–∞—É–∑–∞ {min_delay}-{max_delay} —Å–µ–∫—É–Ω–¥...")
                    random_delay(min_delay, max_delay)
                else:
                    log_message(f"‚è≥ –ü–∞—É–∑–∞ {delays[attempt]} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(delays[attempt])
            
            # –ü—Ä–æ–±—É–µ–º –≤—Å–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            all_results = []
            
            for alt_title in alternative_titles:
                # –ò—â–µ–º —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏, –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                game_links = search_game_links_only(page, alt_title)
                if game_links:
                    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å –º–µ–∂–¥—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º
                    score = calculate_title_similarity(
                        clean_title_for_comparison(game_title),
                        clean_title_for_comparison(alt_title)
                    )
                    
                    all_results.append({
                        'game_links': game_links,
                        'score': score,
                        'title': alt_title
                    })
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Å —É—á–µ—Ç–æ–º –≥–æ–¥–∞
            if all_results:
                best_result = find_best_result_with_year(page, all_results, game_title, game_year)
                if best_result:
                    log_message(f"üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{best_result['title']}' (—Å—Ö–æ–∂–µ—Å—Ç—å: {best_result['score']:.2f})")
                    # –¢–µ–ø–µ—Ä—å –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    return extract_data_from_selected_game(page, best_result['selected_link'])
            
        except Exception as e:
            log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1} –¥–ª—è '{game_title}': {e}")
            if attempt == max_attempts - 1:
                log_message(f"üí• –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è '{game_title}'")
                return None
    
    return None

def search_game_links_only(page, game_title):
    """–ò—â–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—ã –±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    try:
        log_message(f"üîç –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è: '{game_title}'")
        
        # –ö–æ–¥–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è URL
        safe_title = quote(game_title, safe="")
        search_url = f"{BASE_URL}/?q={safe_title}"
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞
        page.goto(search_url, timeout=20000)
        page.wait_for_load_state("domcontentloaded", timeout=15000)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        page_content = page.content()
        if "blocked" in page_content.lower() or "access denied" in page_content.lower():
            log_message("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ë–õ–û–ö–ò–†–û–í–ö–ê IP –ø—Ä–∏ –ø–æ–∏—Å–∫–µ!")
            return None
        elif "cloudflare" in page_content.lower() and "checking your browser" in page_content.lower():
            log_message("‚ö†Ô∏è Cloudflare –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ - –∂–¥–µ–º...")
            time.sleep(5)
            page_content = page.content()
            if "checking your browser" in page_content.lower():
                log_message("‚ùå Cloudflare –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫")
                return None
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        random_delay(3, 5)
        
        # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—ã
        game_links = page.locator('a[href^="/game/"]')
        found_count = game_links.count()
        
        if found_count == 0:
            random_delay(2, 4)
            found_count = game_links.count()
        
        if found_count > 10:
            log_message(f"üìä –ù–∞–π–¥–µ–Ω–æ {found_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∂–¥–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É...")
            random_delay(5, 8)
            found_count = game_links.count()
        
        if found_count == 0:
            return None
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        links_data = []
        for i in range(min(found_count, 10)):  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            link = game_links.nth(i)
            link_text = link.inner_text().strip()
            link_href = link.get_attribute("href")
            
            if link_text and link_href:
                links_data.append({
                    'text': link_text,
                    'href': link_href,
                    'element': link
                })
        
        return links_data
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –¥–ª—è '{game_title}': {e}")
        return None

def extract_data_from_selected_game(page, selected_link):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä—ã"""
    try:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
        full_url = f"{BASE_URL}{selected_link['href']}"
        
        page.goto(full_url, timeout=20000)
        page.wait_for_load_state("domcontentloaded", timeout=15000)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–≥—Ä—ã
        page_content = page.content()
        if "blocked" in page_content.lower() or "access denied" in page_content.lower():
            log_message("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ë–õ–û–ö–ò–†–û–í–ö–ê IP –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–≥—Ä—ã!")
            return None
        elif "cloudflare" in page_content.lower() and "checking your browser" in page_content.lower():
            log_message("‚ö†Ô∏è Cloudflare –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–≥—Ä—ã - –∂–¥–µ–º...")
            time.sleep(5)
            page_content = page.content()
            if "checking your browser" in page_content.lower():
                log_message("‚ùå Cloudflare –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä—ã")
                return None
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        random_delay(3, 5)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ HLTB
        return extract_hltb_data_from_page(page)
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä—ã: {e}")
        return None

def find_best_result_with_year(page, all_results, original_title, original_year):
    """–í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º –≥–æ–¥–∞ —Ä–µ–ª–∏–∑–∞"""
    try:
        if not all_results:
            return None
        
        # –ï—Å–ª–∏ –≥–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
        if original_year is None:
            best_result = max(all_results, key=lambda x: x['score'])
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é —Å—Å—ã–ª–∫—É –∏–∑ —ç—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            best_link = find_best_link_in_result(best_result['game_links'], original_title)
            return {
                'title': best_result['title'],
                'score': best_result['score'],
                'selected_link': best_link
            }
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –±–µ–∑ –≥–æ–¥–∞
        all_candidates = []
        for result in all_results:
            for link in result['game_links']:
                # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å –º–µ–∂–¥—É –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º (–∫–æ—Ç–æ—Ä–æ–µ –∏—Å–∫–∞–ª–∏) –∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –Ω–∞ —Å–∞–π—Ç–µ
                link_similarity = calculate_title_similarity(
                    clean_title_for_comparison(result['title']),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å–∫–∞–ª–∏
                    clean_title_for_comparison(link['text'])
                )
                
                all_candidates.append({
                    'title': result['title'],
                    'score': link_similarity,
                    'link': link,
                    'year': None
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ö–æ–∂–µ—Å—Ç–∏ –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-3 –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–æ–¥–∞
        all_candidates.sort(key=lambda x: -x['score'])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–æ–¥–∞
        if all_candidates and all_candidates[0]['score'] >= 0.99:
            # –î–ª—è —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —Å—Ö–æ–∂–µ—Å—Ç—å—é
            same_score_count = sum(1 for c in all_candidates if c['score'] >= 0.99)
            if same_score_count > 1:
                # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —Å—Ö–æ–∂–µ—Å—Ç—å—é, –±–µ—Ä–µ–º –∏—Ö –≤—Å–µ (–¥–æ 3)
                top_candidates = all_candidates[:min(3, same_score_count)]
                log_message(f"üéØ –ù–∞–π–¥–µ–Ω–æ {same_score_count} —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –∏–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ –¥–ª—è —Ç–æ–ø-{len(top_candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
            else:
                # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–æ—á–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç, –±–µ—Ä–µ–º –µ–≥–æ + –µ—â–µ 2 –ª—É—á—à–∏—Ö
                top_candidates = all_candidates[:3]
                log_message(f"üéØ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∏–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ –¥–ª—è —Ç–æ–ø-3 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        else:
            top_candidates = all_candidates[:3]  # –¢–æ–ø-3 –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        for candidate in top_candidates:
            game_year = extract_year_from_game_page(page, candidate['link'])
            candidate['year'] = game_year
            log_message(f"üîç –ö–∞–Ω–¥–∏–¥–∞—Ç: '{candidate['link']['text']}' (—Å—Ö–æ–∂–µ—Å—Ç—å: {candidate['score']:.3f}, –≥–æ–¥: {game_year})")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
            if len(top_candidates) > 1:
                time.sleep(random.uniform(0.5, 1.5))  # 0.5-1.5 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –±–µ–∑ –≥–æ–¥–∞
        candidates_with_years = top_candidates + all_candidates[len(top_candidates):]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        candidates_with_years.sort(key=lambda x: (
            -x['score'],  # –°–Ω–∞—á–∞–ª–∞ –ø–æ —Å—Ö–æ–∂–µ—Å—Ç–∏ (—É–±—ã–≤–∞–Ω–∏–µ)
            abs(x['year'] - original_year) if x['year'] is not None else 999  # –ü–æ—Ç–æ–º –ø–æ —Ä–∞–∑–Ω–∏—Ü–µ –≤ –≥–æ–¥–∞—Ö
        ))
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        log_message(f"üìä –í—Å–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(candidates_with_years)}")
        for i, candidate in enumerate(candidates_with_years[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            log_message(f"üìä {i}. {candidate['link']['text']} (—Å—Ö–æ–∂–µ—Å—Ç—å: {candidate['score']:.3f}, –≥–æ–¥: {candidate['year']})")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –Ω–∞–∑–≤–∞–Ω–∏–µ >= 0.8 + –≥–æ–¥ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–π
        for candidate in candidates_with_years:
            if candidate['score'] >= 0.8 and candidate['year'] == original_year:
                log_message(f"‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢ 1: {candidate['link']['text']} (—Å—Ö–æ–∂–µ—Å—Ç—å: {candidate['score']:.3f}, –≥–æ–¥: {candidate['year']})")
                return {
                    'title': candidate['title'],
                    'score': candidate['score'],
                    'selected_link': candidate['link']
                }
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –Ω–∞–∑–≤–∞–Ω–∏–µ >= 0.8 + –≥–æ–¥ –±–ª–∏–∂–∞–π—à–∏–π –≤ –º–µ–Ω—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
        log_message(f"üîç –ò—â–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: —Å—Ö–æ–∂–µ—Å—Ç—å >= 0.8 –∏ –≥–æ–¥ < {original_year}")
        for candidate in candidates_with_years:
            if candidate['score'] >= 0.8 and candidate['year'] is not None and candidate['year'] < original_year:
                log_message(f"‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢ 2: {candidate['link']['text']} (—Å—Ö–æ–∂–µ—Å—Ç—å: {candidate['score']:.3f}, –≥–æ–¥: {candidate['year']})")
                return {
                    'title': candidate['title'],
                    'score': candidate['score'],
                    'selected_link': candidate['link']
                }
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –Ω–∞–∑–≤–∞–Ω–∏–µ >= 0.8 + –≥–æ–¥ –±–ª–∏–∂–∞–π—à–∏–π –≤ –ª—é–±—É—é —Å—Ç–æ—Ä–æ–Ω—É
        # –ù–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π —Å—Ö–æ–∂–µ—Å—Ç—å—é –±–µ–∑ –≥–æ–¥–∞
        best_score_without_year = max([c['score'] for c in candidates_with_years if c['year'] is None], default=0)
        for candidate in candidates_with_years:
            if candidate['score'] >= 0.8 and candidate['year'] is not None and candidate['score'] >= best_score_without_year:
                log_message(f"‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢ 3: {candidate['link']['text']} (—Å—Ö–æ–∂–µ—Å—Ç—å: {candidate['score']:.3f}, –≥–æ–¥: {candidate['year']})")
                return {
                    'title': candidate['title'],
                    'score': candidate['score'],
                    'selected_link': candidate['link']
                }
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –Ω–∞–∑–≤–∞–Ω–∏–µ >= 0.6 + –≥–æ–¥ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–π
        for candidate in candidates_with_years:
            if candidate['score'] >= 0.6 and candidate['year'] == original_year:
                log_message(f"‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢ 4: {candidate['link']['text']} (—Å—Ö–æ–∂–µ—Å—Ç—å: {candidate['score']:.3f}, –≥–æ–¥: {candidate['year']})")
                return {
                    'title': candidate['title'],
                    'score': candidate['score'],
                    'selected_link': candidate['link']
                }
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–∏–π –ø–æ —Å—Ö–æ–∂–µ—Å—Ç–∏
        best_candidate = candidates_with_years[0] if candidates_with_years else None
        if best_candidate:
            log_message(f"‚úÖ –õ—É—á—à–∏–π –ø–æ —Å—Ö–æ–∂–µ—Å—Ç–∏: {best_candidate['link']['text']} (—Å—Ö–æ–∂–µ—Å—Ç—å: {best_candidate['score']:.3f}, –≥–æ–¥: {best_candidate['year']})")
            return {
                'title': best_candidate['title'],
                'score': best_candidate['score'],
                'selected_link': best_candidate['link']
            }
        
        return None
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
        return None

def find_best_link_in_result(game_links, original_title):
    """–ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à—É—é —Å—Å—ã–ª–∫—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–æ–∏—Å–∫–∞"""
    if not game_links:
        return None
    
    best_link = None
    best_score = 0
    
    for link in game_links:
        score = calculate_title_similarity(
            clean_title_for_comparison(original_title),
            clean_title_for_comparison(link['text'])
        )
        
        if score > best_score:
            best_score = score
            best_link = link
    
    return best_link

def extract_year_from_game_page(page, link):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–æ–¥ —Ä–µ–ª–∏–∑–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä—ã"""
    try:
        # –ö—ç—à –¥–ª—è —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏—Ö—Å—è –∏–≥—Ä
        if not hasattr(extract_year_from_game_page, 'url_cache'):
            extract_year_from_game_page.url_cache = {}
        
        full_url = f"{BASE_URL}{link['href']}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if full_url in extract_year_from_game_page.url_cache:
            cached_year = extract_year_from_game_page.url_cache[full_url]
            log_message(f"üìÖ –ì–æ–¥ –∏–∑ –∫—ç—à–∞ –¥–ª—è '{link['text']}': {cached_year}")
            return cached_year
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä—ã
        page.goto(full_url, timeout=15000)  # –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 15 —Å–µ–∫—É–Ω–¥
        page.wait_for_load_state("domcontentloaded", timeout=10000)  # –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 10 —Å–µ–∫—É–Ω–¥
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥
        year = extract_release_year_from_page(page)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        extract_year_from_game_page.url_cache[full_url] = year
        
        log_message(f"üìÖ –ò–∑–≤–ª–µ—á–µ–Ω –≥–æ–¥ –¥–ª—è '{link['text']}': {year}")
        return year
        
    except Exception as e:
        log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–æ–¥–∞ –¥–ª—è {link['text']}: {e}")
        # –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —Å –º–µ–Ω—å—à–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            log_message(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–æ–¥–∞ –¥–ª—è '{link['text']}'...")
            page.goto(full_url, timeout=8000)  # –ï—â–µ –º–µ–Ω—å—à–µ —Ç–∞–π–º–∞—É—Ç
            page.wait_for_load_state("domcontentloaded", timeout=5000)  # –ï—â–µ –º–µ–Ω—å—à–µ —Ç–∞–π–º–∞—É—Ç
            year = extract_release_year_from_page(page)
            log_message(f"üìÖ –ò–∑–≤–ª–µ—á–µ–Ω –≥–æ–¥ –¥–ª—è '{link['text']}' (–ø–æ–≤—Ç–æ—Ä–Ω–æ): {year}")
            return year
        except Exception as e2:
            log_message(f"‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–æ–¥–∞ –¥–ª—è {link['text']}: {e2}")
            return None

def search_game_single_attempt(page, game_title):
    """–û–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä—ã –Ω–∞ HLTB"""
    try:
        log_message(f"üîç –ò—â–µ–º: '{game_title}'")
        
        # –ö–æ–¥–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è URL
        safe_title = quote(game_title, safe="")
        search_url = f"{BASE_URL}/?q={safe_title}"
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞
        page.goto(search_url, timeout=20000)
        page.wait_for_load_state("domcontentloaded", timeout=15000)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞
        page_content = page.content()
        if "blocked" in page_content.lower() or "access denied" in page_content.lower():
            log_message("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ë–õ–û–ö–ò–†–û–í–ö–ê IP –ø—Ä–∏ –ø–æ–∏—Å–∫–µ!")
            return None
        elif "cloudflare" in page_content.lower() and "checking your browser" in page_content.lower():
            log_message("‚ö†Ô∏è Cloudflare –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ - –∂–¥–µ–º...")
            time.sleep(5)
            page_content = page.content()
            if "checking your browser" in page_content.lower():
                log_message("‚ùå Cloudflare –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫")
                return None
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ (React –∫–æ–Ω—Ç–µ–Ω—Ç)
        random_delay(3, 5)  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 3-5 —Å–µ–∫—É–Ω–¥
        
        # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—ã
        game_links = page.locator('a[href^="/game/"]')
        found_count = game_links.count()
        
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç, –∂–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ
        if found_count == 0:
            random_delay(2, 4)  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 2-4 —Å–µ–∫—É–Ω–¥—ã
            found_count = game_links.count()
        
        # –ï—Å–ª–∏ –º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∂–¥–µ–º –¥–æ–ª—å—à–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        if found_count > 10:
            log_message(f"üìä –ù–∞–π–¥–µ–Ω–æ {found_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∂–¥–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É...")
            random_delay(5, 8)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            found_count = game_links.count()  # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
        
        if found_count == 0:
            return None
        
        # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        best_match, best_title, similarity = find_best_match(page, game_links, game_title)
        if not best_match:
            return None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
        best_url = best_match.get_attribute("href")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä
        log_message(f"üéØ –í—ã–±—Ä–∞–Ω–æ: '{best_title}' (—Å—Ö–æ–∂–µ—Å—Ç—å: {similarity:.2f})")
        
        # –ï—Å–ª–∏ —Å—Ö–æ–∂–µ—Å—Ç—å –º–µ–Ω—å—à–µ 0.6, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
        if similarity < 0.6:
            log_message(f"‚ö†Ô∏è  –ù–∏–∑–∫–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å ({similarity:.2f}), –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
            return None
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
        full_url = f"{BASE_URL}{best_url}"
        
        page.goto(full_url, timeout=20000)
        page.wait_for_load_state("domcontentloaded", timeout=15000)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–≥—Ä—ã
        page_content = page.content()
        if "blocked" in page_content.lower() or "access denied" in page_content.lower():
            log_message("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ë–õ–û–ö–ò–†–û–í–ö–ê IP –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–≥—Ä—ã!")
            return None
        elif "cloudflare" in page_content.lower() and "checking your browser" in page_content.lower():
            log_message("‚ö†Ô∏è Cloudflare –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–≥—Ä—ã - –∂–¥–µ–º...")
            time.sleep(5)
            page_content = page.content()
            if "checking your browser" in page_content.lower():
                log_message("‚ùå Cloudflare –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä—ã")
                return None
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã (React –∫–æ–Ω—Ç–µ–Ω—Ç)
        random_delay(3, 5)  # –£–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        hltb_data = extract_hltb_data_from_page(page)
        return hltb_data
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä—ã '{game_title}': {e}")
        return None

def find_best_match(page, game_links, original_title):
    """–ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–≥—Ä"""
    try:
        best_match = None
        best_score = 0
        best_title = ""
        
        # –û—á–∏—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        original_clean = clean_title_for_comparison(original_title)
        
        for i in range(min(game_links.count(), 10)):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            link = game_links.nth(i)
            link_text = link.inner_text().strip()
            
            if link_text:
                # –û—á–∏—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                found_clean = clean_title_for_comparison(link_text)
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å
                score = calculate_title_similarity(original_clean, found_clean)
                
                if score > best_score:
                    best_score = score
                    best_match = link
                    best_title = link_text
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if score >= 0.9:
                    break
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ç–µ–∂ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ —Å—Ö–æ–∂–µ—Å—Ç—å—é
        if best_score >= 0.3:
            return best_match, best_title, best_score
        else:
            return None, "", 0
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {e}")
        return game_links.first if game_links.count() > 0 else None, "", 0

def clean_title_for_comparison(title):
    """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    import re
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    cleaned = re.sub(r'[^\w\s]', '', title.lower())
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    cleaned = re.sub(r'\s+', ' ', cleaned).strip()
    return cleaned

def extract_primary_title(game_title):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏"""
    if not game_title:
        return game_title
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å "/", –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ-—Ä–∞–∑–Ω–æ–º—É
    if "/" in game_title:
        parts = [part.strip() for part in game_title.split("/")]
        
        # –ï—Å–ª–∏ —á–∞—Å—Ç–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä "Gold/Silver/Crystal"), –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å "and"
        if all(" " not in part for part in parts):
            primary = f"{parts[0]} and {parts[1]}"
            log_message(f"üìù –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–∞—Å—Ç–∏: '{game_title}' -> '{primary}'")
            return primary
        else:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
            primary = parts[0]
            log_message(f"üìù –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: '{game_title}' -> '{primary}'")
            return primary
    
    return game_title

def extract_alternative_title(game_title):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    if not game_title or "/" not in game_title:
        return None
    
    parts = [part.strip() for part in game_title.split("/")]
    
    # –ï—Å–ª–∏ —á–∞—Å—Ç–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å
    if len(parts) >= 2 and all(" " not in part for part in parts):
        alternative = parts[1]
        log_message(f"üìù –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: '{game_title}' -> '{alternative}'")
        return alternative
    
    return None

def convert_arabic_to_roman(num_str):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—Ä–∞–±—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –≤ —Ä–∏–º—Å–∫–∏–µ"""
    try:
        num = int(num_str)
        if num == 1:
            return "I"
        elif num == 2:
            return "II"
        elif num == 3:
            return "III"
        elif num == 4:
            return "IV"
        elif num == 5:
            return "V"
        elif num == 6:
            return "VI"
        elif num == 7:
            return "VII"
        elif num == 8:
            return "VIII"
        elif num == 9:
            return "IX"
        elif num == 10:
            return "X"
        else:
            return num_str
    except:
        return num_str

def generate_alternative_titles(game_title):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    alternatives = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ—à –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    if " / " in game_title:
        # –°–ª–µ—à —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ - –¥–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏—è (–ù–ï –≤–∫–ª—é—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª)
        parts = [part.strip() for part in game_title.split(" / ")]
        log_message(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–µ—à —Å –ø—Ä–æ–±–µ–ª–∞–º–∏: {parts}")
        
        # –ü–æ—Ä—è–¥–æ–∫: A, B, A —Ä–∏–º—Å–∫–∏–µ, B —Ä–∏–º—Å–∫–∏–µ, A –∞–º–ø–µ—Ä—Å–∞–Ω–¥, B –∞–º–ø–µ—Ä—Å–∞–Ω–¥, A –±–µ–∑ —Å–∫–æ–±–æ–∫, B –±–µ–∑ —Å–∫–æ–±–æ–∫
        for part in parts:
            if part and part not in alternatives:
                alternatives.append(part)
        
        # –†–∏–º—Å–∫–∏–µ/–∞—Ä–∞–±—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
        for part in parts:
            roman_variants = generate_roman_variants(part)
            for variant in roman_variants:
                if variant not in alternatives:
                    alternatives.append(variant)
        
        # –ê–º–ø–µ—Ä—Å–∞–Ω–¥ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
        for part in parts:
            ampersand_variants = generate_ampersand_variants(part)
            for variant in ampersand_variants:
                if variant not in alternatives:
                    alternatives.append(variant)
        
        # –ë–µ–∑ —Å–∫–æ–±–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
        for part in parts:
            no_parens = remove_parentheses(part)
            if no_parens and no_parens not in alternatives:
                alternatives.append(no_parens)
                
    elif "/" in game_title and " / " not in game_title:
        # –°–ª–µ—à –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é —á–∞—Å—Ç—å
        parts = [part.strip() for part in game_title.split("/")]
        log_message(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–µ—à –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤: {parts}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        alternatives.append(game_title)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é —á–∞—Å—Ç—å (–ø—Ä–µ—Ñ–∏–∫—Å)
        base = determine_base_part(parts)
        log_message(f"üìù –ë–∞–∑–æ–≤–∞—è —á–∞—Å—Ç—å: '{base}'")
        
        if base:
            # –ù–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫: –≤—Å–µ –≤–º–µ—Å—Ç–µ, –ø–∞—Ä–Ω—ã–µ, –æ–¥–∏–Ω–æ—á–Ω—ã–µ
            
            # 1. –í—Å–µ —á–∞—Å—Ç–∏ –≤–º–µ—Å—Ç–µ
            if len(parts) > 2:
                non_base_parts = []
                for p in parts:
                    if p != base:
                        # –£–±–∏—Ä–∞–µ–º –±–∞–∑—É –∏–∑ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∞ —Ç–∞–º –µ—Å—Ç—å
                        clean_part = p.replace(base, "").strip()
                        if clean_part:
                            non_base_parts.append(clean_part)
                
                if len(non_base_parts) > 2:
                    all_parts_title = f"{base} {' and '.join(non_base_parts)}"
                    if all_parts_title not in alternatives:
                        alternatives.append(all_parts_title)
            
            # 2. –ü–∞—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            for i in range(len(parts)):
                for j in range(i + 1, len(parts)):
                    if parts[i] != base and parts[j] != base:
                        # –£–±–∏—Ä–∞–µ–º –±–∞–∑—É –∏–∑ —á–∞—Å—Ç–µ–π, –µ—Å–ª–∏ –æ–Ω–∞ —Ç–∞–º –µ—Å—Ç—å
                        part1 = parts[i].replace(base, "").strip()
                        part2 = parts[j].replace(base, "").strip()
                        if part1 and part2:
                            pair_title = f"{base} {part1} and {part2}"
                            if pair_title not in alternatives:
                                alternatives.append(pair_title)
            
            # 3. –û–¥–∏–Ω–æ—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            for part in parts:
                if part and part != base:
                    # –ï—Å–ª–∏ —á–∞—Å—Ç—å —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∞–∑—É, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
                    if part.startswith(base):
                        if part not in alternatives:
                            alternatives.append(part)
                    else:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Å—Ç—å –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±–∞–∑—ã
                        if not part.startswith(base + " "):
                            full_title = f"{base} {part}"
                            if full_title not in alternatives:
                                alternatives.append(full_title)
        else:
            # –ï—Å–ª–∏ –±–∞–∑—É –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ —á–∞—Å—Ç–∏
            for part in parts:
                if part and part not in alternatives:
                    alternatives.append(part)
    else:
        # –û–±—ã—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ —Å–ª–µ—à–µ–π
        log_message(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {game_title}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        alternatives.append(game_title)
        
        # –†–∏–º—Å–∫–∏–µ/–∞—Ä–∞–±—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        roman_variants = generate_roman_variants(game_title)
        alternatives.extend(roman_variants)
        
        # –ê–º–ø–µ—Ä—Å–∞–Ω–¥ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        ampersand_variants = generate_ampersand_variants(game_title)
        alternatives.extend(ampersand_variants)
        
        # –ë–µ–∑ —Å–∫–æ–±–æ–∫
        no_parens = remove_parentheses(game_title)
        if no_parens and no_parens not in alternatives:
            alternatives.append(no_parens)
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
    unique_alternatives = []
    for alt in alternatives:
        if alt and alt not in unique_alternatives:
            unique_alternatives.append(alt)
    
    log_message(f"üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(unique_alternatives)} –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π")
    return unique_alternatives

def generate_roman_variants(title):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å —Ä–∏–º—Å–∫–∏–º–∏/–∞—Ä–∞–±—Å–∫–∏–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏"""
    variants = []
    import re
    
    # –ò—â–µ–º –∞—Ä–∞–±—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã
    arabic_pattern = r'(\b\d+\b)'
    matches = re.findall(arabic_pattern, title)
    
    for match in matches:
        roman = convert_arabic_to_roman(match)
        if roman != match:
            alt_title = re.sub(r'\b' + match + r'\b', roman, title)
            if alt_title not in variants:
                variants.append(alt_title)
    
    # –ò—â–µ–º —Ä–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã
    roman_pattern = r'\b([IVX]+)\b'
    roman_matches = re.findall(roman_pattern, title)
    
    for match in roman_matches:
        arabic = convert_roman_to_arabic(match)
        if arabic != match:
            alt_title = re.sub(r'\b' + match + r'\b', arabic, title)
            if alt_title not in variants:
                variants.append(alt_title)
    
    return variants

def generate_ampersand_variants(title):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –∞–º–ø–µ—Ä—Å–∞–Ω–¥–æ–º"""
    variants = []
    
    # & -> and
    if "&" in title:
        and_variant = title.replace("&", "and")
        if and_variant not in variants:
            variants.append(and_variant)
    
    # ( & Something) -> & Something (—É–±–∏—Ä–∞–µ–º —Å–∫–æ–±–∫–∏ –≤–æ–∫—Ä—É–≥ &)
    import re
    if "(&" in title:
        no_parens_amp = re.sub(r'\(\s*&\s*([^)]+)\)', r'& \1', title)
        if no_parens_amp and no_parens_amp != title and no_parens_amp not in variants:
            variants.append(no_parens_amp)
    
    # –£–±–∏—Ä–∞–µ–º & —á–∞—Å—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é
    if "&" in title:
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "& Something" –∏–ª–∏ "(& Something)"
        no_ampersand = re.sub(r'\s*\(?&\s*[^)]+\)?', '', title).strip()
        if no_ampersand and no_ampersand != title and no_ampersand not in variants:
            variants.append(no_ampersand)
        
        # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ &, –æ—Å—Ç–∞–≤–ª—è—è —Å–∫–æ–±–∫–∏
        no_amp_only = re.sub(r'\s*&\s*', ' ', title).strip()
        if no_amp_only and no_amp_only != title and no_amp_only not in variants:
            variants.append(no_amp_only)
    
    # –£–ø—Ä–æ—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è (—É–±–∏—Ä–∞–µ–º "the", "of", "and")
    simplified = simplify_title(title)
    if simplified and simplified != title and simplified not in variants:
        variants.append(simplified)
    
    return variants

def remove_parentheses(title):
    """–£–±–∏—Ä–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Å–∫–æ–±–∫–∞—Ö"""
    import re
    no_parens = re.sub(r'\([^)]*\)', '', title).strip()
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    no_parens = re.sub(r'\s+', ' ', no_parens).strip()
    return no_parens if no_parens != title else None

def determine_base_part(parts):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–∞–∑–æ–≤—É—é —á–∞—Å—Ç—å –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π —Å–æ —Å–ª–µ—à–µ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤"""
    if not parts or len(parts) < 2:
        return None
    
    # –ò—â–µ–º –æ–±—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å
    first_part = parts[0]
    if " " not in first_part:
        return None
    
    words = first_part.split()
    if len(words) < 2:
        return None
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –±–∞–∑–æ–≤–æ–π —á–∞—Å—Ç–∏
    for i in range(1, len(words)):
        potential_base = " ".join(words[:i])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–∞ –±–∞–∑–∞ –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö
        base_found = True
        for part in parts[1:]:
            if not part.startswith(potential_base):
                base_found = False
                break
        
        if base_found:
            return potential_base
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ–±—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –±–∞–∑–æ–≤—É—é —á–∞—Å—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É
    # –î–ª—è —Å–ª—É—á–∞–µ–≤ —Ç–∏–ø–∞ "Pok√©mon Red/Blue/Dark" - –±–∞–∑–∞ —ç—Ç–æ "Pok√©mon"
    if len(parts) >= 2:
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –±–∞–∑—É
        first_word = words[0]
        # –î–ª—è —Å–ª—É—á–∞–µ–≤ —Ç–∏–ø–∞ "Pok√©mon Red/Blue/Dark" - –±–∞–∑–∞ —ç—Ç–æ "Pok√©mon"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥—Ä—É–≥–∏–µ —á–∞—Å—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–µ (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
        short_parts = all(len(part.split()) <= 2 for part in parts[1:])
        if short_parts:
            return first_word
    
    return None

def simplify_title(title):
    """–£–ø—Ä–æ—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ, —É–±–∏—Ä–∞—è –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞"""
    import re
    # –£–±–∏—Ä–∞–µ–º "the", "of", "and" –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    simplified = re.sub(r'\b(the|of|and)\b', '', title, flags=re.IGNORECASE)
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    simplified = re.sub(r'\s+', ' ', simplified).strip()
    return simplified if simplified != title else None

def convert_roman_to_arabic(roman):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –≤ –∞—Ä–∞–±—Å–∫–∏–µ"""
    roman_to_arabic = {
        'I': '1', 'II': '2', 'III': '3', 'IV': '4', 'V': '5',
        'VI': '6', 'VII': '7', 'VIII': '8', 'IX': '9', 'X': '10'
    }
    return roman_to_arabic.get(roman, roman)

def jaro_distance(s1, s2):
    """–í—ã—á–∏—Å–ª—è–µ—Ç Jaro-—Å—Ö–æ–∂–µ—Å—Ç—å (–±–∞–∑–æ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞ –¥–ª—è Jaro-Winkler)."""
    if s1 == s2:
        return 1.0
    len1, len2 = len(s1), len(s2)
    if len1 == 0 or len2 == 0:
        return 0.0
    max_dist = (max(len1, len2) // 2) - 1
    match = 0
    hash_s1 = [0] * len1
    hash_s2 = [0] * len2
    # –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –æ–∫–Ω–µ
    for i in range(len1):
        for j in range(max(0, i - max_dist), min(len2, i + max_dist + 1)):
            if s1[i] == s2[j] and hash_s2[j] == 0:
                hash_s1[i] = 1
                hash_s2[j] = 1
                match += 1
                break
    if match == 0:
        return 0.0
    # –ü–æ–¥—Å—á—ë—Ç —Ç—Ä–∞–Ω—Å–ø–æ–∑–∏—Ü–∏–π
    t = 0
    point = 0
    for i in range(len1):
        if hash_s1[i]:
            while hash_s2[point] == 0:
                point += 1
            if s1[i] != s2[point]:
                t += 1
            point += 1
    t //= 2  # –¢—Ä–∞–Ω—Å–ø–æ–∑–∏—Ü–∏–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è –ø–∞—Ä–Ω–æ
    return (match / len1 + match / len2 + (match - t) / match) / 3.0

def jaro_winkler_similarity(s1, s2):
    """Jaro-Winkler: Jaro + –±–æ–Ω—É—Å –∑–∞ –ø—Ä–µ—Ñ–∏–∫—Å (–¥–æ 4 —Å–∏–º–≤–æ–ª–æ–≤)."""
    jaro = jaro_distance(s1, s2)
    if jaro > 0.7:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–∞–∑–æ–≤–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è
        prefix = 0
        min_len = min(len(s1), len(s2))
        for i in range(min_len):
            if s1[i] == s2[i]:
                prefix += 1
            else:
                break
        prefix = min(4, prefix)
        jaro += 0.1 * prefix * (1 - jaro)
    return jaro

def calculate_title_similarity(title1, title2, year1=None, year2=None):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏–≥—Ä –∏—Å–ø–æ–ª—å–∑—É—è Jaro-Winkler —Å —É—á–µ—Ç–æ–º –≥–æ–¥–∞"""
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –≤ –∞—Ä–∞–±—Å–∫–∏–µ)
        normalized1 = normalize_title_for_comparison(title1)
        normalized2 = normalize_title_for_comparison(title2)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Jaro-Winkler –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ö–æ–∂–µ—Å—Ç–∏
        similarity = jaro_winkler_similarity(normalized1.lower(), normalized2.lower())
        
        # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if normalized1.lower() == normalized2.lower():
            similarity = 1.0
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–ª–∏–Ω–µ (–±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Å–∏—Ç –º–µ–Ω—å—à–µ)
        len1, len2 = len(normalized1), len(normalized2)
        if len1 > 0 and len2 > 0:
            length_ratio = min(len1, len2) / max(len1, len2)
            # –ï—Å–ª–∏ –æ–¥–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—á–µ –¥—Ä—É–≥–æ–≥–æ, —Å–Ω–∏–∂–∞–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å
            if length_ratio < 0.7:  # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –¥–ª–∏–Ω–µ –±–æ–ª—å—à–µ 30%
                similarity *= length_ratio
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ —Ä–∞–∑–Ω–∏—Ü—É –≤ –≥–æ–¥–∞—Ö (–µ—Å–ª–∏ –≥–æ–¥—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã)
        if year1 is not None and year2 is not None:
            year_diff = abs(year1 - year2)
            if year_diff == 0:
                year_penalty = 0  # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≥–æ–¥–∞
            elif year_diff <= 1:
                year_penalty = 0.01  # –†–∞–∑–Ω–∏—Ü–∞ –≤ 1 –≥–æ–¥
            elif year_diff <= 2:
                year_penalty = 0.05  # –†–∞–∑–Ω–∏—Ü–∞ –≤ 2 –≥–æ–¥–∞
            elif year_diff <= 5:
                year_penalty = 0.1   # –†–∞–∑–Ω–∏—Ü–∞ –≤ 3-5 –ª–µ—Ç
            else:
                year_penalty = 0.2   # –ë–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –≥–æ–¥–∞—Ö
            
            similarity -= year_penalty
        
        return max(0.0, similarity)  # –ù–µ –¥–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ö–æ–∂–µ—Å—Ç–∏: {e}")
        return 0.0
        
def extract_release_year_from_page(page):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–æ–¥ —Ä–µ–ª–∏–∑–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä—ã HLTB"""
    try:
        # –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –≥–æ–¥–æ–≤
        if not hasattr(extract_release_year_from_page, 'year_cache'):
            extract_release_year_from_page.year_cache = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        page_url = page.url
        if page_url in extract_release_year_from_page.year_cache:
            return extract_release_year_from_page.year_cache[page_url]
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –≥–æ–¥ –∏–∑ JSON –¥–∞–Ω–Ω—ã—Ö
        try:
            # –ò—â–µ–º JSON –¥–∞–Ω–Ω—ã–µ –≤ script —Ç–µ–≥–µ
            json_script = page.locator('script#__NEXT_DATA__').first
            if json_script.count() > 0:
                json_text = json_script.text_content()
                import json
                data = json.loads(json_text)
                
                # –ò—â–µ–º –≥–æ–¥ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö
                games = data.get('props', {}).get('pageProps', {}).get('game', {}).get('data', {}).get('game', [])
                if games:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞
                    game_data = games[0]
                    
                    # –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–ª—è —Å –¥–∞—Ç–æ–π
                    year_fields = ['game_name_date', 'release_date', 'date', 'year']
                    for field in year_fields:
                        if field in game_data and game_data[field]:
                            year = game_data[field]
                            if isinstance(year, (int, str)) and str(year).isdigit():
                                year_int = int(year)
                                if 1950 <= year_int <= 2030:  # –†–∞–∑—É–º–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤
                                    extract_release_year_from_page.year_cache[page_url] = year_int
                                    return year_int
        except Exception as e:
            log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–æ–¥–∞ –∏–∑ JSON: {e}")
        
        # –ï—Å–ª–∏ JSON –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—â–µ–º –≤ HTML —Ç–µ–∫—Å—Ç–µ
        try:
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "NA: September 24th, 1997" –∏–ª–∏ "2016"
            page_text = page.content()
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –¥–∞—Ç —Ç–∏–ø–∞ "September 24th, 1997"
            date_pattern = r'(?:January|February|March|April|May|June|July|August|September|October|November|December)\s+\d{1,2}(?:st|nd|rd|th)?,\s+(\d{4})'
            matches = re.findall(date_pattern, page_text, re.IGNORECASE)
            if matches:
                years = [int(year) for year in matches if 1950 <= int(year) <= 2030]
                if years:
                    # –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π –≥–æ–¥
                    earliest_year = min(years)
                    extract_release_year_from_page.year_cache[page_url] = earliest_year
                    return earliest_year
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –≥–æ–¥–æ–≤
            year_pattern = r'\b(19\d{2}|20\d{2})\b'
            matches = re.findall(year_pattern, page_text)
            if matches:
                years = [int(match) for match in matches if 1950 <= int(match) <= 2030]
                if years:
                    # –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π –≥–æ–¥
                    earliest_year = min(years)
                    extract_release_year_from_page.year_cache[page_url] = earliest_year
                    return earliest_year
        except Exception as e:
            log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–æ–¥–∞ –∏–∑ HTML: {e}")
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        extract_release_year_from_page.year_cache[page_url] = None
        return None
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–æ–¥–∞ —Ä–µ–ª–∏–∑–∞: {e}")
        return None

def normalize_title_for_comparison(title):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—è —Ä–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –≤ –∞—Ä–∞–±—Å–∫–∏–µ"""
    try:
        import re
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ä–∏–º—Å–∫–∏—Ö —Ü–∏—Ñ—Ä –≤ –∞—Ä–∞–±—Å–∫–∏–µ
        roman_to_arabic = {
            'I': '1', 'II': '2', 'III': '3', 'IV': '4', 'V': '5',
            'VI': '6', 'VII': '7', 'VIII': '8', 'IX': '9', 'X': '10'
        }
        
        # –ó–∞–º–µ–Ω—è–µ–º —Ä–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –Ω–∞ –∞—Ä–∞–±—Å–∫–∏–µ
        normalized = title
        for roman, arabic in roman_to_arabic.items():
            # –ò—â–µ–º —Ä–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
            pattern = r'\b' + roman + r'\b'
            normalized = re.sub(pattern, arabic, normalized)
        
        return normalized
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
        return title

def extract_hltb_data_from_page(page):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ HLTB —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä—ã"""
    try:
        hltb_data = {}
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≤–µ—Ä—Ö–Ω–∏—Ö –±–ª–æ–∫–∞—Ö (Single, Co-Op, Vs.)
        top_block_data = extract_top_block_data(page)
        if top_block_data:
            hltb_data.update(top_block_data)
            log_message(f"üìä –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ –≤–µ—Ä—Ö–Ω–∏—Ö –±–ª–æ–∫–∞—Ö: {list(top_block_data.keys())}")
        
        # –ó–∞—Ç–µ–º –∏—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
        table_data = extract_table_data(page)
        if table_data:
            hltb_data.update(table_data)
            log_message(f"üìä –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö: {list(table_data.keys())}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–∏–µ –±–ª–æ–∫–∏ (–±–µ–∑ —Ç–∞–±–ª–∏—Ü —Å ms/mpe/comp), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö
        if top_block_data and not table_data:
            log_message("üéÆ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∏–≥—Ä–∞ —Ç–æ–ª—å–∫–æ —Å –≤–µ—Ä—Ö–Ω–∏–º–∏ –±–ª–æ–∫–∞–º–∏ (–±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü)")
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ—Ä—Ö–Ω–∏—Ö –±–ª–æ–∫–æ–≤
        elif top_block_data and table_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö –¥–∞–Ω–Ω—ã–µ –æ single player (ms/mpe/comp)
            has_single_player_data = any(key in table_data for key in ["ms", "mpe", "comp"])
            if not has_single_player_data:
                log_message("üéÆ –í —Ç–∞–±–ª–∏—Ü–∞—Ö –Ω–µ—Ç single player –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–∏–µ –±–ª–æ–∫–∏")
                # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–∏–µ –±–ª–æ–∫–∏
                hltb_data = top_block_data.copy()
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã
        store_links = extract_store_links(page)
        if store_links:
            hltb_data["stores"] = store_links
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if hltb_data:
            categories = []
            for key, value in hltb_data.items():
                if key != "stores" and isinstance(value, dict) and "t" in value:
                    categories.append(f"{key}: {value['t']}")
            if categories:
                log_message(f"üìä –ò—Ç–æ–≥–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(categories)}")
        
        return hltb_data if hltb_data else None
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return None

def extract_top_block_data(page):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ—Ä—Ö–Ω–∏—Ö –±–ª–æ–∫–æ–≤ (Single, Co-Op, Vs.)"""
    try:
        top_data = {}
        
        # –ò—â–µ–º –±–ª–æ–∫ —Å –∏–≥—Ä–æ–≤—ã–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–º–∏
        game_stats = page.locator('.GameStats_game_times__KHrRY')
        if game_stats.count() == 0:
            log_message("‚ùå –ë–ª–æ–∫ GameStats –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
        stats_items = game_stats.locator('li')
        item_count = stats_items.count()
        
        log_message(f"üìä –ù–∞–π–¥–µ–Ω–æ {item_count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        
        for i in range(item_count):
            try:
                item = stats_items.nth(i)
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (h4) –∏ –≤—Ä–µ–º—è (h5)
                category_element = item.locator('h4')
                time_element = item.locator('h5')
                
                if category_element.count() > 0 and time_element.count() > 0:
                    category = category_element.inner_text().strip()
                    time_text = time_element.inner_text().strip()
                    
                    log_message(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: '{category}', –í—Ä–µ–º—è: '{time_text}'")
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    if time_text == "--" or not time_text or "Hours" not in time_text:
                        log_message(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {category}")
                        continue
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    if category == "Co-Op":
                        coop_data = extract_time_from_h5(time_text)
                        if coop_data and "coop" not in top_data:
                            top_data["coop"] = coop_data
                            log_message(f"üéØ –ù–∞–π–¥–µ–Ω—ã Co-Op –¥–∞–Ω–Ω—ã–µ: {coop_data}")
                    elif category == "Vs.":
                        vs_data = extract_time_from_h5(time_text)
                        if vs_data and "vs" not in top_data:
                            top_data["vs"] = vs_data
                            log_message(f"üéØ –ù–∞–π–¥–µ–Ω—ã Vs. –¥–∞–Ω–Ω—ã–µ: {vs_data}")
                    elif category in ["Single-Player", "Single Player"]:
                        single_data = extract_time_from_h5(time_text)
                        if single_data and "ms" not in top_data:
                            top_data["ms"] = single_data
                            log_message(f"üéØ –ù–∞–π–¥–µ–Ω—ã Single –¥–∞–Ω–Ω—ã–µ: {single_data}")
                            
            except Exception as e:
                log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {i}: {e}")
                continue
        
        return top_data if top_data else None
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ—Ä—Ö–Ω–∏—Ö –±–ª–æ–∫–æ–≤: {e}")
        return None

def extract_time_from_h5(time_text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ h5 —ç–ª–µ–º–µ–Ω—Ç–∞"""
    try:
        import re
        
        log_message(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è: '{time_text}'")
        
        # –ò—â–µ–º —á–∏—Å–ª–æ –∏ "Hours"
        time_match = re.search(r'(\d+(?:\.\d+)?)\s*Hours?', time_text)
        if time_match:
            hours = float(time_match.group(1))
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            if hours >= 1:
                if hours == int(hours):
                    formatted_time = f"{int(hours)}h"
                else:
                    formatted_time = f"{hours:.1f}h"
            else:
                formatted_time = f"{int(hours * 60)}m"
            
            log_message(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –≤—Ä–µ–º—è: {formatted_time}")
            return {"t": formatted_time}
        
        # –ò—â–µ–º —á–∏—Å–ª–æ –∏ "Minutes" –∏–ª–∏ "Mins" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "m"
        time_match = re.search(r'(\d+(?:\.\d+)?)\s*(?:Minutes?|Mins?|m)\b', time_text)
        if time_match:
            minutes = float(time_match.group(1))
            formatted_time = f"{int(minutes)}m"
            
            log_message(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –≤—Ä–µ–º—è: {formatted_time}")
            return {"t": formatted_time}
        
        # –ò—â–µ–º —á–∏—Å–ª–æ –∏ "h" (—á–∞—Å—ã)
        time_match = re.search(r'(\d+(?:\.\d+)?)\s*h\b', time_text)
        if time_match:
            hours = float(time_match.group(1))
            if hours == int(hours):
                formatted_time = f"{int(hours)}h"
            else:
                formatted_time = f"{hours:.1f}h"
            
            log_message(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –≤—Ä–µ–º—è: {formatted_time}")
            return {"t": formatted_time}
        
        log_message("‚ùå –í—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return None
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return None

def extract_table_data(page):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü"""
    try:
        table_data = {}
        
        # –ò—â–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        tables = page.locator("table")
        table_count = tables.count()
        
        for table_idx in range(table_count):
            try:
                table = tables.nth(table_idx)
                table_text = table.inner_text()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω—É–∂–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                if any(keyword in table_text for keyword in ["Main Story", "Main + Extras", "Completionist", "Co-Op", "Competitive", "Vs."]):
                    log_message(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É {table_idx + 1}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                    rows = table.locator("tr")
                    row_count = rows.count()
                    
                    for row_idx in range(row_count):
                        try:
                            row_text = rows.nth(row_idx).inner_text().strip()
                            
                            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)
                            if "Main Story" in row_text and "ms" not in table_data:
                                table_data["ms"] = extract_hltb_row_data(row_text)
                            elif "Main + Extras" in row_text and "mpe" not in table_data:
                                table_data["mpe"] = extract_hltb_row_data(row_text)
                            elif "Completionist" in row_text and "comp" not in table_data:
                                table_data["comp"] = extract_hltb_row_data(row_text)
                            elif "Co-Op" in row_text and "coop" not in table_data:
                                table_data["coop"] = extract_hltb_row_data(row_text)
                            elif "Competitive" in row_text and "vs" not in table_data:
                                table_data["vs"] = extract_hltb_row_data(row_text)
                                
                        except Exception as e:
                            log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {row_idx}: {e}")
                            continue
                            
            except Exception as e:
                log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table_idx}: {e}")
                continue
        
        return table_data if table_data else None
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü: {e}")
        return None

def extract_store_links(page):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä—ã"""
    try:
        store_links = {}
        
        # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã
        store_selectors = {
            "steam": "a[href*='store.steampowered.com']",
            "epic": "a[href*='epicgames.com']",
            "gog": "a[href*='gog.com']",
            "humble": "a[href*='humblebundle.com']",
            "itch": "a[href*='itch.io']",
            "origin": "a[href*='origin.com']",
            "uplay": "a[href*='uplay.com']",
            "battlenet": "a[href*='battle.net']",
            "psn": "a[href*='playstation.com']",
            "xbox": "a[href*='xbox.com']",
            "nintendo": "a[href*='nintendo.com']"
        }
        
        for store_name, selector in store_selectors.items():
            try:
                link_element = page.locator(selector).first
                if link_element.count() > 0:
                    href = link_element.get_attribute("href")
                    if href:
                        # –û—á–∏—â–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è GOG
                        if store_name == "gog" and "adtraction.com" in href:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π
                            import re
                            match = re.search(r'url=([^&]+)', href)
                            if match:
                                href = match.group(1)
                                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL
                                from urllib.parse import unquote
                                href = unquote(href)
                        
                        store_links[store_name] = href
            except:
                continue
        
        if store_links:
            log_message(f"üõí –ù–∞–π–¥–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã: {list(store_links.keys())}")
        
        return store_links if store_links else None
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã: {e}")
        return None

def extract_hltb_row_data(row_text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã HLTB (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)"""
    try:
        import re
        
        # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º K —Ñ–æ—Ä–º–∞—Ç –∏ —Ç–∞–±—ã)
        # –ü—Ä–∏–º–µ—Ä—ã: "Main Story 54 660h 37m" -> 54, "Main Story	1.7K	15h 31m" -> 1700
        polled_match = re.search(r'^[A-Za-z\s/\+]+\s+(\d+(?:\.\d+)?[Kk]?)\s+', row_text)
        if not polled_match:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Å —Ç–∞–±–∞–º–∏: "Main Story	1.7K	15h 31m"
            polled_match = re.search(r'^[A-Za-z\s/\+]+\t+(\d+(?:\.\d+)?[Kk]?)\t+', row_text)
        if not polled_match:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫: —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
            polled_match = re.search(r'(\d+(?:\.\d+)?[Kk]?)\s+(?:\d+h|\d+\s*Hours?)', row_text)
        
        polled = None
        if polled_match:
            polled_str = polled_match.group(1)
            if 'K' in polled_str.upper():
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º K –≤ —Ç—ã—Å—è—á–∏
                number = float(polled_str.replace('K', '').replace('k', ''))
                polled = int(number * 1000)
            else:
                polled = int(float(polled_str))
        
        # –ò—â–µ–º –≤—Ä–µ–º–µ–Ω–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        times = []
        
        # –£–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –∏–∑ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏
        # –ü—Ä–∏–º–µ—Ä: "Main Story 707 5h 7m 5h 2h 45m 9h 1m" -> "5h 7m 5h 2h 45m 9h 1m"
        # –ò–ª–∏: "Main Story	1.7K	15h 31m	15h	11h 37m	25h 37m" -> "15h 31m	15h	11h 37m	25h 37m"
        time_part = re.sub(r'^[A-Za-z\s/\+]+\s+\d+(?:\.\d+)?[Kk]?\s+', '', row_text)
        if time_part == row_text:  # –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º —Å —Ç–∞–±–∞–º–∏
            time_part = re.sub(r'^[A-Za-z\s/\+]+\t+\d+(?:\.\d+)?[Kk]?\t+', '', row_text)
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º–µ–Ω–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ: Average, Median, Rushed, Leisure
        # –§–æ—Ä–º–∞—Ç: "5h 7m 5h 2h 45m 9h 1m"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –∏—â–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–∞–±—ã –∏ –ø—Ä–æ–±–µ–ª—ã)
        combined_pattern = r'(\d+h\s*\d+m|\d+(?:\.\d+)?[¬Ω]?\s*Hours?|\d+h)'
        
        # –ò—â–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ
        matches = re.findall(combined_pattern, time_part)
        for match in matches:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ç–∞–±—ã
            clean_match = re.sub(r'\s+', ' ', match.strip())
            times.append(clean_match)
        
        if len(times) < 1:
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç—Ä–æ–∫–∏
        is_single_player = any(keyword in row_text for keyword in ["Main Story", "Main + Extras", "Completionist"])
        is_multi_player = any(keyword in row_text for keyword in ["Co-Op", "Competitive"])
        
        result = {}
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–∞ –≤—Ä–µ–º–µ–Ω–∏ (Average –∏ Median)
        average_time = times[0] if len(times) > 0 else None
        median_time = times[1] if len(times) > 1 else None
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –º–µ–∂–¥—É Average –∏ Median
        final_time = calculate_average_time(average_time, median_time)
        result["t"] = round_time(final_time) if final_time else None
        
        if polled:
            result["p"] = polled
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if is_single_player and len(times) >= 4:
            # Single-Player: Average, Median, Rushed, Leisure
            result["r"] = round_time(times[2])  # Rushed (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–æ)
            result["l"] = round_time(times[3])  # Leisure (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–æ)
            
        elif is_multi_player and len(times) >= 4:
            # Multi-Player: Average, Median, Least, Most
            result["min"] = round_time(times[2])  # Least (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–æ)
            result["max"] = round_time(times[3])  # Most (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–æ)
            
        return result
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏: {e}")
        return None

def calculate_average_time(time1_str, time2_str):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –¥–≤—É–º—è –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
    try:
        def parse_time_to_minutes(time_str):
            if not time_str:
                return 0
            
            # –£–±–∏—Ä–∞–µ–º "Hours" –µ—Å–ª–∏ –µ—Å—Ç—å
            time_str = time_str.replace("Hours", "").strip()
            
            total_minutes = 0
            
            # –ü–∞—Ä—Å–∏–º —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
            if "h" in time_str and "m" in time_str:
                # –§–æ—Ä–º–∞—Ç "660h 37m"
                import re
                hours_match = re.search(r'(\d+)h', time_str)
                minutes_match = re.search(r'(\d+)m', time_str)
                
                if hours_match:
                    total_minutes += int(hours_match.group(1)) * 60
                if minutes_match:
                    total_minutes += int(minutes_match.group(1))
                    
            elif "h" in time_str:
                # –¢–æ–ª—å–∫–æ —á–∞—Å—ã "660h"
                import re
                hours_match = re.search(r'(\d+)h', time_str)
                if hours_match:
                    total_minutes = int(hours_match.group(1)) * 60
                    
            elif time_str.replace(".", "").isdigit():
                # –¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ (—á–∞—Å—ã)
                total_minutes = float(time_str) * 60
                
            return total_minutes
        
        minutes1 = parse_time_to_minutes(time1_str)
        minutes2 = parse_time_to_minutes(time2_str)
        
        if minutes1 == 0 and minutes2 == 0:
            # –ï—Å–ª–∏ –æ–±–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–≤–Ω—ã 0, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ, –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
            return round_time(time1_str or time2_str) if (time1_str or time2_str) else None
        
        if minutes2 == 0:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ, –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
            return round_time(time1_str) if time1_str else None
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ
        avg_minutes = (minutes1 + minutes2) / 2
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∞—Å—ã
        hours = avg_minutes / 60
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ
        if hours >= 1:
            if hours == int(hours):
                return f"{int(hours)}h"
            else:
                return f"{hours:.1f}h"
        else:
            return f"{int(avg_minutes)}m"
            
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return time1_str or time2_str


def determine_error_type(page, game_title):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä—ã"""
    try:
        page_content = page.content().lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É IP
        if "blocked" in page_content or "access denied" in page_content:
            return "IP –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ Cloudflare
        if "cloudflare" in page_content and "checking your browser" in page_content:
            return "Cloudflare –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–∞–π–º–∞—É—Ç
        if "timeout" in page_content or "timed out" in page_content:
            return "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É —Å–µ—Ç–∏
        if "network error" in page_content or "connection error" in page_content:
            return "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        search_results = page.locator('a[href^="/game/"]')
        if search_results.count() == 0:
            return "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–æ–∏—Å–∫–µ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–≥—Ä—ã
        tables = page.locator("table")
        if tables.count() == 0:
            return "–ù–µ—Ç —Ç–∞–±–ª–∏—Ü —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏: {e}")
        return "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"

def extract_time_and_polled_from_row(row_text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        # –ò—â–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "Xh Ym"
        time_match = re.search(r'(\d+h\s*\d*m)', row_text)
        if time_match:
            time_str = time_match.group(1)
            rounded_time = round_time(time_str)
            
            # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ - –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–æ–∏—Å–∫
            polled_count = None
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –ò—â–µ–º —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ "Polled"
            polled_match = re.search(r'(\d+(?:\.\d+)?[Kk]?)\s*(?:Polled|polled)', row_text, re.IGNORECASE)
            if polled_match:
                polled_str = polled_match.group(1)
                polled_count = parse_polled_number(polled_str)
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –ò—â–µ–º —á–∏—Å–ª–æ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (—á–∞—Å—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º)
            if not polled_count:
                first_number_match = re.search(r'^(\d+(?:\.\d+)?[Kk]?)', row_text.strip())
                if first_number_match:
                    polled_str = first_number_match.group(1)
                    polled_count = parse_polled_number(polled_str)
            
            # –í–∞—Ä–∏–∞–Ω—Ç 3: –ò—â–µ–º –ª—é–±–æ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–µ (–µ—Å–ª–∏ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏)
            if not polled_count:
                any_number_match = re.search(r'(\d+(?:\.\d+)?[Kk]?)', row_text)
                if any_number_match:
                    polled_str = any_number_match.group(1)
                    polled_count = parse_polled_number(polled_str)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
            result = {"t": rounded_time}
            if polled_count:
                result["p"] = polled_count
            
            return result
        return None
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏: {e}")
        return None

def parse_polled_number(polled_str):
    """–ü–∞—Ä—Å–∏—Ç —á–∏—Å–ª–æ –≥–æ–ª–æ—Å–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    try:
        if 'K' in polled_str.upper():
            return int(float(polled_str.upper().replace('K', '')) * 1000)
        else:
            return int(float(polled_str))
    except:
        return None

def extract_time_from_row(row_text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    try:
        # –ò—â–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "Xh Ym"
        time_match = re.search(r'(\d+h\s*\d*m)', row_text)
        if time_match:
            time_str = time_match.group(1)
            return round_time(time_str)
        return None
    except:
        return None


def save_results(games_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    try:
        with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
            for i, game in enumerate(games_data):
                # –ö–∞–∂–¥–∞—è –∏–≥—Ä–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –±–µ–∑ –æ—Ç—Å—Ç—É–ø–æ–≤
                if i > 0:
                    f.write("\n")
                json.dump(game, f, separators=(',', ':'), ensure_ascii=False)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        categories, total_polled, na_count = count_hltb_data(games_data)
        successful = len([g for g in games_data if "hltb" in g])
        
        log_message(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {OUTPUT_FILE}")
        log_message(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {successful}/{len(games_data)} –∏–≥—Ä —Å –¥–∞–Ω–Ω—ã–º–∏ HLTB")
        log_message(f"üìä Main Story: {categories['ms']} ({total_polled['ms']} –≥–æ–ª–æ—Å–æ–≤), Main+Extras: {categories['mpe']} ({total_polled['mpe']} –≥–æ–ª–æ—Å–æ–≤)")
        log_message(f"üìä Completionist: {categories['comp']} ({total_polled['comp']} –≥–æ–ª–æ—Å–æ–≤)")
        log_message(f"üìä Co-Op: {categories['coop']} ({total_polled['coop']} –≥–æ–ª–æ—Å–æ–≤), Vs: {categories['vs']} ({total_polled['vs']} –≥–æ–ª–æ—Å–æ–≤)")
        log_message(f"üìä N/A (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ): {na_count} –∏–≥—Ä")
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        raise

def log_progress(current, total, start_time):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    elapsed = time.time() - start_time
    rate = current / elapsed * 60 if elapsed > 0 else 0  # –∏–≥—Ä –≤ –º–∏–Ω—É—Ç—É
    eta = (total - current) / rate if rate > 0 else 0  # –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    
    log_message(f"üìä {current}/{total} | {rate:.1f} –∏–≥—Ä/–º–∏–Ω | ETA: {eta:.0f} –º–∏–Ω")

def update_html_with_hltb(html_file, hltb_data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç HTML —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ HLTB –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º HTML
        with open(html_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º gamesList
        start = content.find('const gamesList = [')
        if start == -1:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω const gamesList –≤ HTML —Ñ–∞–π–ª–µ")
        
        end = content.find('];', start) + 2
        if end == 1:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ gamesList")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π JSON —Å HLTB –¥–∞–Ω–Ω—ã–º–∏ (–≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É)
        new_games_list = json.dumps(hltb_data, separators=(',', ':'), ensure_ascii=False)
        new_content = content[:start] + f'const gamesList = {new_games_list}' + content[end:]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π HTML
        with open(html_file, 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        log_message(f"‚úÖ HTML —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {html_file}")
        return True
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è HTML: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞"""
    print("üîß –§—É–Ω–∫—Ü–∏—è main() –≤—ã–∑–≤–∞–Ω–∞")
    log_message("üöÄ –ó–∞–ø—É—Å–∫ HLTB Worker")
    log_message(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    log_message(f"üìÑ –ò—â–µ–º —Ñ–∞–π–ª: {GAMES_LIST_FILE}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(GAMES_LIST_FILE):
        log_message(f"‚ùå –§–∞–π–ª {GAMES_LIST_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    log_message(f"‚úÖ –§–∞–π–ª {GAMES_LIST_FILE} –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(GAMES_LIST_FILE)} –±–∞–π—Ç")
    
    setup_directories()
    log_message("üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    try:
        log_message("üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä...")
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä
        games_list = extract_games_list(GAMES_LIST_FILE)
        total_games = len(games_list)
        log_message(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {total_games} –∏–≥—Ä")
        
        start_index = 0
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        log_message("üåê –ó–∞–ø—É—Å–∫–∞–µ–º Playwright...")
        with sync_playwright() as p:
            log_message("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Chromium...")
            browser = p.chromium.launch(headless=True)
            log_message("‚úÖ Chromium –∑–∞–ø—É—â–µ–Ω")
            
            log_message("üîß –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞...")
            context = browser.new_context(
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0 Safari/537.36",
                viewport={"width": 1280, "height": 800},
                locale="en-US"
            )
            log_message("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω")
            
            log_message("üìÑ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
            page = context.new_page()
            log_message("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–π –±–∞–Ω IP
            log_message("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å HowLongToBeat.com...")
            try:
                page.goto(BASE_URL, timeout=15000)
                page.wait_for_load_state("domcontentloaded", timeout=10000)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                title = page.title()
                log_message(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {title}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                search_box = page.locator('input[type="search"], input[name="q"]')
                if search_box.count() > 0:
                    log_message("‚úÖ –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ - —Å–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    log_message("‚ö†Ô∏è –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                page_content = page.content()
                if "blocked" in page_content.lower() or "access denied" in page_content.lower():
                    log_message("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ë–õ–û–ö–ò–†–û–í–ö–ê IP! –°–∞–π—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –¥–æ—Å—Ç—É–ø")
                    return
                elif "cloudflare" in page_content.lower() and "checking your browser" in page_content.lower():
                    log_message("‚ö†Ô∏è Cloudflare –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ - –∂–¥–µ–º...")
                    time.sleep(5)
                    page_content = page.content()
                    if "checking your browser" in page_content.lower():
                        log_message("‚ùå Cloudflare –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø")
                        return
                
                log_message("‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–≥—Ä")
                
            except Exception as e:
                log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞: {e}")
                log_message("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã...")
            
            start_time = time.time()
            processed_count = 0
            blocked_count = 0  # –°—á–µ—Ç—á–∏–∫ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–≥—Ä—ã
            for i in range(0, total_games):
                game = games_list[i]
                game_title = game["title"]
                game_year = game.get("year")  # –ü–æ–ª—É—á–∞–µ–º –≥–æ–¥ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
                
                log_message(f"üéÆ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {i+1}/{total_games}: {game_title} ({game_year})")
                
                # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ HLTB
                hltb_data = search_game_on_hltb(page, game_title, game_year)
                
                if hltb_data:
                    game["hltb"] = hltb_data
                    processed_count += 1
                    blocked_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                    log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {hltb_data}")
                else:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
                    error_type = determine_error_type(page, game_title)
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º N/A –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                    game["hltb"] = {"ms": "N/A", "mpe": "N/A", "comp": "N/A"}
                    log_message(f"‚ö†Ô∏è  {error_type} –¥–ª—è: {game_title} - –∑–∞–ø–∏—Å–∞–Ω–æ N/A")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    if error_type == "IP –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞":
                        blocked_count += 1
                        log_message(f"üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ #{blocked_count}")
                        
                        # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø–æ–¥—Ä—è–¥ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                        if blocked_count >= 3:
                            log_message("üí• –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø–æ–¥—Ä—è–¥! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É.")
                            log_message("üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ.")
                            break
                
                # –í–µ–∂–ª–∏–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —É–±—Ä–∞–Ω–∞ - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–¥–µ—Ä–∂–µ–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∏—Å–∫–∞
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ä—ã–≤
                start_time = check_break_time(start_time, i + 1)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –∏–≥—Ä
                if (i + 1) % 50 == 0:
                    log_progress(i + 1, total_games, start_time)
            
            browser.close()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        save_results(games_list)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        successful = len([g for g in games_list if "hltb" in g])
        log_message(f"üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {successful}/{total_games} –∏–≥—Ä ({successful/total_games*100:.1f}%)")
        
        # HTML —Ñ–∞–π–ª –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è - —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON
        log_message("üìÑ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSON —Ñ–∞–π–ª, HTML –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è")
        
    except Exception as e:
        log_message(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    print("üéØ –ó–∞–ø—É—Å–∫–∞–µ–º main()...")
    try:
        main()
        print("‚úÖ main() –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}")
        import traceback
        traceback.print_exc()
        raise
