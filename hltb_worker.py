#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
HLTB Worker (—É—Å—Ç–æ–π—á–∏–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
–ê–≤—Ç–æ—Ä: (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –æ—Ç–ª–∞–¥–∫–∞) ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫
–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
 - –≤–∑—è—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä (index111.html)
 - –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã –∏—Å–∫–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª –Ω–∞ howlongtobeat.com
 - —Å–æ–±—Ä–∞—Ç—å –≤—Ä–µ–º–µ–Ω–∞ (ms, mpe, comp, all, coop, vs)
 - —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ hltb_data/hltb_data.json
 - –ø—Ä–∏ DEBUG: —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–º–ø—ã –≤ debug_dumps/
"""
import os
import re
import json
import time
import random
import ast
import shutil
import traceback
from datetime import datetime
from urllib.parse import quote
from difflib import SequenceMatcher

# Playwright import + helpful error if dependency missing
try:
    from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeoutError
except Exception as e:
    print("‚ùó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ playwright. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (playwright, pyee).")
    print("  –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: pip install playwright pyee && playwright install chromium")
    raise

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BASE_URL = "https://howlongtobeat.com"
GAMES_LIST_FILE = "index111.html"
OUTPUT_DIR = "hltb_data"
OUTPUT_FILE = os.path.join(OUTPUT_DIR, "hltb_data.json")
DEBUG_DIR = "debug_dumps"
DEBUG = True  # –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –¥–∞–º–ø—ã
COMMIT_RESULTS = False  # –µ—Å–ª–∏ True ‚Äî —Å–∫—Ä–∏–ø—Ç –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å (—Ç—Ä–µ–±—É–µ—Ç git-credentials –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏)
MAX_ATTEMPTS_PER_VARIANT = 3
WAIT_SELECTOR_TIMEOUT_MS = 5000  # –ø–µ—Ä–≤—ã–π wait_for_selector
FINAL_PAGE_TIMEOUT_MS = 20000
MIN_SLEEP = 0.4
MAX_SLEEP = 0.9

# characters not allowed in artifact uploads (Windows/NTFS), plus other odd ones
INVALID_FILENAME_CHARS = r'["<>:\\|?*\r\n]'

# --- –£—Ç–∏–ª–∏—Ç—ã ---
def now_ts():
    return int(time.time())

def ts_str():
    return datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")

def sanitize_filename(s: str) -> str:
    """–£–±–∏—Ä–∞–µ—Ç –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤, –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã ‚Äî –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ–º."""
    s = re.sub(INVALID_FILENAME_CHARS, "_", s)
    s = s.replace(" ", "_")
    # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É
    return s[:200]

def ensure_dirs():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    if DEBUG:
        os.makedirs(DEBUG_DIR, exist_ok=True)

def write_json_safe(path, data):
    tmp = path + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    os.replace(tmp, path)

def read_file_text(path):
    with open(path, "r", encoding="utf-8") as f:
        return f.read()

def normalized_title(s: str) -> str:
    s = s.lower()
    s = re.sub(r'[^0-9a-z–∞-—è—ë\s]', ' ', s)  # keep letters and numbers, remove punctuation
    s = re.sub(r'\s+', ' ', s).strip()
    return s

def similarity(a: str, b: str) -> float:
    """SequenceMatcher ratio on normalized strings."""
    return SequenceMatcher(None, normalized_title(a), normalized_title(b)).ratio()

# --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä –∏–∑ index111.html ---
def extract_games_list(html_file: str):
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å –º–∞—Å—Å–∏–≤ gamesList –∏–∑ HTML (var/const gamesList = [...]).
    –ï—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è, –ø—ã—Ç–∞–µ—Ç—Å—è –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ (–ø–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ –≤–∏–¥–∞ Title (YEAR) –∏–ª–∏ –∫–∞—Ä—Ç–æ—á–µ–∫).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π {'title':..., 'year':... (int or None)}
    """
    content = read_file_text(html_file)
    # 1) –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ JS-—Å—Ç—Ä—É–∫—Ç—É—Ä—É: const gamesList = [...]
    m = re.search(r'const\s+gamesList\s*=\s*(\[[\s\S]*?\]);', content, flags=re.MULTILINE)
    if m:
        raw = m.group(1)
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–ª—è ast.literal_eval: –∑–∞–º–µ–Ω–∏–º JS null/true/false –Ω–∞ Python
        raw_py = raw.replace('null', 'None').replace('true', 'True').replace('false', 'False')
        # –£–±–µ—Ä—ë–º –≤–æ–∑–º–æ–∂–Ω–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è `` –∫—Ä–æ—à–µ—á–Ω—ã–µ JS-—Ñ—É–Ω–∫—Ü–∏–∏ (—Ä–µ–¥–∫–æ), –Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
        try:
            parsed = ast.literal_eval(raw_py)
            # –æ–∂–∏–¥–∞–µ–º —Å–ø–∏—Å–æ–∫, –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –ª–∏–±–æ —Å—Ç—Ä–æ–∫–∞, –ª–∏–±–æ dict —Å 'title'/'year'
            games = []
            for item in parsed:
                if isinstance(item, str):
                    # –ø—ã—Ç–∞—Ç—å—Å—è –∏–∑–≤–ª–µ—á—å –≥–æ–¥
                    m2 = re.match(r'^(.*?)(?:\s*\((\d{4})\))?$', item.strip())
                    title = m2.group(1).strip()
                    year = int(m2.group(2)) if m2.group(2) else None
                    games.append({"title": title, "year": year})
                elif isinstance(item, dict):
                    title = item.get("title") or item.get("name") or ""
                    year = item.get("year", None)
                    try:
                        year = int(year) if year else None
                    except:
                        year = None
                    games.append({"title": title, "year": year})
            if games:
                print(f"üìÑ Parsed gamesList from JS: {len(games)} items.")
                return games
        except Exception as e:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å gamesList —á–µ—Ä–µ–∑ ast.literal_eval:", e)
            # fall through to heuristics

    # 2) –ù–∞–π—Ç–∏ –≤—Å–µ appearance "Title (YYYY)" –≤ —Ç–µ–∫—Å—Ç–µ ‚Äî —ç–≤—Ä–∏—Å—Ç–∏–∫–∞
    matches = re.findall(r'>([^<>]+?)\s*\((\d{4})\)\s*<', content)
    games = []
    for title, year in matches:
        games.append({"title": title.strip(), "year": int(year)})
    if games:
        print(f"üìÑ Heuristic found {len(games)} title(year) matches.")
        return games

    # 3) –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫/–∫–∞—Ä—Ç–æ—á–µ–∫ —Å –∫–ª–∞—Å—Å–∞–º–∏ (–æ–±—â–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
    titles = re.findall(r'<a[^>]+href=["\'][^"\']*?game[^"\']*["\'][^>]*>([^<]{2,200}?)</a>', content)
    uniq = []
    for t in titles:
        t_clean = re.sub(r'\s+', ' ', t).strip()
        if t_clean not in uniq:
            uniq.append(t_clean)
    if uniq:
        print(f"üìÑ Fallback link-title extraction found {len(uniq)} items.")
        out = []
        for t in uniq:
            m2 = re.match(r'^(.*?)(?:\s*\((\d{4})\))?$', t)
            title = m2.group(1).strip()
            year = int(m2.group(2)) if m2.group(2) else None
            out.append({"title": title, "year": year})
        return out

    raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –∏–∑ " + html_file)

# --- HLTB helper: –∏–∑–≤–ª–µ—á—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ñ–æ–ª–ª–±–µ–∫–∏) ---
def extract_candidates_from_content(html_content: str):
    """
    –ò—â–µ—Ç –≤–Ω—É—Ç—Ä–∏ html_content –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ /game/<id> –∏ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–æ–∫.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ {'title':..., 'href':..., 'year': maybe}
    """
    # –ù–∞–π–¥—ë–º –≤—Å–µ anchors —Å /game/
    pattern = re.compile(r'<a[^>]+href=["\'](?P<href>/game/\d+)[^"\']*["\'][^>]*>(?P<text>.*?)</a>', re.IGNORECASE | re.DOTALL)
    found = []
    for m in pattern.finditer(html_content):
        text = re.sub(r'<[^>]+>', '', m.group('text')).strip()
        href = m.group('href')
        # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –≤—ã—Ç–∞—â–∏—Ç—å –≥–æ–¥ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        ym = re.search(r'\((\d{4})\)', text)
        year = int(ym.group(1)) if ym else None
        found.append({"text": text, "href": href, "year": year})
    # –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ href
    seen = set()
    uniq = []
    for c in found:
        if c['href'] not in seen:
            uniq.append(c)
            seen.add(c['href'])
    return uniq

# --- –ü–∞—Ä—Å–µ—Ä –±–ª–æ–∫–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä—ã (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞) ---
def parse_time_blocks_from_game_page(html_content: str):
    """
    –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ (ms, main+extras, comp, all, coop, vs)
    –ù–∏—á–µ–≥–æ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç ‚Äî –ø–æ —Ñ–∞–∫—Ç—É –ª—É—á—à–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å —ç—Ç—É –ª–æ–≥–∏–∫—É –ø—Ä–æ—Å—Ç–æ–π –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ ms,mpe,comp,all,coop,vs –ª–∏–±–æ "N/A".
    """
    # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –∏—â–µ–º –±–ª–æ–∫–∏ –≤–∏–¥–∞ "Main Story: X Hours" / "Main + Extras: Y Hours" –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
    res = {"ms": "N/A", "mpe": "N/A", "comp": "N/A", "all": "N/A", "coop": "N/A", "vs": "N/A"}
    # –ò—â–µ–º —Ü–∏—Ñ—Ä—ã/–≤—Ä–µ–º—è
    # –ü—Ä–∏–º–µ—Ä: <div class="game_times"> ... "Main Story" ... <div class="time"> 6 Hours </div>
    blocks = re.findall(r'(?P<label>Main Story|Main \+ Extras|Completionist|All Playstyles|Co-Op|Vs\.)\s*[:\-\s]*.*?(?P<time>\d+\s*Hours|\d+\s*¬Ω|\d+:\d+)', html_content, flags=re.IGNORECASE | re.DOTALL)
    # –ü–æ–ø—Ä–æ–±—É–µ–º –º–∞–ø–ø–∏–Ω–≥
    for label, time_str in blocks:
        label_norm = label.lower()
        if "main story" in label_norm:
            res["ms"] = time_str.strip()
        elif "main + extras" in label_norm or "main + extras" in label_norm.lower():
            res["mpe"] = time_str.strip()
        elif "completionist" in label_norm:
            res["comp"] = time_str.strip()
        elif "all playstyles" in label_norm or "all" == label_norm.lower():
            res["all"] = time_str.strip()
        elif "co-op" in label_norm or "co op" in label_norm:
            res["coop"] = time_str.strip()
        elif "vs" in label_norm:
            res["vs"] = time_str.strip()
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å (–µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏—á–µ–≥–æ ‚Äî –æ—Å—Ç–∞–Ω–µ—Ç—Å—è N/A)
    return res

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –æ–¥–Ω–æ–π –∏–≥—Ä—ã ---
def process_game(browser, game, index, total):
    title = game.get("title") or ""
    year = game.get("year")
    display = f"{title} ({year})" if year else title
    print(f"[{ts_str()}] üéÆ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {index}/{total}: {display}")
    page = None
    result = {"input_title": title, "input_year": year, "hltb": {"ms":"N/A","mpe":"N/A","comp":"N/A","all":"N/A","coop":"N/A","vs":"N/A"}, "matched": None}
    try:
        context = browser.new_context()
        page = context.new_page()
        # –ü–µ—Ä–µ–±–æ—Ä –≤–∞—Ä–∏–∞—Ü–∏–π –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        variants = generate_search_variants(title, year)
        best = None
        best_score = -1
        best_href = None
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã (–≤–∞—Ä–∏–∞–Ω—Ç -> –ø–æ–ø—ã—Ç–∫–∏)
        for variant in variants:
            q = quote(variant, safe='')
            search_url = f"{BASE_URL}/?q={q}"
            print(f"[{ts_str()}] üîç –ò—â–µ–º: '{variant}' -> URL: {search_url}")
            attempt = 0
            while attempt < MAX_ATTEMPTS_PER_VARIANT:
                attempt += 1
                # –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                sleep_time = random.uniform(MIN_SLEEP, MAX_SLEEP)
                if attempt > 1:
                    print(f"[{ts_str()}] üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{MAX_ATTEMPTS_PER_VARIANT} –¥–ª—è '{title}' ‚Äî –ø–∞—É–∑–∞ {sleep_time:.1f}s")
                time.sleep(sleep_time)
                try:
                    page.goto(search_url, wait_until="load", timeout=FINAL_PAGE_TIMEOUT_MS)
                except PlaywrightTimeoutError:
                    print(f"[{ts_str()}] ‚ö†Ô∏è Page.goto —Ç–∞–π–º–∞—É—Ç –¥–ª—è {search_url}, –ø–æ–ø—Ä–æ–±—É–µ–º —á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
                except Exception as e:
                    print(f"[{ts_str()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
                # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–æ–∫–∞—Ç–æ—Ä (JS-–∑–∞–≤–∏—Å–∏–º—ã–π)
                candidates = []
                try:
                    # –ñ–¥—ë–º –∫–æ—Ä–æ—Ç–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è, –º–æ–∂–µ—Ç —Ç–∞–π–º–∞—É—Ç–∏—Ç—å)
                    page.wait_for_selector('a[href^="/game/"]', timeout=WAIT_SELECTOR_TIMEOUT_MS)
                    # –°–æ–±–µ—Ä—ë–º —ç–ª–µ–º–µ–Ω—Ç—ã
                    anchors = page.query_selector_all('a[href^="/game/"]')
                    for a in anchors:
                        try:
                            href = a.get_attribute("href")
                            txt = a.inner_text().strip()
                            # –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –≥–æ–¥ (–æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Å–æ—Å–µ–¥–Ω–µ–º —ç–ª–µ–º–µ–Ω—Ç–µ) ‚Äî —É–ø—Ä–æ—â—ë–Ω–Ω–æ: –ø–∞—Ä—Å–∏–º –∏–∑ —Ç–µ–∫—Å—Ç–∞
                            ym = re.search(r'\((\d{4})\)', txt)
                            yv = int(ym.group(1)) if ym else None
                            candidates.append({"text": txt, "href": href, "year": yv})
                        except Exception:
                            continue
                except PlaywrightTimeoutError:
                    # –ï—Å–ª–∏ wait_for_selector —Ç–∞–π–º–∞—É—Ç–∏—Ç ‚Äî –∏–∑–≤–ª–µ—á—ë–º content –∏ —Ä–∞—Å–ø–∞—Ä—Å–∏–º anchors —á–µ—Ä–µ–∑ regex
                    print(f"[{ts_str()}] ‚ö†Ô∏è wait_for_selector —Ç–∞–π–º–∞—É—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–∫–∞—Ç–æ—Ä—ã (–≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)")
                    content = page.content()
                    # Debug dumps
                    if DEBUG:
                        save_debug_file(f"{index}_{title}_search_html_{now_ts()}.html", content)
                    parsed = extract_candidates_from_content(content)
                    candidates.extend(parsed)
                except Exception as e:
                    print(f"[{ts_str()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {e}")
                    try:
                        content = page.content()
                        parsed = extract_candidates_from_content(content)
                        candidates.extend(parsed)
                    except Exception:
                        pass

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–º–ø –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
                if DEBUG:
                    fn = f"{index}_{title}_candidates_{now_ts()}.json"
                    save_debug_file(fn, candidates)

                # –ï—Å–ª–∏ candidates –±–æ–ª—å—à–µ 0 ‚Äî –æ—Ü–µ–Ω–∏–≤–∞–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å
                if not candidates:
                    print(f"[{ts_str()}] üîé –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: 0")
                    # fallback: –ø–æ–ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç (–∏–ª–∏ —Ä–µ-—Ä–µ –∑–∞–≥—Ä—É–∑–∫—É)
                    continue

                # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: –∏—Å–ø–æ–ª—å–∑—É–µ–º normalized similarity –∏ –≥–æ–¥–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                for cand in candidates:
                    cand_title = cand.get("text", "")
                    cand_href = cand.get("href")
                    cand_year = cand.get("year")
                    score = similarity(title, cand_title)
                    # boost –µ—Å–ª–∏ –≥–æ–¥ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
                    if year and cand_year and year == cand_year:
                        score = max(score, 0.98)  # —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                    # boost –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                    if normalized_title(title) == normalized_title(cand_title):
                        score = 1.0
                    # keep best
                    if score > best_score:
                        best_score = score
                        best = cand_title
                        best_href = cand_href
                # –ï—Å–ª–∏ –ª—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç —Ö–æ—Ä–æ—à ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏–º—Å—è
                print(f"[{ts_str()}] üèÅ –õ—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: '{best}' (score {best_score:.2f}) href={best_href}")
                if best_score >= 0.95:
                    break  # –¥–∞–ª—å–Ω–µ–π—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ –Ω—É–∂–Ω—ã
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ä–æ—à–∏–π ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ variants
            if best_score >= 0.95:
                break

        # –§–∏–Ω–∞–ª: –µ—Å–ª–∏ best_href ‚Äî –æ—Ç–∫—Ä–æ–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä—ã –∏ –ø–∞—Ä—Å–∏–º –≤—Ä–µ–º–µ–Ω–∞
        if best_href:
            # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º href (–∏–Ω–æ–≥–¥–∞ –±–µ–∑ —Å–ª–µ—à–∞)
            if not best_href.startswith("/"):
                best_href = "/" + best_href
            game_url = BASE_URL + best_href
            print(f"[{ts_str()}] üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä—ã: {game_url}")
            try:
                page.goto(game_url, wait_until="load", timeout=FINAL_PAGE_TIMEOUT_MS)
            except PlaywrightTimeoutError:
                print(f"[{ts_str()}] ‚ö†Ô∏è Page.goto —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–æ–Ω–µ—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –ø–æ–ø—Ä–æ–±—É–µ–º content()")
            content = page.content()
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if DEBUG:
                save_debug_file(f"{index}_{title}_final_page_search_html_{now_ts()}.html", content)
            # –ø–∞—Ä—Å–∏–º –≤—Ä–µ–º–µ–Ω–∞ (—ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
            parsed_times = parse_time_blocks_from_game_page(content)
            result["hltb"].update(parsed_times)
            result["matched"] = {"title": best, "href": best_href, "score": best_score}
            print(f"[{ts_str()}] ‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è '{title}' -> matched '{best}' (score {best_score:.2f})")
        else:
            print(f"[{ts_str()}] ‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è: {title} - –∑–∞–ø–∏—Å–∞–Ω–æ N/A")
            result["matched"] = None

    except Exception as e:
        print(f"[{ts_str()}] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {title}: {e}")
        traceback.print_exc()
    finally:
        try:
            if page:
                page.close()
            # close context is automatic when browser.close()
        except Exception:
            pass
    return result

# --- –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ ---
def generate_search_variants(title: str, year=None):
    """–°–æ–∑–¥–∞—ë—Ç —É—Å—Ç–æ–π—á–∏–≤—ã–π –Ω–∞–±–æ—Ä —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ HLTB"""
    v = []
    # –±–∞–∑–æ–≤—ã–π
    v.append(title)
    # –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
    v.append(re.sub(r'[&/\\]', ' ', title))
    # –≥–æ–¥–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    if year:
        v.append(f"{title} {year}")
        v.append(f'{title} "{year}"')
    # —Ä–∏–º—Å–∫–∏–µ -> –∞—Ä–∞–±—Å–∫–∏–µ –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç (–ø—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ II <-> 2)
    v.append(title.replace(" II", " 2").replace("III", "3").replace("IV", "4"))
    v.append(title.replace(" 2", " II").replace("3", "III"))
    # –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∞—Ä–∏–∞—Ü–∏–π: —Ä–∞–∑–±–∏—Ç—å –ø–æ /
    if "/" in title:
        parts = [p.strip() for p in title.split("/")]
        for p in parts:
            if p and p not in v:
                v.append(p)
    # —É–±—Ä–∞—Ç—å —Å–∫–æ–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä (& Knuckles))
    v.append(re.sub(r'\(.*?\)', '', title).strip())
    # —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫
    uniq = []
    for s in v:
        s2 = re.sub(r'\s+', ' ', s).strip()
        if s2 and s2 not in uniq:
            uniq.append(s2)
    return uniq

# --- Debug save helpers ---
def save_debug_file(name: str, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–º–ø—ã –≤ DEBUG_DIR —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–º–µ–Ω–µ–º. data –º–æ–∂–µ—Ç –±—ã—Ç—å str –∏–ª–∏ JSON-serializable."""
    ensure_dirs()
    safe = sanitize_filename(name)
    path = os.path.join(DEBUG_DIR, safe)
    try:
        if isinstance(data, (dict, list)):
            write_json_safe(path, data)
        else:
            # assume text or bytes-like
            mode = "wb" if isinstance(data, (bytes, bytearray)) else "w"
            with open(path, mode) as f:
                if mode == "w":
                    f.write(data)
                else:
                    f.write(data)
        print(f"[{ts_str()}] üóÇÔ∏è –°–æ—Ö—Ä–∞–Ω—ë–Ω –¥–∞–º–ø: {path}")
    except Exception as e:
        print(f"[{ts_str()}] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–º–ø–∞ {path}: {e}")

# --- –û—Å–Ω–æ–≤–Ω–æ–π entrypoint ---
def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ HLTB Worker (—É—Å—Ç–æ–π—á–∏–≤—ã–π —Ä–µ–∂–∏–º)")
    ensure_dirs()
    # –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    if not os.path.exists(GAMES_LIST_FILE):
        raise SystemExit(f"‚ùå –§–∞–π–ª {GAMES_LIST_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ç—É–¥–∞ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä.")
    try:
        games_list = extract_games_list(GAMES_LIST_FILE)
    except Exception as e:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä:", e)
        raise

    total = len(games_list)
    print(f"[{ts_str()}] üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–æ {total} –∏–≥—Ä")
    # load existing output if exists (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å)
    existing = []
    if os.path.exists(OUTPUT_FILE):
        try:
            existing = json.load(open(OUTPUT_FILE, "r", encoding="utf-8"))
        except Exception:
            existing = []

    results = existing[:]  # –Ω–∞—á–Ω—ë–º —Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    # –∑–∞–ø—É—Å–∫–∞–µ–º playwright
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True, args=["--no-sandbox"])
        try:
            for idx, g in enumerate(games_list, start=1):
                # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã –ø–æ input_title -> –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                already = next((r for r in results if r.get("input_title") == g.get("title") and r.get("input_year") == g.get("year")), None)
                if already:
                    print(f"[{ts_str()}] ‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {g.get('title')} - —É–∂–µ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
                    continue
                res = process_game(browser, g, idx, total)
                results.append(res)
                # –ø–∏—à–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ
                try:
                    write_json_safe(OUTPUT_FILE, results)
                except Exception as e:
                    print(f"[{ts_str()}] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        finally:
            try:
                browser.close()
            except Exception:
                pass

    # —Ñ–∏–Ω–∞–ª—å–Ω–æ: –ø–µ—Ä–µ—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    categories, total_polled, na_count = count_hltb_data(results)
    report = {
        "updated_at": ts_str(),
        "total_input": total,
        "total_processed": len(results),
        "na_count": na_count,
        "counts": categories,
        "polled": total_polled
    }
    # –∑–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç
    try:
        write_json_safe(OUTPUT_FILE, results)
        write_json_safe(os.path.join(OUTPUT_DIR, "scraping_report.json"), report)
        print(f"[{ts_str()}] üéâ –ì–æ—Ç–æ–≤–æ ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)}/{total} –∏–≥—Ä")
    except Exception as e:
        print(f"[{ts_str()}] ‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏: {e}")

    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–¥–µ–ª–∞—Ç—å git commit/push (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    if COMMIT_RESULTS:
        try:
            print(f"[{ts_str()}] üîß COMMIT_RESULTS –≤–∫–ª—é—á—ë–Ω ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –µ—Å—Ç—å git + credentials (Actions)
            os.system("git config user.email 'hltb-worker@example.com' || true")
            os.system("git config user.name 'HLTB Worker' || true")
            os.system("git add -A || true")
            os.system("git commit -m 'HLTB worker: update results' || true")
            # –ø—ã—Ç–∞–µ–º—Å—è –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞—Ç–µ–º push
            os.system("git pull --rebase --autostash origin main || true")
            os.system("git push origin HEAD:main || true")
            print(f"[{ts_str()}] ‚úÖ –ü–æ–ø—ã—Ç–∫–∞ –∫–æ–º–º–∏—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—Å–º. –≤—ã–≤–æ–¥ git).")
        except Exception as e:
            print(f"[{ts_str()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ commit/push: {e}")

if __name__ == "__main__":
    main()
