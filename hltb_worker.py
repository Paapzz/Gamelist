#!/usr/bin/env python3

print("üöÄ HLTB Worker –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
print("üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏...")

import json
print("‚úÖ json –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

import time
print("‚úÖ time –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

import random
print("‚úÖ random –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

import re
print("‚úÖ re –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

import os
print("‚úÖ os –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

from datetime import datetime
print("‚úÖ datetime –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

from urllib.parse import quote
print("‚úÖ urllib.parse –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

print("üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Playwright...")
from playwright.sync_api import sync_playwright
print("‚úÖ Playwright –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "https://howlongtobeat.com"
GAMES_LIST_FILE = "index111.html"
OUTPUT_DIR = "hltb_data"
OUTPUT_FILE = f"{OUTPUT_DIR}/hltb_data.json"
PROGRESS_FILE = "progress.json"

# –ó–∞–¥–µ—Ä–∂–∫–∏ (—É–±—Ä–∞–Ω–∞ –≤–µ–∂–ª–∏–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏)
BREAK_INTERVAL_MIN = 8 * 60  # 8 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
BREAK_INTERVAL_MAX = 10 * 60  # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
BREAK_DURATION_MIN = 40  # 40 —Å–µ–∫—É–Ω–¥
BREAK_DURATION_MAX = 80  # 80 —Å–µ–∫—É–Ω–¥

def setup_directories():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print(f"üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {OUTPUT_DIR}")
    try:
        os.makedirs(OUTPUT_DIR, exist_ok=True)
        print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {OUTPUT_DIR} —Å–æ–∑–¥–∞–Ω–∞/—Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
        raise
    
def log_message(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    try:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        print(log_entry)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}")

def count_hltb_data(hltb_data):
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö HLTB –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    categories = {"ms": 0, "mpe": 0, "comp": 0, "all": 0, "coop": 0, "vs": 0}
    total_polled = {"ms": 0, "mpe": 0, "comp": 0, "all": 0, "coop": 0, "vs": 0}
    na_count = 0
    
    for game in hltb_data:
        if "hltb" in game:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ N/A –∑–∞–ø–∏—Å—å—é
            if (isinstance(game["hltb"], dict) and 
                game["hltb"].get("ms") == "N/A" and 
                game["hltb"].get("mpe") == "N/A" and 
                game["hltb"].get("comp") == "N/A" and 
                game["hltb"].get("all") == "N/A"):
                na_count += 1
                continue
            
            for category in categories:
                if category in game["hltb"] and game["hltb"][category] and game["hltb"][category] != "N/A":
                    categories[category] += 1
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤
                    if isinstance(game["hltb"][category], dict) and "p" in game["hltb"][category]:
                        total_polled[category] += game["hltb"][category]["p"]
    
    return categories, total_polled, na_count

def extract_games_list(html_file):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –∏–∑ HTML —Ñ–∞–π–ª–∞"""
    try:
        log_message(f"üìñ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª {html_file}...")
        with open(html_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        log_message(f"üìÑ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ gamesList
        log_message("üîç –ò—â–µ–º 'const gamesList = ['...")
        start = content.find('const gamesList = [')
        if start == -1:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω const gamesList –≤ HTML —Ñ–∞–π–ª–µ")
        
        log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω const gamesList –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {start}")
        
        # –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –º–∞—Å—Å–∏–≤–∞
        log_message("üîç –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –º–∞—Å—Å–∏–≤–∞...")
        bracket_count = 0
        end = start
        for i, char in enumerate(content[start:], start):
            if char == '[':
                bracket_count += 1
            elif char == ']':
                bracket_count -= 1
                if bracket_count == 0:
                    end = i + 1
                    break
        
        if bracket_count != 0:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ gamesList")
        
        log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {end}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON
        log_message("‚úÇÔ∏è –ò–∑–≤–ª–µ–∫–∞–µ–º JSON...")
        games_json = content[start:end]
        games_json = games_json.replace('const gamesList = ', '')
        
        log_message(f"üìù JSON –∏–∑–≤–ª–µ—á–µ–Ω, —Ä–∞–∑–º–µ—Ä: {len(games_json)} —Å–∏–º–≤–æ–ª–æ–≤")
        log_message("üîÑ –ü–∞—Ä—Å–∏–º JSON...")
        
        games_list = json.loads(games_json)
        log_message(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(games_list)} –∏–≥—Ä –∏–∑ HTML —Ñ–∞–π–ª–∞")
        return games_list
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä: {e}")
        raise

def parse_time_to_hours(time_str):
    """–ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Xh Ym' –∏–ª–∏ 'X Hours' –≤ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã"""
    if not time_str or time_str == "N/A":
        return 0, 0
    
    # –£–±–∏—Ä–∞–µ–º "Hours" –µ—Å–ª–∏ –µ—Å—Ç—å
    time_str = time_str.replace("Hours", "").strip()
    
    # –ò—â–µ–º —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥—Ä–æ–±–Ω—ã–µ —á–∞—Å—ã)
    hours_match = re.search(r'(\d+(?:\.\d+)?)h', time_str)
    minutes_match = re.search(r'(\d+)m', time_str)
    
    hours = float(hours_match.group(1)) if hours_match else 0
    minutes = int(minutes_match.group(1)) if minutes_match else 0
    
    # –ï—Å–ª–∏ –Ω–µ—Ç "h" –∏ "m", –Ω–æ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (—á–∞—Å—ã)
    if hours == 0 and minutes == 0:
        number_match = re.search(r'(\d+(?:\.\d+)?)', time_str)
        if number_match:
            hours = float(number_match.group(1))
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å –≤ –º–∏–Ω—É—Ç—ã
            if hours != int(hours):
                minutes = int((hours - int(hours)) * 60)
                hours = int(hours)
    
    # –ï—Å–ª–∏ —á–∞—Å—ã –¥—Ä–æ–±–Ω—ã–µ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å –≤ –º–∏–Ω—É—Ç—ã
    if hours != int(hours):
        minutes += int((hours - int(hours)) * 60)
        hours = int(hours)
    
    return hours, minutes

def round_time(time_str):
    """–û–∫—Ä—É–≥–ª—è–µ—Ç –≤—Ä–µ–º—è –∫ –±–ª–∏–∂–∞–π—à–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é"""
    if not time_str or time_str == "N/A":
        return None
    
    hours, minutes = parse_time_to_hours(time_str)
    
    if minutes <= 14:
        return f"{hours}h"           # 0-14 –º–∏–Ω ‚Üí —Ü–µ–ª—ã–π —á–∞—Å
    elif minutes <= 44:
        return f"{hours}.5h"         # 15-44 –º–∏–Ω ‚Üí +0.5 —á–∞—Å–∞
    else:
        return f"{hours + 1}h"       # 45-59 –º–∏–Ω ‚Üí +1 —á–∞—Å

def random_delay(min_seconds, max_seconds):
    """–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"""
    delay = random.uniform(min_seconds, max_seconds)
    time.sleep(delay)

def check_break_time(start_time, games_processed):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ—Ä—ã–≤"""
    elapsed_seconds = time.time() - start_time
    
    # –†–∞–Ω–¥–æ–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–µ—Ä–µ—Ä—ã–≤–∞–º–∏
    break_interval = random.randint(BREAK_INTERVAL_MIN, BREAK_INTERVAL_MAX)
    
    if elapsed_seconds >= break_interval:
        # –†–∞–Ω–¥–æ–º–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ä—ã–≤–∞
        break_duration = random.randint(BREAK_DURATION_MIN, BREAK_DURATION_MAX)
        log_message(f"‚è∏Ô∏è  –ü–µ—Ä–µ—Ä—ã–≤ {break_duration} —Å–µ–∫—É–Ω–¥... (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {games_processed} –∏–≥—Ä)")
        time.sleep(break_duration)
        return time.time()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    
    return start_time

def search_game_on_hltb(page, game_title):
    """–ò—â–µ—Ç –∏–≥—Ä—É –Ω–∞ HLTB –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    max_attempts = 3
    delays = [0, (15, 18), (65, 70)]  # –ü–∞—É–∑—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    alternative_title = extract_alternative_title(game_title)
    
    for attempt in range(max_attempts):
        try:
            if attempt > 0:
                log_message(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts} –¥–ª—è '{game_title}'")
                if isinstance(delays[attempt], tuple):
                    min_delay, max_delay = delays[attempt]
                    log_message(f"‚è≥ –ü–∞—É–∑–∞ {min_delay}-{max_delay} —Å–µ–∫—É–Ω–¥...")
                    random_delay(min_delay, max_delay)
                else:
                    log_message(f"‚è≥ –ü–∞—É–∑–∞ {delays[attempt]} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(delays[attempt])
            
            # –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            result = search_game_single_attempt(page, game_title)
            if result is not None:
                if attempt > 0:
                    log_message(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–æ —Å –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1}")
                return result
            
            # –ï—Å–ª–∏ —Å—Ö–æ–∂–µ—Å—Ç—å –º–µ–Ω—å—à–µ 0.6 –∏ –µ—Å—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º –µ–≥–æ
            if alternative_title and attempt == 0:
                log_message(f"üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: '{alternative_title}'")
                alt_result = search_game_single_attempt(page, alternative_title)
                if alt_result is not None:
                    log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é")
                    return alt_result
            
        except Exception as e:
            log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1} –¥–ª—è '{game_title}': {e}")
            if attempt == max_attempts - 1:
                log_message(f"üí• –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è '{game_title}'")
                return None
    
    return None

def search_game_single_attempt(page, game_title):
    """–û–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä—ã –Ω–∞ HLTB"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        primary_title = extract_primary_title(game_title)
        log_message(f"üîç –ò—â–µ–º: '{primary_title}' (–æ—Ä–∏–≥–∏–Ω–∞–ª: '{game_title}')")
        
        # –ö–æ–¥–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è URL
        safe_title = quote(primary_title, safe="")
        search_url = f"{BASE_URL}/?q={safe_title}"
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞
        page.goto(search_url, timeout=20000)
        page.wait_for_load_state("domcontentloaded", timeout=15000)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞
        page_content = page.content()
        if "blocked" in page_content.lower() or "access denied" in page_content.lower():
            log_message("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ë–õ–û–ö–ò–†–û–í–ö–ê IP –ø—Ä–∏ –ø–æ–∏—Å–∫–µ!")
            return None
        elif "cloudflare" in page_content.lower() and "checking your browser" in page_content.lower():
            log_message("‚ö†Ô∏è Cloudflare –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ - –∂–¥–µ–º...")
            time.sleep(5)
            page_content = page.content()
            if "checking your browser" in page_content.lower():
                log_message("‚ùå Cloudflare –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫")
                return None
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ (React –∫–æ–Ω—Ç–µ–Ω—Ç)
        random_delay(3, 5)  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 3-5 —Å–µ–∫—É–Ω–¥
        
        # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—ã
        game_links = page.locator('a[href^="/game/"]')
        found_count = game_links.count()
        
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç, –∂–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ
        if found_count == 0:
            random_delay(2, 4)  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 2-4 —Å–µ–∫—É–Ω–¥—ã
            found_count = game_links.count()
        
        # –ï—Å–ª–∏ –º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∂–¥–µ–º –¥–æ–ª—å—à–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        if found_count > 10:
            log_message(f"üìä –ù–∞–π–¥–µ–Ω–æ {found_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∂–¥–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É...")
            random_delay(5, 8)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            found_count = game_links.count()  # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
        
        if found_count == 0:
            return None
        
        # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        best_match, best_title, similarity = find_best_match(page, game_links, game_title)
        if not best_match:
            return None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
        best_url = best_match.get_attribute("href")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä
        log_message(f"üéØ –í—ã–±—Ä–∞–Ω–æ: '{best_title}' (—Å—Ö–æ–∂–µ—Å—Ç—å: {similarity:.2f})")
        
        # –ï—Å–ª–∏ —Å—Ö–æ–∂–µ—Å—Ç—å –º–µ–Ω—å—à–µ 0.6, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
        if similarity < 0.6:
            log_message(f"‚ö†Ô∏è  –ù–∏–∑–∫–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å ({similarity:.2f}), –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
            return None
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
        full_url = f"{BASE_URL}{best_url}"
        
        page.goto(full_url, timeout=20000)
        page.wait_for_load_state("domcontentloaded", timeout=15000)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–≥—Ä—ã
        page_content = page.content()
        if "blocked" in page_content.lower() or "access denied" in page_content.lower():
            log_message("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ë–õ–û–ö–ò–†–û–í–ö–ê IP –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–≥—Ä—ã!")
            return None
        elif "cloudflare" in page_content.lower() and "checking your browser" in page_content.lower():
            log_message("‚ö†Ô∏è Cloudflare –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–≥—Ä—ã - –∂–¥–µ–º...")
            time.sleep(5)
            page_content = page.content()
            if "checking your browser" in page_content.lower():
                log_message("‚ùå Cloudflare –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä—ã")
                return None
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã (React –∫–æ–Ω—Ç–µ–Ω—Ç)
        random_delay(3, 5)  # –£–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        hltb_data = extract_hltb_data_from_page(page)
        return hltb_data
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä—ã '{game_title}': {e}")
        return None

def find_best_match(page, game_links, original_title):
    """–ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–≥—Ä"""
    try:
        best_match = None
        best_score = 0
        best_title = ""
        
        # –û—á–∏—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        original_clean = clean_title_for_comparison(original_title)
        
        for i in range(min(game_links.count(), 10)):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            link = game_links.nth(i)
            link_text = link.inner_text().strip()
            
            if link_text:
                # –û—á–∏—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                found_clean = clean_title_for_comparison(link_text)
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å
                score = calculate_title_similarity(original_clean, found_clean)
                
                if score > best_score:
                    best_score = score
                    best_match = link
                    best_title = link_text
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if score >= 0.9:
                    break
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ç–µ–∂ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ —Å—Ö–æ–∂–µ—Å—Ç—å—é
        if best_score >= 0.3:
            return best_match, best_title, best_score
        else:
            return None, "", 0
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {e}")
        return game_links.first if game_links.count() > 0 else None, "", 0

def clean_title_for_comparison(title):
    """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    import re
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    cleaned = re.sub(r'[^\w\s]', '', title.lower())
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    cleaned = re.sub(r'\s+', ' ', cleaned).strip()
    return cleaned

def extract_primary_title(game_title):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏"""
    if not game_title:
        return game_title
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å "/", –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ-—Ä–∞–∑–Ω–æ–º—É
    if "/" in game_title:
        parts = [part.strip() for part in game_title.split("/")]
        
        # –ï—Å–ª–∏ —á–∞—Å—Ç–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä "Gold/Silver/Crystal"), –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å "and"
        if all(" " not in part for part in parts):
            primary = f"{parts[0]} and {parts[1]}"
            log_message(f"üìù –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–∞—Å—Ç–∏: '{game_title}' -> '{primary}'")
            return primary
        else:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
            primary = parts[0]
            log_message(f"üìù –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: '{game_title}' -> '{primary}'")
            return primary
    
    return game_title

def extract_alternative_title(game_title):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    if not game_title or "/" not in game_title:
        return None
    
    parts = [part.strip() for part in game_title.split("/")]
    
    # –ï—Å–ª–∏ —á–∞—Å—Ç–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å
    if len(parts) >= 2 and all(" " not in part for part in parts):
        alternative = parts[1]
        log_message(f"üìù –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: '{game_title}' -> '{alternative}'")
        return alternative
    
    return None

def calculate_title_similarity(title1, title2):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏–≥—Ä"""
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å—Ö–æ–∂–µ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö —Å–ª–æ–≤
        words1 = set(title1.split())
        words2 = set(title2.split())
        
        if not words1 or not words2:
            return 0.0
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–ª–æ–≤
        common_words = words1.intersection(words2)
        total_words = words1.union(words2)
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å –ø–æ —Å–ª–æ–≤–∞–º
        word_similarity = len(common_words) / len(total_words)
        
        # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if title1 == title2:
            return 1.0
        
        # –ë–æ–Ω—É—Å –∑–∞ –≤–∫–ª—é—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –≤ –¥—Ä—É–≥–æ–µ
        if title1 in title2 or title2 in title1:
            word_similarity += 0.2
        
        # –ë–æ–Ω—É—Å –∑–∞ –æ–±—â–∏–µ –¥–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (–±–æ–ª–µ–µ 4 —Å–∏–º–≤–æ–ª–æ–≤)
        long_common = [w for w in common_words if len(w) > 4]
        if long_common:
            word_similarity += 0.1 * len(long_common)
        
        return min(word_similarity, 1.0)
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ö–æ–∂–µ—Å—Ç–∏: {e}")
        return 0.0

def extract_hltb_data_from_page(page):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ HLTB —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä—ã"""
    try:
        hltb_data = {}
        
        # –ò—â–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        tables = page.locator("table")
        table_count = tables.count()
        
        for table_idx in range(table_count):
            try:
                table = tables.nth(table_idx)
                table_text = table.inner_text()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω—É–∂–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                if any(keyword in table_text for keyword in ["Main Story", "Main + Extras", "Completionist", "Co-Op", "Competitive", "Vs."]):
                    log_message(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É {table_idx + 1}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                    rows = table.locator("tr")
                    row_count = rows.count()
                    
                    for row_idx in range(row_count):
                        try:
                            row_text = rows.nth(row_idx).inner_text().strip()
                            
                            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)
                            if "Main Story" in row_text and "ms" not in hltb_data:
                                hltb_data["ms"] = extract_hltb_row_data(row_text)
                            elif "Main + Extras" in row_text and "mpe" not in hltb_data:
                                hltb_data["mpe"] = extract_hltb_row_data(row_text)
                            elif "Completionist" in row_text and "comp" not in hltb_data:
                                hltb_data["comp"] = extract_hltb_row_data(row_text)
                            elif "Co-Op" in row_text and "coop" not in hltb_data:
                                hltb_data["coop"] = extract_hltb_row_data(row_text)
                            elif "Competitive" in row_text and "vs" not in hltb_data:
                                hltb_data["vs"] = extract_hltb_row_data(row_text)
                                
                        except Exception as e:
                            log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {row_idx}: {e}")
                            continue
                            
            except Exception as e:
                log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table_idx}: {e}")
                continue
        
        # –ò—â–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ —Å "Vs." (–Ω–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö)
        try:
            vs_elements = page.locator('text="Vs."')
            vs_count = vs_elements.count()
            if vs_count > 0:
                for i in range(min(3, vs_count)):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –≤—Ö–æ–∂–¥–µ–Ω–∏—è
                    try:
                        vs_element = vs_elements.nth(i)
                        surrounding_text = vs_element.evaluate("(e) => (e.closest('div')||e.parentElement||e).innerText")
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–±–ª–∏—Ü–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Ä–µ–º—è, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                        if "Hours" in surrounding_text and "table" not in str(vs_element.locator("..").get_attribute("tagName")).lower():
                            vs_data = extract_vs_data_from_text(surrounding_text)
                            if vs_data and "vs" not in hltb_data:
                                hltb_data["vs"] = vs_data
                                log_message(f"üéØ –ù–∞–π–¥–µ–Ω—ã Vs. –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –±–ª–æ–∫–µ: {vs_data}")
                    except Exception as e:
                        log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Vs. –±–ª–æ–∫–∞ {i}: {e}")
                        continue
        except Exception as e:
            log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Vs. –±–ª–æ–∫–æ–≤: {e}")
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã
        store_links = extract_store_links(page)
        if store_links:
            hltb_data["stores"] = store_links
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if hltb_data:
            categories = []
            for key, value in hltb_data.items():
                if key != "stores" and isinstance(value, dict) and "t" in value:
                    categories.append(f"{key}: {value['t']}")
            if categories:
                log_message(f"üìä –ù–∞–π–¥–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(categories)}")
        
        return hltb_data if hltb_data else None
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return None

def extract_store_links(page):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä—ã"""
    try:
        store_links = {}
        
        # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã
        store_selectors = {
            "steam": "a[href*='store.steampowered.com']",
            "epic": "a[href*='epicgames.com']",
            "gog": "a[href*='gog.com']",
            "humble": "a[href*='humblebundle.com']",
            "itch": "a[href*='itch.io']",
            "origin": "a[href*='origin.com']",
            "uplay": "a[href*='uplay.com']",
            "battlenet": "a[href*='battle.net']",
            "psn": "a[href*='playstation.com']",
            "xbox": "a[href*='xbox.com']",
            "nintendo": "a[href*='nintendo.com']"
        }
        
        for store_name, selector in store_selectors.items():
            try:
                link_element = page.locator(selector).first
                if link_element.count() > 0:
                    href = link_element.get_attribute("href")
                    if href:
                        # –û—á–∏—â–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è GOG
                        if store_name == "gog" and "adtraction.com" in href:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π
                            import re
                            match = re.search(r'url=([^&]+)', href)
                            if match:
                                href = match.group(1)
                                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL
                                from urllib.parse import unquote
                                href = unquote(href)
                        
                        store_links[store_name] = href
            except:
                continue
        
        if store_links:
            log_message(f"üõí –ù–∞–π–¥–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã: {list(store_links.keys())}")
        
        return store_links if store_links else None
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã: {e}")
        return None

def extract_hltb_row_data(row_text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã HLTB (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)"""
    try:
        import re
        
        # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º K —Ñ–æ—Ä–º–∞—Ç –∏ —Ç–∞–±—ã)
        # –ü—Ä–∏–º–µ—Ä—ã: "Main Story 54 660h 37m" -> 54, "Main Story	1.7K	15h 31m" -> 1700
        polled_match = re.search(r'^[A-Za-z\s/\+]+\s+(\d+(?:\.\d+)?[Kk]?)\s+', row_text)
        if not polled_match:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Å —Ç–∞–±–∞–º–∏: "Main Story	1.7K	15h 31m"
            polled_match = re.search(r'^[A-Za-z\s/\+]+\t+(\d+(?:\.\d+)?[Kk]?)\t+', row_text)
        if not polled_match:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫: —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
            polled_match = re.search(r'(\d+(?:\.\d+)?[Kk]?)\s+(?:\d+h|\d+\s*Hours?)', row_text)
        
        polled = None
        if polled_match:
            polled_str = polled_match.group(1)
            if 'K' in polled_str.upper():
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º K –≤ —Ç—ã—Å—è—á–∏
                number = float(polled_str.replace('K', '').replace('k', ''))
                polled = int(number * 1000)
            else:
                polled = int(float(polled_str))
        
        # –ò—â–µ–º –≤—Ä–µ–º–µ–Ω–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        times = []
        
        # –£–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –∏–∑ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏
        # –ü—Ä–∏–º–µ—Ä: "Main Story 707 5h 7m 5h 2h 45m 9h 1m" -> "5h 7m 5h 2h 45m 9h 1m"
        # –ò–ª–∏: "Main Story	1.7K	15h 31m	15h	11h 37m	25h 37m" -> "15h 31m	15h	11h 37m	25h 37m"
        time_part = re.sub(r'^[A-Za-z\s/\+]+\s+\d+(?:\.\d+)?[Kk]?\s+', '', row_text)
        if time_part == row_text:  # –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º —Å —Ç–∞–±–∞–º–∏
            time_part = re.sub(r'^[A-Za-z\s/\+]+\t+\d+(?:\.\d+)?[Kk]?\t+', '', row_text)
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º–µ–Ω–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ: Average, Median, Rushed, Leisure
        # –§–æ—Ä–º–∞—Ç: "5h 7m 5h 2h 45m 9h 1m"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –∏—â–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–∞–±—ã –∏ –ø—Ä–æ–±–µ–ª—ã)
        combined_pattern = r'(\d+h\s*\d+m|\d+(?:\.\d+)?[¬Ω]?\s*Hours?|\d+h)'
        
        # –ò—â–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ
        matches = re.findall(combined_pattern, time_part)
        for match in matches:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ç–∞–±—ã
            clean_match = re.sub(r'\s+', ' ', match.strip())
            times.append(clean_match)
        
        if len(times) < 1:
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç—Ä–æ–∫–∏
        is_single_player = any(keyword in row_text for keyword in ["Main Story", "Main + Extras", "Completionist"])
        is_multi_player = any(keyword in row_text for keyword in ["Co-Op", "Competitive"])
        
        result = {}
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–∞ –≤—Ä–µ–º–µ–Ω–∏ (Average –∏ Median)
        average_time = times[0] if len(times) > 0 else None
        median_time = times[1] if len(times) > 1 else None
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –º–µ–∂–¥—É Average –∏ Median
        final_time = calculate_average_time(average_time, median_time)
        result["t"] = round_time(final_time) if final_time else None
        
        if polled:
            result["p"] = polled
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if is_single_player and len(times) >= 4:
            # Single-Player: Average, Median, Rushed, Leisure
            result["r"] = round_time(times[2])  # Rushed (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–æ)
            result["l"] = round_time(times[3])  # Leisure (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–æ)
            
        elif is_multi_player and len(times) >= 4:
            # Multi-Player: Average, Median, Least, Most
            result["min"] = round_time(times[2])  # Least (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–æ)
            result["max"] = round_time(times[3])  # Most (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–æ)
            
        return result
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏: {e}")
        return None

def calculate_average_time(time1_str, time2_str):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –¥–≤—É–º—è –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
    try:
        def parse_time_to_minutes(time_str):
            if not time_str:
                return 0
            
            # –£–±–∏—Ä–∞–µ–º "Hours" –µ—Å–ª–∏ –µ—Å—Ç—å
            time_str = time_str.replace("Hours", "").strip()
            
            total_minutes = 0
            
            # –ü–∞—Ä—Å–∏–º —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
            if "h" in time_str and "m" in time_str:
                # –§–æ—Ä–º–∞—Ç "660h 37m"
                import re
                hours_match = re.search(r'(\d+)h', time_str)
                minutes_match = re.search(r'(\d+)m', time_str)
                
                if hours_match:
                    total_minutes += int(hours_match.group(1)) * 60
                if minutes_match:
                    total_minutes += int(minutes_match.group(1))
                    
            elif "h" in time_str:
                # –¢–æ–ª—å–∫–æ —á–∞—Å—ã "660h"
                import re
                hours_match = re.search(r'(\d+)h', time_str)
                if hours_match:
                    total_minutes = int(hours_match.group(1)) * 60
                    
            elif time_str.replace(".", "").isdigit():
                # –¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ (—á–∞—Å—ã)
                total_minutes = float(time_str) * 60
                
            return total_minutes
        
        minutes1 = parse_time_to_minutes(time1_str)
        minutes2 = parse_time_to_minutes(time2_str)
        
        if minutes1 == 0 and minutes2 == 0:
            # –ï—Å–ª–∏ –æ–±–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–≤–Ω—ã 0, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ, –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
            return round_time(time1_str or time2_str) if (time1_str or time2_str) else None
        
        if minutes2 == 0:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ, –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
            return round_time(time1_str) if time1_str else None
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ
        avg_minutes = (minutes1 + minutes2) / 2
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∞—Å—ã
        hours = avg_minutes / 60
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ
        if hours >= 1:
            if hours == int(hours):
                return f"{int(hours)}h"
            else:
                return f"{hours:.1f}h"
        else:
            return f"{int(avg_minutes)}m"
            
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return time1_str or time2_str

def extract_vs_data_from_text(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç Vs. –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    try:
        import re
        
        # –ò—â–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ "Vs." –≤ —Ñ–æ—Ä–º–∞—Ç–µ "Vs. | 1767 Hours"
        vs_match = re.search(r'Vs\.\s*\|\s*(\d+(?:\.\d+)?)\s*Hours?', text)
        if vs_match:
            time_str = vs_match.group(1)
            hours = float(time_str)
            
            if hours >= 1:
                if hours == int(hours):
                    formatted_time = f"{int(hours)}h"
                else:
                    formatted_time = f"{hours:.1f}h"
            else:
                formatted_time = f"{int(hours * 60)}m"
            
            return {"t": formatted_time}
        
        return None
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Vs. –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def extract_time_and_polled_from_row(row_text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        # –ò—â–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "Xh Ym"
        time_match = re.search(r'(\d+h\s*\d*m)', row_text)
        if time_match:
            time_str = time_match.group(1)
            rounded_time = round_time(time_str)
            
            # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ - –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–æ–∏—Å–∫
            polled_count = None
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –ò—â–µ–º —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ "Polled"
            polled_match = re.search(r'(\d+(?:\.\d+)?[Kk]?)\s*(?:Polled|polled)', row_text, re.IGNORECASE)
            if polled_match:
                polled_str = polled_match.group(1)
                polled_count = parse_polled_number(polled_str)
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –ò—â–µ–º —á–∏—Å–ª–æ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (—á–∞—Å—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º)
            if not polled_count:
                first_number_match = re.search(r'^(\d+(?:\.\d+)?[Kk]?)', row_text.strip())
                if first_number_match:
                    polled_str = first_number_match.group(1)
                    polled_count = parse_polled_number(polled_str)
            
            # –í–∞—Ä–∏–∞–Ω—Ç 3: –ò—â–µ–º –ª—é–±–æ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–µ (–µ—Å–ª–∏ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏)
            if not polled_count:
                any_number_match = re.search(r'(\d+(?:\.\d+)?[Kk]?)', row_text)
                if any_number_match:
                    polled_str = any_number_match.group(1)
                    polled_count = parse_polled_number(polled_str)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
            result = {"t": rounded_time}
            if polled_count:
                result["p"] = polled_count
            
            return result
        return None
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏: {e}")
        return None

def parse_polled_number(polled_str):
    """–ü–∞—Ä—Å–∏—Ç —á–∏—Å–ª–æ –≥–æ–ª–æ—Å–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    try:
        if 'K' in polled_str.upper():
            return int(float(polled_str.upper().replace('K', '')) * 1000)
        else:
            return int(float(polled_str))
    except:
        return None

def extract_time_from_row(row_text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    try:
        # –ò—â–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "Xh Ym"
        time_match = re.search(r'(\d+h\s*\d*m)', row_text)
        if time_match:
            time_str = time_match.group(1)
            return round_time(time_str)
        return None
    except:
        return None

def save_progress(games_data, current_index, total_games):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    progress_data = {
        "current_index": current_index,
        "total_games": total_games,
        "processed_games": len([g for g in games_data if "hltb" in g]),
        "last_updated": datetime.now().isoformat(),
        "status": "in_progress" if current_index < total_games else "completed"
    }
    
    with open(PROGRESS_FILE, "w", encoding="utf-8") as f:
        json.dump(progress_data, f, indent=2, ensure_ascii=False)

def save_results(games_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    try:
        with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
            for i, game in enumerate(games_data):
                # –ö–∞–∂–¥–∞—è –∏–≥—Ä–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –±–µ–∑ –æ—Ç—Å—Ç—É–ø–æ–≤
                if i > 0:
                    f.write("\n")
                json.dump(game, f, separators=(',', ':'), ensure_ascii=False)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        categories, total_polled, na_count = count_hltb_data(games_data)
        successful = len([g for g in games_data if "hltb" in g])
        
        log_message(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {OUTPUT_FILE}")
        log_message(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {successful}/{len(games_data)} –∏–≥—Ä —Å –¥–∞–Ω–Ω—ã–º–∏ HLTB")
        log_message(f"üìä Main Story: {categories['ms']} ({total_polled['ms']} –≥–æ–ª–æ—Å–æ–≤), Main+Extras: {categories['mpe']} ({total_polled['mpe']} –≥–æ–ª–æ—Å–æ–≤)")
        log_message(f"üìä Completionist: {categories['comp']} ({total_polled['comp']} –≥–æ–ª–æ—Å–æ–≤), All: {categories['all']} ({total_polled['all']} –≥–æ–ª–æ—Å–æ–≤)")
        log_message(f"üìä Co-Op: {categories['coop']} ({total_polled['coop']} –≥–æ–ª–æ—Å–æ–≤), Vs: {categories['vs']} ({total_polled['vs']} –≥–æ–ª–æ—Å–æ–≤)")
        log_message(f"üìä N/A (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ): {na_count} –∏–≥—Ä")
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        raise

def log_progress(current, total, start_time):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    elapsed = time.time() - start_time
    rate = current / elapsed * 60 if elapsed > 0 else 0  # –∏–≥—Ä –≤ –º–∏–Ω—É—Ç—É
    eta = (total - current) / rate if rate > 0 else 0  # –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    
    log_message(f"üìä {current}/{total} | {rate:.1f} –∏–≥—Ä/–º–∏–Ω | ETA: {eta:.0f} –º–∏–Ω")

def update_html_with_hltb(html_file, hltb_data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç HTML —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ HLTB –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º HTML
        with open(html_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º gamesList
        start = content.find('const gamesList = [')
        if start == -1:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω const gamesList –≤ HTML —Ñ–∞–π–ª–µ")
        
        end = content.find('];', start) + 2
        if end == 1:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ gamesList")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π JSON —Å HLTB –¥–∞–Ω–Ω—ã–º–∏ (–≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É)
        new_games_list = json.dumps(hltb_data, separators=(',', ':'), ensure_ascii=False)
        new_content = content[:start] + f'const gamesList = {new_games_list}' + content[end:]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π HTML
        with open(html_file, 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        log_message(f"‚úÖ HTML —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {html_file}")
        return True
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è HTML: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞"""
    print("üîß –§—É–Ω–∫—Ü–∏—è main() –≤—ã–∑–≤–∞–Ω–∞")
    log_message("üöÄ –ó–∞–ø—É—Å–∫ HLTB Worker")
    log_message(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    log_message(f"üìÑ –ò—â–µ–º —Ñ–∞–π–ª: {GAMES_LIST_FILE}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(GAMES_LIST_FILE):
        log_message(f"‚ùå –§–∞–π–ª {GAMES_LIST_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    log_message(f"‚úÖ –§–∞–π–ª {GAMES_LIST_FILE} –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(GAMES_LIST_FILE)} –±–∞–π—Ç")
    
    setup_directories()
    log_message("üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    try:
        log_message("üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä...")
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä
        games_list = extract_games_list(GAMES_LIST_FILE)
        total_games = len(games_list)
        log_message(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {total_games} –∏–≥—Ä")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å, –µ—Å–ª–∏ –µ—Å—Ç—å
        if os.path.exists(PROGRESS_FILE):
            with open(PROGRESS_FILE, "r", encoding="utf-8") as f:
                progress = json.load(f)
            start_index = progress.get("current_index", 0)
            log_message(f"üìÇ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø–æ–∑–∏—Ü–∏–∏ {start_index}")
        else:
            start_index = 0
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        log_message("üåê –ó–∞–ø—É—Å–∫–∞–µ–º Playwright...")
        with sync_playwright() as p:
            log_message("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Chromium...")
            browser = p.chromium.launch(headless=True)
            log_message("‚úÖ Chromium –∑–∞–ø—É—â–µ–Ω")
            
            log_message("üîß –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞...")
            context = browser.new_context(
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0 Safari/537.36",
                viewport={"width": 1280, "height": 800},
                locale="en-US"
            )
            log_message("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω")
            
            log_message("üìÑ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
            page = context.new_page()
            log_message("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–π –±–∞–Ω IP
            log_message("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å HowLongToBeat.com...")
            try:
                page.goto(BASE_URL, timeout=15000)
                page.wait_for_load_state("domcontentloaded", timeout=10000)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                title = page.title()
                log_message(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {title}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                search_box = page.locator('input[type="search"], input[name="q"]')
                if search_box.count() > 0:
                    log_message("‚úÖ –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ - —Å–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    log_message("‚ö†Ô∏è –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                page_content = page.content()
                if "blocked" in page_content.lower() or "access denied" in page_content.lower():
                    log_message("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ë–õ–û–ö–ò–†–û–í–ö–ê IP! –°–∞–π—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –¥–æ—Å—Ç—É–ø")
                    return
                elif "cloudflare" in page_content.lower() and "checking your browser" in page_content.lower():
                    log_message("‚ö†Ô∏è Cloudflare –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ - –∂–¥–µ–º...")
                    time.sleep(5)
                    page_content = page.content()
                    if "checking your browser" in page_content.lower():
                        log_message("‚ùå Cloudflare –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø")
                        return
                
                log_message("‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–≥—Ä")
                
            except Exception as e:
                log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞: {e}")
                log_message("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã...")
            
            start_time = time.time()
            processed_count = 0
            blocked_count = 0  # –°—á–µ—Ç—á–∏–∫ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–≥—Ä—ã
            for i in range(start_index, total_games):
                game = games_list[i]
                game_title = game["title"]
                
                log_message(f"üéÆ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {i+1}/{total_games}: {game_title}")
                
                # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ HLTB
                hltb_data = search_game_on_hltb(page, game_title)
                
                if hltb_data:
                    game["hltb"] = hltb_data
                    processed_count += 1
                    blocked_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                    log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {hltb_data}")
                else:
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º N/A –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                    game["hltb"] = {"ms": "N/A", "mpe": "N/A", "comp": "N/A", "all": "N/A"}
                    log_message(f"‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è: {game_title} - –∑–∞–ø–∏—Å–∞–Ω–æ N/A")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    page_content = page.content()
                    if "blocked" in page_content.lower() or "access denied" in page_content.lower():
                        blocked_count += 1
                        log_message(f"üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ #{blocked_count}")
                        
                        # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø–æ–¥—Ä—è–¥ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                        if blocked_count >= 3:
                            log_message("üí• –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø–æ–¥—Ä—è–¥! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É.")
                            log_message("üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ.")
                            break
                
                # –í–µ–∂–ª–∏–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —É–±—Ä–∞–Ω–∞ - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–¥–µ—Ä–∂–µ–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∏—Å–∫–∞
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ä—ã–≤
                start_time = check_break_time(start_time, i + 1)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –∏–≥—Ä
                if (i + 1) % 50 == 0:
                    save_progress(games_list, i + 1, total_games)
                    log_progress(i + 1, total_games, start_time)
            
            browser.close()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        save_results(games_list)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        successful = len([g for g in games_list if "hltb" in g])
        log_message(f"üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {successful}/{total_games} –∏–≥—Ä ({successful/total_games*100:.1f}%)")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º HTML —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        log_message("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HTML —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ HLTB...")
        if update_html_with_hltb(GAMES_LIST_FILE, games_list):
            log_message("‚úÖ HTML —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        else:
            log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å HTML —Ñ–∞–π–ª")
        
    except Exception as e:
        log_message(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    print("üéØ –ó–∞–ø—É—Å–∫–∞–µ–º main()...")
    try:
        main()
        print("‚úÖ main() –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}")
        import traceback
        traceback.print_exc()
        raise
