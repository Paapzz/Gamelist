#!/usr/bin/env python3
"""
HLTB Worker - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ª–æ–≥–∏–∫–æ–π –∏–∑ logs.py

–û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
- –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ logs.py
- –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –≥–æ–¥–∞ –∏ —Å—Ö–æ–∂–µ—Å—Ç–∏
- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–π–º–∏–Ω–≥–∏ –¥–ª—è GitHub Actions (6 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã)
- –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –≥–æ–¥–∞–º–∏
- –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–º–ø–æ–≤
- Fallback –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ HTML
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ SequenceMatcher –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏

–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è GitHub Actions:
- –£–º–µ–Ω—å—à–µ–Ω—ã —Ç–∞–π–º–∞—É—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü (12s/8s –≤–º–µ—Å—Ç–æ 17s/10s)
- –°–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ 0.4-1.2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
- –î–ª–∏–Ω–Ω—ã–µ –ø–∞—É–∑—ã –∫–∞–∂–¥—ã–µ 100 –∏–≥—Ä (30-60 —Å–µ–∫—É–Ω–¥)
- –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –¥–∞–º–ø—ã –ø—Ä–∏ HLTB_DEBUG=true
"""

print("üöÄ HLTB Worker –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

import json
import time
import random
import re
import os
from datetime import datetime
from urllib.parse import quote
from playwright.sync_api import sync_playwright

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "https://howlongtobeat.com"
GAMES_LIST_FILE = "index111.html"
OUTPUT_DIR = "hltb_data"
OUTPUT_FILE = f"{OUTPUT_DIR}/hltb_data.json"

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è GitHub Actions (6 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã)
# –£–º–µ–Ω—å—à–µ–Ω—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

# –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü (—É–º–µ–Ω—å—à–µ–Ω—ã –¥–ª—è GitHub Actions)
PAGE_GOTO_TIMEOUT_MS = 12000  # 12 —Å–µ–∫—É–Ω–¥ (–±—ã–ª–æ 17)
WAIT_SELECTOR_TIMEOUT_MS = 8000  # 8 —Å–µ–∫—É–Ω–¥ (–±—ã–ª–æ 10)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è GitHub Actions
LONG_PAUSE_EVERY = 100  # –ü–∞—É–∑–∞ –∫–∞–∂–¥—ã–µ 100 –∏–≥—Ä
LONG_PAUSE_DURATION = (30, 60)  # 30-60 —Å–µ–∫—É–Ω–¥
RANDOM_DELAY_RANGE = (0.4, 1.2)  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

def setup_directories():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print(f"üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {OUTPUT_DIR}")
    try:
        os.makedirs(OUTPUT_DIR, exist_ok=True)
        print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {OUTPUT_DIR} —Å–æ–∑–¥–∞–Ω–∞/—Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
        raise
    
def log_message(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    try:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        print(log_entry)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}")

def count_hltb_data(hltb_data):
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö HLTB –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    categories = {"ms": 0, "mpe": 0, "comp": 0, "all": 0, "coop": 0, "vs": 0}
    total_polled = {"ms": 0, "mpe": 0, "comp": 0, "all": 0, "coop": 0, "vs": 0}
    na_count = 0
    
    for game in hltb_data:
        if "hltb" in game:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ N/A –∑–∞–ø–∏—Å—å—é
            if (isinstance(game["hltb"], dict) and 
                game["hltb"].get("ms") == "N/A" and 
                game["hltb"].get("mpe") == "N/A" and 
                game["hltb"].get("comp") == "N/A" and 
                game["hltb"].get("all") == "N/A"):
                na_count += 1
                continue
            
            for category in categories:
                if category in game["hltb"] and game["hltb"][category] and game["hltb"][category] != "N/A":
                    categories[category] += 1
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤
                    if isinstance(game["hltb"][category], dict) and "p" in game["hltb"][category]:
                        total_polled[category] += game["hltb"][category]["p"]
    
    return categories, total_polled, na_count

def extract_games_list(html_file):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –∏–∑ HTML —Ñ–∞–π–ª–∞"""
    try:
        log_message(f"üìñ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª {html_file}...")
        with open(html_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        log_message(f"üìÑ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ gamesList
        log_message("üîç –ò—â–µ–º 'const gamesList = ['...")
        start = content.find('const gamesList = [')
        if start == -1:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω const gamesList –≤ HTML —Ñ–∞–π–ª–µ")
        
        log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω const gamesList –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {start}")
        
        # –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –º–∞—Å—Å–∏–≤–∞
        log_message("üîç –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –º–∞—Å—Å–∏–≤–∞...")
        bracket_count = 0
        end = start
        for i, char in enumerate(content[start:], start):
            if char == '[':
                bracket_count += 1
            elif char == ']':
                bracket_count -= 1
                if bracket_count == 0:
                    end = i + 1
                    break
        
        if bracket_count != 0:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ gamesList")
        
        log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {end}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON
        log_message("‚úÇÔ∏è –ò–∑–≤–ª–µ–∫–∞–µ–º JSON...")
        games_json = content[start:end]
        games_json = games_json.replace('const gamesList = ', '')
        
        log_message(f"üìù JSON –∏–∑–≤–ª–µ—á–µ–Ω, —Ä–∞–∑–º–µ—Ä: {len(games_json)} —Å–∏–º–≤–æ–ª–æ–≤")
        log_message("üîÑ –ü–∞—Ä—Å–∏–º JSON...")
        
        games_list = json.loads(games_json)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–≥—Ä—ã - –≥–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–µ
        for i, game in enumerate(games_list):
            if isinstance(game, dict):
                # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å title –∏ year
                if "title" in game and "year" in game:
                    continue  # –£–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ
                elif "title" in game:
                    # –ï—Å—Ç—å title, –Ω–æ –Ω–µ—Ç year - –∏—â–µ–º –≥–æ–¥ –≤ title –∫–∞–∫ fallback
                    title = game["title"]
                    years = extract_years_from_text(title)
                    game["year"] = min(years) if years else None
                else:
                    # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å
                    log_message(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–≥—Ä—ã: {game}")
            elif isinstance(game, str):
                # –ï—Å–ª–∏ –∏–≥—Ä–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –≥–æ–¥
                years = extract_years_from_text(game)
                if years:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç
                    game_obj = {"title": game, "year": min(years)}
                    games_list[i] = game_obj
                else:
                    game_obj = {"title": game, "year": None}
                    games_list[i] = game_obj
        
        log_message(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(games_list)} –∏–≥—Ä –∏–∑ HTML —Ñ–∞–π–ª–∞")
        return games_list
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä: {e}")
        raise

def parse_time_to_hours(time_str):
    """–ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Xh Ym' –∏–ª–∏ 'X Hours' –≤ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã"""
    if not time_str or time_str == "N/A":
        return 0, 0
    
    # –£–±–∏—Ä–∞–µ–º "Hours" –µ—Å–ª–∏ –µ—Å—Ç—å
    time_str = time_str.replace("Hours", "").strip()
    
    # –ò—â–µ–º —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥—Ä–æ–±–Ω—ã–µ —á–∞—Å—ã)
    hours_match = re.search(r'(\d+(?:\.\d+)?)h', time_str)
    minutes_match = re.search(r'(\d+)m', time_str)
    
    hours = float(hours_match.group(1)) if hours_match else 0
    minutes = int(minutes_match.group(1)) if minutes_match else 0
    
    # –ï—Å–ª–∏ –Ω–µ—Ç "h" –∏ "m", –Ω–æ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (—á–∞—Å—ã)
    if hours == 0 and minutes == 0:
        number_match = re.search(r'(\d+(?:\.\d+)?)', time_str)
        if number_match:
            hours = float(number_match.group(1))
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å –≤ –º–∏–Ω—É—Ç—ã
            if hours != int(hours):
                minutes = int((hours - int(hours)) * 60)
                hours = int(hours)
    
    # –ï—Å–ª–∏ —á–∞—Å—ã –¥—Ä–æ–±–Ω—ã–µ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å –≤ –º–∏–Ω—É—Ç—ã
    if hours != int(hours):
        minutes += int((hours - int(hours)) * 60)
        hours = int(hours)
    
    return hours, minutes

def round_time(time_str):
    """–û–∫—Ä—É–≥–ª—è–µ—Ç –≤—Ä–µ–º—è –∫ –±–ª–∏–∂–∞–π—à–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é"""
    if not time_str or time_str == "N/A":
        return None
    
    hours, minutes = parse_time_to_hours(time_str)
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ hours - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    hours = int(hours)
    
    if minutes <= 14:
        return f"{hours}h"           # 0-14 –º–∏–Ω ‚Üí —Ü–µ–ª—ã–π —á–∞—Å
    elif minutes <= 44:
        return f"{hours}.5h"         # 15-44 –º–∏–Ω ‚Üí +0.5 —á–∞—Å–∞
    else:
        return f"{hours + 1}h"       # 45-59 –º–∏–Ω ‚Üí +1 —á–∞—Å

def random_delay(min_seconds=None, max_seconds=None):
    """–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    if min_seconds is None or max_seconds is None:
        min_seconds, max_seconds = RANDOM_DELAY_RANGE
    delay = random.uniform(min_seconds, max_seconds)
    time.sleep(delay)

def save_debug_dumps(page, game_title, debug_type, candidates=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –¥–∞–º–ø—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ª–æ–≥–∏–∫–µ logs.py"""
    try:
        if os.getenv("HLTB_DEBUG") != "true":
            return
        
        debug_dir = "hltb_debug"
        os.makedirs(debug_dir, exist_ok=True)
        
        # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        safe_title = re.sub(r'[^\w\s-]', '', game_title).strip()
        safe_title = re.sub(r'[-\s]+', '_', safe_title)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot_path = f"{debug_dir}/{debug_type}_{safe_title}_{timestamp}.png"
        page.screenshot(path=screenshot_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML
        html_path = f"{debug_dir}/{debug_type}_{safe_title}_{timestamp}.html"
        with open(html_path, "w", encoding="utf-8") as f:
            f.write(page.content())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
        if candidates:
            candidates_path = f"{debug_dir}/{debug_type}_{safe_title}_{timestamp}_candidates.json"
            with open(candidates_path, "w", encoding="utf-8") as f:
                json.dump(candidates, f, indent=2, ensure_ascii=False)
        
        log_message(f"üîç DEBUG: –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–º–ø—ã –¥–ª—è '{game_title}' ({debug_type})")
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –¥–∞–º–ø–æ–≤: {e}")

def extract_candidates_from_html(html_content):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–∞–∫ fallback"""
    try:
        import re
        candidates = []
        
        # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—ã –≤ HTML
        pattern = r'<a[^>]*href="(/game/\d+)"[^>]*>([^<]+)</a>'
        matches = re.findall(pattern, html_content)
        
        for href, text in matches:
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç HTML —Ç–µ–≥–æ–≤
            clean_text = re.sub(r'<[^>]+>', '', text).strip()
            if clean_text:
                years = extract_years_from_text(clean_text)
                candidates.append({
                    "text": clean_text,
                    "href": href,
                    "years": years,
                    "context": clean_text
                })
        
        return candidates
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ HTML: {e}")
        return []

def extract_best_from_html_candidates(candidates, game_title, game_year):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ HTML –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
    try:
        if not candidates:
            return None, "", 0
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        best_result = choose_best_candidate(candidates, game_title, game_year)
        
        if best_result and best_result["score"] >= 0.3:
            log_message(f"üéØ –í—ã–±—Ä–∞–Ω HTML –∫–∞–Ω–¥–∏–¥–∞—Ç: '{best_result['candidate']['text']}' (—Å—Ö–æ–∂–µ—Å—Ç—å: {best_result['score']:.2f}, –ø—Ä–∏—á–∏–Ω–∞: {best_result['reason']})")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º mock –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            return MockLink(best_result["candidate"]["href"]), best_result["candidate"]["text"], best_result["score"]
        
        return None, "", 0
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ HTML –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {e}")
        return None, "", 0

class MockLink:
    """Mock –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Playwright link"""
    def __init__(self, href):
        self.href = href
    
    def get_attribute(self, attr):
        if attr == "href":
            return self.href
        return None


def search_game_on_hltb(page, game_title, game_year=None):
    """–ò—â–µ—Ç –∏–≥—Ä—É –Ω–∞ HLTB –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    max_attempts = 3
    delays = [0, (15, 18), (65, 70)]  # –ü–∞—É–∑—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –ª–æ–≥–∏–∫–µ logs.py
    alternative_titles = generate_alternative_titles(game_title, game_year)
    log_message(f"üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è '{game_title}': {alternative_titles}")
    
    for attempt in range(max_attempts):
        try:
            if attempt > 0:
                log_message(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts} –¥–ª—è '{game_title}'")
                if isinstance(delays[attempt], tuple):
                    min_delay, max_delay = delays[attempt]
                    log_message(f"‚è≥ –ü–∞—É–∑–∞ {min_delay}-{max_delay} —Å–µ–∫—É–Ω–¥...")
                    random_delay(min_delay, max_delay)
                else:
                    log_message(f"‚è≥ –ü–∞—É–∑–∞ {delays[attempt]} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(delays[attempt])
            
            # –ü—Ä–æ–±—É–µ–º –≤—Å–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            best_result = None
            best_score = 0
            best_title = ""
            best_found_title = ""
            
            for alt_title in alternative_titles:
                result_data = search_game_single_attempt(page, alt_title, game_year)
                if result_data is not None:
                    # result_data —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç (hltb_data, found_title)
                    hltb_data, found_title = result_data
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å –º–µ–∂–¥—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                    score = calculate_title_similarity(
                        clean_title_for_comparison(game_title),
                        clean_title_for_comparison(found_title) if found_title else clean_title_for_comparison(alt_title)
                    )
                    
                    if score > best_score:
                        best_score = score
                        best_result = hltb_data
                        best_title = alt_title
                        best_found_title = found_title
                    
                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (100%), –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
                    if score >= 1.0:
                        log_message(f"üéØ –ù–∞–π–¥–µ–Ω–æ –∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ! –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫.")
                        break
            
            if best_result is not None:
                if attempt > 0:
                    log_message(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–æ —Å –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1}")
                log_message(f"üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{best_found_title}' (—Å—Ö–æ–∂–µ—Å—Ç—å: {best_score:.2f})")
                return best_result
            
        except Exception as e:
            log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1} –¥–ª—è '{game_title}': {e}")
            if attempt == max_attempts - 1:
                log_message(f"üí• –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è '{game_title}'")
                return None
    
    return None

def search_game_single_attempt(page, game_title, game_year=None):
    """–û–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä—ã –Ω–∞ HLTB"""
    try:
        log_message(f"üîç –ò—â–µ–º: '{game_title}'")
        
        # –ö–æ–¥–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è URL
        safe_title = quote(game_title, safe="")
        search_url = f"{BASE_URL}/?q={safe_title}"
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞
        page.goto(search_url, timeout=PAGE_GOTO_TIMEOUT_MS)
        page.wait_for_load_state("domcontentloaded", timeout=WAIT_SELECTOR_TIMEOUT_MS)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞
        page_content = page.content()
        if "blocked" in page_content.lower() or "access denied" in page_content.lower():
            log_message("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ë–õ–û–ö–ò–†–û–í–ö–ê IP –ø—Ä–∏ –ø–æ–∏—Å–∫–µ!")
            return None
        elif "cloudflare" in page_content.lower() and "checking your browser" in page_content.lower():
            log_message("‚ö†Ô∏è Cloudflare –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ - –∂–¥–µ–º...")
            time.sleep(5)
            page_content = page.content()
            if "checking your browser" in page_content.lower():
                log_message("‚ùå Cloudflare –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫")
                return None
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ (React –∫–æ–Ω—Ç–µ–Ω—Ç)
        random_delay()  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        
        # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—ã
        game_links = page.locator('a[href^="/game/"]')
        found_count = game_links.count()
        
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç, –∂–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ
        if found_count == 0:
            random_delay()  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            found_count = game_links.count()
        
        # –ï—Å–ª–∏ –º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∂–¥–µ–º –¥–æ–ª—å—à–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        if found_count > 10:
            log_message(f"üìä –ù–∞–π–¥–µ–Ω–æ {found_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∂–¥–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É...")
            random_delay(1.5, 3.0)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            found_count = game_links.count()  # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
        
        # Fallback: –µ—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ HTML
        if found_count == 0:
            log_message("‚ö†Ô∏è –°–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ HTML...")
            candidates_from_html = extract_candidates_from_html(page.content())
            if candidates_from_html:
                log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(candidates_from_html)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ HTML")
                # –°–æ–∑–¥–∞–µ–º mock game_links –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                return extract_best_from_html_candidates(candidates_from_html, game_title, game_year)
        
        if found_count == 0:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            save_debug_dumps(page, game_title, "no_results", candidates=None)
            return None
        
        # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É—á–µ—Ç–æ–º –≥–æ–¥–∞
        best_match, best_title, similarity = find_best_match(page, game_links, game_title, game_year)
        if not best_match:
            return None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
        best_url = best_match.get_attribute("href")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä
        log_message(f"üéØ –í—ã–±—Ä–∞–Ω–æ: '{best_title}' (—Å—Ö–æ–∂–µ—Å—Ç—å: {similarity:.2f})")
        
        # –ï—Å–ª–∏ —Å—Ö–æ–∂–µ—Å—Ç—å –º–µ–Ω—å—à–µ 0.6, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
        if similarity < 0.6:
            log_message(f"‚ö†Ô∏è  –ù–∏–∑–∫–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å ({similarity:.2f}), –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
            return None
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
        full_url = f"{BASE_URL}{best_url}"
        
        page.goto(full_url, timeout=PAGE_GOTO_TIMEOUT_MS)
        page.wait_for_load_state("domcontentloaded", timeout=WAIT_SELECTOR_TIMEOUT_MS)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–≥—Ä—ã
        page_content = page.content()
        if "blocked" in page_content.lower() or "access denied" in page_content.lower():
            log_message("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ë–õ–û–ö–ò–†–û–í–ö–ê IP –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–≥—Ä—ã!")
            return None
        elif "cloudflare" in page_content.lower() and "checking your browser" in page_content.lower():
            log_message("‚ö†Ô∏è Cloudflare –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–≥—Ä—ã - –∂–¥–µ–º...")
            time.sleep(5)
            page_content = page.content()
            if "checking your browser" in page_content.lower():
                log_message("‚ùå Cloudflare –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä—ã")
                return None
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã (React –∫–æ–Ω—Ç–µ–Ω—Ç)
        random_delay()  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        hltb_data = extract_hltb_data_from_page(page)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–≥—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ª–æ–≥–∏–∫–µ logs.py
        if hltb_data and game_year:
            page_year = extract_earliest_year_from_page(page)
            if page_year:
                # –õ–æ–≥–∏–∫–∞: –µ—Å–ª–∏ –≥–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –±–æ–ª—å—à–µ –≤—Ö–æ–¥–Ω–æ–≥–æ –≥–æ–¥–∞, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–º–µ–π–∫/–ø–µ—Ä–µ–∏–∑–¥–∞–Ω–∏–µ
                # –ù–æ –º—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –µ–≥–æ, –µ—Å–ª–∏ —Å—Ö–æ–∂–µ—Å—Ç—å –±—ã–ª–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–æ–π
                if page_year > game_year:
                    log_message(f"‚ö†Ô∏è –ì–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ({page_year}) –±–æ–ª—å—à–µ –≤—Ö–æ–¥–Ω–æ–≥–æ ({game_year}) - –≤–æ–∑–º–æ–∂–µ–Ω —Ä–µ–º–µ–π–∫")
                    # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                elif page_year < game_year:
                    log_message(f"‚ÑπÔ∏è –ì–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ({page_year}) –º–µ–Ω—å—à–µ –≤—Ö–æ–¥–Ω–æ–≥–æ ({game_year}) - –≤–æ–∑–º–æ–∂–Ω–∞ —Ä–∞–Ω–Ω—è—è –≤–µ—Ä—Å–∏—è")
        
        return (hltb_data, best_title) if hltb_data else None
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä—ã '{game_title}': {e}")
        return None

def find_best_match(page, game_links, original_title, input_year=None):
    """–ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–≥—Ä —Å —É—á–µ—Ç–æ–º –≥–æ–¥–∞"""
    try:
        candidates = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å –∏—Ö –¥–∞–Ω–Ω—ã–º–∏
        for i in range(min(game_links.count(), 10)):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            link = game_links.nth(i)
            link_text = link.inner_text().strip()
            
            if link_text:
                # –ü–æ–ª—É—á–∞–µ–º href
                href = link.get_attribute("href")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç (–≥–æ–¥/–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã) –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                try:
                    # –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                    parent_element = link.locator("..")
                    context_text = parent_element.inner_text().strip()
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    years = extract_years_from_text(context_text)
                    
                    # –ï—Å–ª–∏ –≥–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –ø—Ä–æ–±—É–µ–º –∏–∑ —Å–∞–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—Å—ã–ª–∫–∏
                    if not years:
                        years = extract_years_from_text(link_text)
                    
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏
                    context_text = link_text
                    years = extract_years_from_text(link_text)
                
                candidates.append({
                    "text": link_text,
                    "href": href,
                    "years": years,  # –ì–æ–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–∏—Å–∫–∞
                    "context": context_text
                })
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ logs.py
        best_result = choose_best_candidate(candidates, original_title, input_year)
        
        if best_result and best_result["score"] >= 0.3:
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π link —ç–ª–µ–º–µ–Ω—Ç
            for i in range(min(game_links.count(), 10)):
                link = game_links.nth(i)
                if link.get_attribute("href") == best_result["candidate"]["href"]:
                    log_message(f"üéØ –í—ã–±—Ä–∞–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç: '{best_result['candidate']['text']}' (—Å—Ö–æ–∂–µ—Å—Ç—å: {best_result['score']:.2f}, –ø—Ä–∏—á–∏–Ω–∞: {best_result['reason']})")
                    return link, best_result["candidate"]["text"], best_result["score"]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –¥–∞–º–ø—ã –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏
        if best_result and best_result["score"] < 0.80:
            save_debug_dumps(page, original_title, "low_score", candidates)
        elif not best_result:
            save_debug_dumps(page, original_title, "no_candidates", candidates)
        
        return None, "", 0
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {e}")
        return game_links.first if game_links.count() > 0 else None, "", 0

def clean_title_for_comparison(title):
    """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    import re
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    cleaned = re.sub(r'[^\w\s]', '', title.lower())
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    cleaned = re.sub(r'\s+', ' ', cleaned).strip()
    return cleaned

def extract_years_from_text(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –≥–æ–¥—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    import re
    years = []
    # –ò—â–µ–º 4-–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞ –æ—Ç 1950 –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
    current_year = datetime.now().year
    year_matches = re.findall(r'\b(19[5-9]\d|20[0-2]\d)\b', text)
    for year_str in year_matches:
        year = int(year_str)
        if 1950 <= year <= current_year:
            years.append(year)
    return years

def extract_earliest_year_from_page(page):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π –≥–æ–¥ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä—ã"""
    try:
        page_content = page.content()
        years = extract_years_from_text(page_content)
        return min(years) if years else None
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–æ–¥–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return None

def choose_best_candidate(candidates, orig_title, input_year):
    """–í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ª–æ–≥–∏–∫–µ –∏–∑ logs.py"""
    try:
        if not candidates:
            return None
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        scored_candidates = []
        for candidate in candidates:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SequenceMatcher –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏
            score = calculate_sequence_similarity(orig_title, candidate["text"])
            
            # –ë–æ–Ω—É—Å +0.02, –µ—Å–ª–∏ normalized(original) —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥—Å—Ç—Ä–æ–∫–æ–π normalized(candidate_text)
            if clean_title_for_comparison(orig_title) in clean_title_for_comparison(candidate["text"]):
                score += 0.02
            
            # earliest_year = min(candidate.years) –µ—Å–ª–∏ –µ—Å—Ç—å –≥–æ–¥—ã
            earliest_year = min(candidate["years"]) if candidate["years"] else None
            
            scored_candidates.append({
                "candidate": candidate,
                "score": score,
                "earliest_year": earliest_year
            })
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ score desc, tie-break –ø–æ earliest_year (–º–µ–Ω—å—à–µ ‚Äî –ª—É—á—à–µ)
        scored_candidates.sort(key=lambda x: (-x["score"], x["earliest_year"] if x["earliest_year"] else 9999))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ambiguous –µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å score >= 0.80
        high_score_candidates = [c for c in scored_candidates if c["score"] >= 0.80]
        ambiguous = len(high_score_candidates) > 1
        
        # –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–Ω—è—Ç–∏—è, –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        for candidate_data in scored_candidates:
            score = candidate_data["score"]
            candidate = candidate_data["candidate"]
            earliest_year = candidate_data["earliest_year"]
            
            # Rule 1: score >= 0.95 ‚Üí –ø—Ä–∏–Ω—è—Ç—å
            if score >= 0.95:
                return {
                    "candidate": candidate,
                    "score": score,
                    "earliest_year": earliest_year,
                    "reason": "score_very_high"
                }
            
            # Rule 2: score >= 0.88 and candidate_earliest_year <= input_year ‚Üí –ø—Ä–∏–Ω—è—Ç—å
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–æ–¥–æ–≤—É—é –ª–æ–≥–∏–∫—É –∞–∫—Ç–∏–≤–Ω–µ–µ –∫–æ–≥–¥–∞ ambiguous == True –∏–ª–∏ –∫–æ–≥–¥–∞ candidate –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ orig: subtitle
            if score >= 0.88 and input_year and earliest_year and earliest_year <= input_year:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–≥–ª—è–¥–∏—Ç –ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç –∫–∞–∫ orig: subtitle
                looks_like_subtitle = (":" in candidate["text"] and 
                                     clean_title_for_comparison(orig_title) in clean_title_for_comparison(candidate["text"]))
                
                if ambiguous or looks_like_subtitle:
                    return {
                        "candidate": candidate,
                        "score": score,
                        "earliest_year": earliest_year,
                        "reason": "score_high_and_year_ok"
                    }
            
            # Rule 3: score >= 0.92 and candidate contains orig substring ‚Üí –ø—Ä–∏–Ω—è—Ç—å
            if score >= 0.92 and clean_title_for_comparison(orig_title) in clean_title_for_comparison(candidate["text"]):
                return {
                    "candidate": candidate,
                    "score": score,
                    "earliest_year": earliest_year,
                    "reason": "score_high_and_contains_original"
                }
        
        # Rule 4 (fallback): –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –∏–∑ –≤—ã—à–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ ‚Äî –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π candidate
        best = scored_candidates[0]
        
        # –ï—Å–ª–∏ —Ç–æ–ø-2 –ø–æ—á—Ç–∏ —Ä–∞–≤–Ω—ã (diff < 0.02) ‚Äî –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≥–æ —É –∫–æ–≥–æ –Ω–∞–∏–º–µ–Ω—å—à–∏–π earliest_year
        if len(scored_candidates) >= 2:
            second_best = scored_candidates[1]
            if abs(best["score"] - second_best["score"]) < 0.02:
                if (best["earliest_year"] and second_best["earliest_year"] and 
                    second_best["earliest_year"] < best["earliest_year"]):
                    best = second_best
        
        return {
            "candidate": best["candidate"],
            "score": best["score"],
            "earliest_year": best["earliest_year"],
            "reason": "fallback_best_score"
        }
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {e}")
        return None

def calculate_sequence_similarity(title1, title2):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑—É—è SequenceMatcher –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    try:
        from difflib import SequenceMatcher
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        normalized1 = normalize_title_for_comparison(title1)
        normalized2 = normalize_title_for_comparison(title2)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º SequenceMatcher –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏
        similarity = SequenceMatcher(None, normalized1, normalized2).ratio()
        
        return similarity
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ö–æ–∂–µ—Å—Ç–∏ SequenceMatcher: {e}")
        # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
        return calculate_title_similarity(title1, title2)


def convert_arabic_to_roman(num_str):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—Ä–∞–±—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –≤ —Ä–∏–º—Å–∫–∏–µ"""
    try:
        num = int(num_str)
        if num == 1:
            return "I"
        elif num == 2:
            return "II"
        elif num == 3:
            return "III"
        elif num == 4:
            return "IV"
        elif num == 5:
            return "V"
        elif num == 6:
            return "VI"
        elif num == 7:
            return "VII"
        elif num == 8:
            return "VIII"
        elif num == 9:
            return "IX"
        elif num == 10:
            return "X"
        else:
            return num_str
    except:
        return num_str

def generate_alternative_titles(game_title, game_year=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ª–æ–≥–∏–∫–µ –∏–∑ logs.py"""
    alternatives = []
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ–¥, –¥–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç —Å –≥–æ–¥–æ–º –≤ –Ω–∞—á–∞–ª–æ (—Å–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
    if game_year:
        alternatives.append(f"{game_title} {game_year}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    alternatives.append(game_title)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å "/" —Å–æ–≥–ª–∞—Å–Ω–æ –ª–æ–≥–∏–∫–µ logs.py
    if "/" in game_title:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∫—Ä—É–∂–µ–Ω –ª–∏ —Å–ª—ç—à –ø—Ä–æ–±–µ–ª–∞–º–∏ (A / B)
        if " / " in game_title:
            parts = [part.strip() for part in game_title.split(" / ")]
            
            # –î–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º sub-variants
            for part in parts:
                if part:
                    # 1. part (–æ—Ä–∏–≥–∏–Ω–∞–ª)
                    if part not in alternatives:
                        alternatives.append(part)
                    
                    # 2. part_without_parentheses
                    part_without_parens = remove_parentheses(part)
                    if part_without_parens != part and part_without_parens not in alternatives:
                        alternatives.append(part_without_parens)
                    
                    # 3. —Ä–∏–º—Å–∫–æ‚Üî–∞—Ä–∞–±—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                    roman_variants = generate_roman_arabic_variants(part)
                    for variant in roman_variants:
                        if variant not in alternatives:
                            alternatives.append(variant)
                    
                    # 4. ampersand-variants
                    ampersand_variants = generate_ampersand_variants(part)
                    for variant in ampersand_variants:
                        if variant not in alternatives:
                            alternatives.append(variant)
            
            # –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤–ª—è–µ–º full-title-variants
            full_variants = generate_full_title_variants(game_title)
            for variant in full_variants:
                if variant not in alternatives:
                    alternatives.append(variant)
        
        else:
            # –°–ª—ç—à –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ (A/B/C)
            parts = [part.strip() for part in game_title.split("/")]
            if len(parts) >= 2:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º Base (–ø—Ä–µ—Ñ–∏–∫—Å)
                base = determine_base_from_parts(parts)
                
                # 1. –ü–∞—Ä–Ω—ã–µ: Base A and B, Base B and C, ...
                for i in range(len(parts) - 1):
                    for j in range(i + 1, len(parts)):
                        pair_variant = f"{base} {parts[i]} and {parts[j]}"
                        if pair_variant not in alternatives:
                            alternatives.append(pair_variant)
                
                # 2. –û–¥–∏–Ω–æ—á–Ω—ã–µ: Base A, Base B, Base C
                for part in parts:
                    single_variant = f"{base} {part}"
                    if single_variant not in alternatives:
                        alternatives.append(single_variant)
                
                # 3. –¢—Ä–æ–π–Ω—ã–µ / –≤—Å–µ –≤–º–µ—Å—Ç–µ
                if len(parts) >= 3:
                    all_together = f"{base} {' and '.join(parts)}"
                    if all_together not in alternatives:
                        alternatives.append(all_together)
                
                # 4. –ó–∞—Ç–µ–º without_parentheses, —Ä–∏–º—Å–∫–∏–µ/ampersand –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ title
                full_variants = generate_full_title_variants(game_title)
                for variant in full_variants:
                    if variant not in alternatives:
                        alternatives.append(variant)
    
    else:
        # –ï—Å–ª–∏ —Å–ª—ç—à–∞ –Ω–µ—Ç: title, title_without_parentheses, —Ä–∏–º—Å–∫–∏–µ‚Üî–∞—Ä–∞–±—Å–∫–∏–µ, ampersand-variants
        # 1. title_without_parentheses
        without_parens = remove_parentheses(game_title)
        if without_parens != game_title and without_parens not in alternatives:
            alternatives.append(without_parens)
        
        # 2. —Ä–∏–º—Å–∫–æ‚Üî–∞—Ä–∞–±—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        roman_variants = generate_roman_arabic_variants(game_title)
        for variant in roman_variants:
            if variant not in alternatives:
                alternatives.append(variant)
        
        # 3. ampersand-variants
        ampersand_variants = generate_ampersand_variants(game_title)
        for variant in ampersand_variants:
            if variant not in alternatives:
                alternatives.append(variant)
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
    seen = set()
    unique_alternatives = []
    for alt in alternatives:
        if alt not in seen:
            seen.add(alt)
            unique_alternatives.append(alt)
    
    return unique_alternatives

def remove_parentheses(text):
    """–£–¥–∞–ª—è–µ—Ç —Å–∫–æ–±–∫–∏ –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"""
    import re
    return re.sub(r'\s*\([^)]*\)', '', text).strip()

def generate_roman_arabic_variants(text):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å —Ä–∏–º—Å–∫–∏–º–∏ –∏ –∞—Ä–∞–±—Å–∫–∏–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏"""
    variants = []
    import re
    
    # –ê—Ä–∞–±—Å–∫–∏–µ -> —Ä–∏–º—Å–∫–∏–µ
    arabic_pattern = r'(\b\d+\b)'
    matches = re.findall(arabic_pattern, text)
    
    for match in matches:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —á–∞—Å—Ç—å –¥—Ä–æ–±–Ω–æ–≥–æ —á–∏—Å–ª–∞
        context_pattern = r'(\b' + match + r'\b)'
        context_matches = re.finditer(context_pattern, text)
        
        for context_match in context_matches:
            start_pos = context_match.start()
            end_pos = context_match.end()
            
            before_char = text[start_pos - 1] if start_pos > 0 else ''
            after_char = text[end_pos] if end_pos < len(text) else ''
            
            if before_char != '.' and after_char != '.':
                roman = convert_arabic_to_roman(match)
                if roman != match:
                    variant = re.sub(r'\b' + match + r'\b', roman, text)
                    variants.append(variant)
                break
    
    # –†–∏–º—Å–∫–∏–µ -> –∞—Ä–∞–±—Å–∫–∏–µ
    roman_to_arabic = {
        'I': '1', 'II': '2', 'III': '3', 'IV': '4', 'V': '5',
        'VI': '6', 'VII': '7', 'VIII': '8', 'IX': '9', 'X': '10'
    }
    
    for roman, arabic in roman_to_arabic.items():
        pattern = r'\b' + roman + r'\b'
        if re.search(pattern, text):
            variant = re.sub(pattern, arabic, text)
            variants.append(variant)
    
    return variants

def generate_ampersand_variants(text):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –∞–º–ø–µ—Ä—Å–∞–Ω–¥–æ–º"""
    variants = []
        import re
        
    if "&" in text and "(" in text and ")" in text:
        # –í–∞—Ä–∏–∞–Ω—Ç 1: —É–±–∏—Ä–∞–µ–º —Å–∫–æ–±–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é
        without_brackets = re.sub(r'\s*\([^)]*\)', '', text).strip()
        if without_brackets and without_brackets != text:
            variants.append(without_brackets)
        
        # –í–∞—Ä–∏–∞–Ω—Ç 2: –∑–∞–º–µ–Ω—è–µ–º "&" –Ω–∞ "and" –≤ —Å–∫–æ–±–∫–∞—Ö
        with_and = re.sub(r'\([^)]*&([^)]*)\)', r'(and\1)', text)
        if with_and != text:
            variants.append(with_and)
        
        # –í–∞—Ä–∏–∞–Ω—Ç 3: —É–±–∏—Ä–∞–µ–º —Å–∫–æ–±–∫–∏ –∏ –∑–∞–º–µ–Ω—è–µ–º "&" –Ω–∞ "and"
        with_and_no_brackets = re.sub(r'\s*\([^)]*&([^)]*)\)', r' and\1', text).strip()
        if with_and_no_brackets and with_and_no_brackets != text:
            variants.append(with_and_no_brackets)
        
        # –í–∞—Ä–∏–∞–Ω—Ç 4: —É–±–∏—Ä–∞–µ–º —Å–∫–æ–±–∫–∏ –∏ –∑–∞–º–µ–Ω—è–µ–º "&" –Ω–∞ "&" (–±–µ–∑ —Å–∫–æ–±–æ–∫)
        with_ampersand_no_brackets = re.sub(r'\s*\(([^)]*&[^)]*)\)', r' \1', text).strip()
        if with_ampersand_no_brackets and with_ampersand_no_brackets != text:
            variants.append(with_ampersand_no_brackets)
    
    elif "(" in text and ")" in text:
    # –î–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π —Å –ª—é–±—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏ (–±–µ–∑ "&") –¥–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ —Å–∫–æ–±–æ–∫
        without_brackets = re.sub(r'\s*\([^)]*\)', '', text).strip()
        if without_brackets and without_brackets != text:
            variants.append(without_brackets)
    
    return variants

def determine_base_from_parts(parts):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–∞–∑–æ–≤—É—é —á–∞—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ —á–∞—Å—Ç–µ–π"""
    if not parts:
        return ""
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –∏ —É–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –∫–∞–∫ –±–∞–∑–æ–≤—É—é —á–∞—Å—Ç—å
    first_part = parts[0]
    if " " in first_part:
        words = first_part.split()
        if len(words) >= 2:
            return " ".join(words[:-1])
    
    return first_part

def generate_full_title_variants(title):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    variants = []
    
    # without_parentheses
    without_parens = remove_parentheses(title)
    if without_parens != title:
        variants.append(without_parens)
    
    # —Ä–∏–º—Å–∫–∏–µ/–∞—Ä–∞–±—Å–∫–∏–µ
    roman_variants = generate_roman_arabic_variants(title)
    variants.extend(roman_variants)
    
    # ampersand
    ampersand_variants = generate_ampersand_variants(title)
    variants.extend(ampersand_variants)
    
    return variants

def calculate_title_similarity(title1, title2):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏–≥—Ä"""
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –≤ –∞—Ä–∞–±—Å–∫–∏–µ)
        normalized1 = normalize_title_for_comparison(title1)
        normalized2 = normalize_title_for_comparison(title2)
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å—Ö–æ–∂–µ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö —Å–ª–æ–≤
        words1 = set(normalized1.split())
        words2 = set(normalized2.split())
        
        if not words1 or not words2:
            return 0.0
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–ª–æ–≤
        common_words = words1.intersection(words2)
        total_words = words1.union(words2)
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å –ø–æ —Å–ª–æ–≤–∞–º
        word_similarity = len(common_words) / len(total_words)
        
        # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if normalized1 == normalized2:
            return 1.0
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –±–æ–ª—å—à—É—é —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–ª–∏–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–π
        words1_count = len(words1)
        words2_count = len(words2)
        if words1_count > 0 and words2_count > 0:
            length_ratio = min(words1_count, words2_count) / max(words1_count, words2_count)
            if length_ratio < 0.8:  # –ï—Å–ª–∏ –æ–¥–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–æ—á–µ –¥—Ä—É–≥–æ–≥–æ
                word_similarity *= 0.6  # –£–º–µ–Ω—å—à–∞–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å –Ω–∞ 40%
            elif length_ratio < 0.9:  # –ï—Å–ª–∏ –æ–¥–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–º–Ω–æ–≥–æ –∫–æ—Ä–æ—á–µ
                word_similarity *= 0.8  # –£–º–µ–Ω—å—à–∞–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å –Ω–∞ 20%
        
        # –ë–æ–Ω—É—Å –∑–∞ –≤–∫–ª—é—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –≤ –¥—Ä—É–≥–æ–µ (–Ω–æ –Ω–µ –ø–æ–ª–Ω—ã–π)
        if normalized1 in normalized2 or normalized2 in normalized1:
            # –ï—Å–ª–∏ –æ–¥–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥—Å—Ç—Ä–æ–∫–æ–π –¥—Ä—É–≥–æ–≥–æ, –Ω–æ –Ω–µ —Ä–∞–≤–Ω–æ –µ–º—É
            if normalized1 != normalized2:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–¥–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–æ—á–µ –¥—Ä—É–≥–æ–≥–æ
                shorter = min(len(normalized1), len(normalized2))
                longer = max(len(normalized1), len(normalized2))
                ratio = shorter / longer
                
                # –ë–æ–Ω—É—Å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –¥–ª–∏–Ω
                if ratio >= 0.8:  # –ü–æ—á—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–æ –¥–ª–∏–Ω–µ
                    word_similarity += 0.05
                elif ratio >= 0.6:  # –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
                    word_similarity += 0.03
                else:  # –û–¥–Ω–æ –Ω–∞–º–Ω–æ–≥–æ –∫–æ—Ä–æ—á–µ –¥—Ä—É–≥–æ–≥–æ
                    word_similarity += 0.01
            else:
                word_similarity += 0.2  # –ü–æ–ª–Ω—ã–π –±–æ–Ω—É—Å –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        
        # –ë–æ–Ω—É—Å –∑–∞ –æ–±—â–∏–µ –¥–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (–±–æ–ª–µ–µ 4 —Å–∏–º–≤–æ–ª–æ–≤) - —É–º–µ–Ω—å—à–µ–Ω
        long_common = [w for w in common_words if len(w) > 4]
        if long_common:
            word_similarity += 0.02 * len(long_common)  # –£–º–µ–Ω—å—à–µ–Ω —Å 0.1 –¥–æ 0.02
        
        return min(word_similarity, 1.0)
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ö–æ–∂–µ—Å—Ç–∏: {e}")
        return 0.0

def normalize_title_for_comparison(title):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—è —Ä–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –≤ –∞—Ä–∞–±—Å–∫–∏–µ"""
    try:
        import re
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ä–∏–º—Å–∫–∏—Ö —Ü–∏—Ñ—Ä –≤ –∞—Ä–∞–±—Å–∫–∏–µ
        roman_to_arabic = {
            'I': '1', 'II': '2', 'III': '3', 'IV': '4', 'V': '5',
            'VI': '6', 'VII': '7', 'VIII': '8', 'IX': '9', 'X': '10'
        }
        
        # –ó–∞–º–µ–Ω—è–µ–º —Ä–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –Ω–∞ –∞—Ä–∞–±—Å–∫–∏–µ
        normalized = title
        for roman, arabic in roman_to_arabic.items():
            # –ò—â–µ–º —Ä–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
            pattern = r'\b' + roman + r'\b'
            normalized = re.sub(pattern, arabic, normalized)
        
        return normalized
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
        return title

def extract_gamestats_blocks(page):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ GameStats –±–ª–æ–∫–æ–≤ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫)"""
    try:
        # –ò—â–µ–º GameStats –±–ª–æ–∫–∏
        gamestats_selectors = [
            'div[class*="GameStats_game_times"]',
            'div[class*="GameStats"]',
            '.GameStats_game_times',
            '.GameStats'
        ]
        
        for selector in gamestats_selectors:
            try:
                blocks = page.locator(selector)
                count = blocks.count()
                
                if count > 0:
                    for i in range(count):
                        block = blocks.nth(i)
                        block_text = block.inner_text()
                        
                        # –ò—â–µ–º ul/li —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                        ul_elements = block.locator('ul')
                        if ul_elements.count() > 0:
                            li_elements = ul_elements.locator('li')
                            
                            for j in range(li_elements.count()):
                                li = li_elements.nth(j)
                                li_text = li.inner_text()
                                
                                # –ò—â–µ–º h4 (–∫–∞—Ç–µ–≥–æ—Ä–∏—è) –∏ h5 (–≤—Ä–µ–º—è)
                                h4 = li.locator('h4')
                                h5 = li.locator('h5')
                                
                                if h4.count() > 0 and h5.count() > 0:
                                    category = h4.inner_text().strip()
                                    time_value = h5.inner_text().strip()
                                    
                                    # –ü–∞—Ä—Å–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –≤—Ä–µ–º—è
                                    parsed_data = parse_gamestats_pair(category, time_value)
                                    if parsed_data:
                                        return parsed_data
                        
            except Exception as e:
                continue
        
        return None
        
    except Exception as e:
        return None

def parse_gamestats_pair(category, time_value):
    """–ü–∞—Ä—Å–∏—Ç –ø–∞—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è-–≤—Ä–µ–º—è –∏–∑ GameStats"""
    try:
        category_lower = category.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if 'co-op' in category_lower or 'coop' in category_lower:
            category_key = 'coop'
        elif 'vs' in category_lower or 'competitive' in category_lower:
            category_key = 'vs'
        elif 'single' in category_lower and 'player' in category_lower:
            category_key = 'ms'  # Main Story –¥–ª—è single-player
        else:
            return None
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        if time_value == '--' or time_value == 'N/A' or not time_value:
            parsed_time = 'N/A'
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º "634 Hours" -> "634h"
            if 'Hours' in time_value:
                hours_match = re.search(r'(\d+(?:\.\d+)?)', time_value)
                if hours_match:
                    hours = float(hours_match.group(1))
                    parsed_time = f"{int(hours)}h" if hours == int(hours) else f"{hours}h"
                else:
                    parsed_time = time_value
            else:
                parsed_time = time_value
        
        result = {category_key: {"t": parsed_time}}
        return result
        
    except Exception as e:
        return None

def extract_hltb_data_from_page(page):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ HLTB —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä—ã"""
    try:
        hltb_data = {}
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ò—â–µ–º GameStats –±–ª–æ–∫–∏ (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫)
        gamestats_data = extract_gamestats_blocks(page)
        if gamestats_data:
            hltb_data.update(gamestats_data)
            log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã GameStats –¥–∞–Ω–Ω—ã–µ: {gamestats_data}")
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ò—â–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        tables = page.locator("table")
        table_count = tables.count()
        
        for table_idx in range(table_count):
            try:
                table = tables.nth(table_idx)
                table_text = table.inner_text()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω—É–∂–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                if any(keyword in table_text for keyword in ["Main Story", "Main + Extras", "Completionist", "Co-Op", "Competitive", "Vs."]):
                    log_message(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É {table_idx + 1}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                    rows = table.locator("tr")
                    row_count = rows.count()
                    
                    for row_idx in range(row_count):
                        try:
                            row_text = rows.nth(row_idx).inner_text().strip()
                            
                            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)
                            if "Main Story" in row_text and "ms" not in hltb_data:
                                hltb_data["ms"] = extract_hltb_row_data(row_text)
                            elif "Main + Extras" in row_text and "mpe" not in hltb_data:
                                hltb_data["mpe"] = extract_hltb_row_data(row_text)
                            elif "Completionist" in row_text and "comp" not in hltb_data:
                                hltb_data["comp"] = extract_hltb_row_data(row_text)
                            elif "Co-Op" in row_text and "coop" not in hltb_data:
                                hltb_data["coop"] = extract_hltb_row_data(row_text)
                            elif "Competitive" in row_text and "vs" not in hltb_data:
                                hltb_data["vs"] = extract_hltb_row_data(row_text)
                                
                        except Exception as e:
                            log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {row_idx}: {e}")
                            continue
                            
            except Exception as e:
                log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table_idx}: {e}")
                continue
        
        # –ò—â–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ —Å "Vs." (–Ω–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö)
        try:
            vs_elements = page.locator('text="Vs."')
            vs_count = vs_elements.count()
            if vs_count > 0:
                for i in range(min(3, vs_count)):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –≤—Ö–æ–∂–¥–µ–Ω–∏—è
                    try:
                        vs_element = vs_elements.nth(i)
                        surrounding_text = vs_element.evaluate("(e) => (e.closest('div')||e.parentElement||e).innerText")
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–±–ª–∏—Ü–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Ä–µ–º—è, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                        if "Hours" in surrounding_text and "table" not in str(vs_element.locator("..").get_attribute("tagName")).lower():
                            vs_data = extract_vs_data_from_text(surrounding_text)
                            if vs_data and "vs" not in hltb_data:
                                hltb_data["vs"] = vs_data
                                log_message(f"üéØ –ù–∞–π–¥–µ–Ω—ã Vs. –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –±–ª–æ–∫–µ: {vs_data}")
                    except Exception as e:
                        log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Vs. –±–ª–æ–∫–∞ {i}: {e}")
                        continue
        except Exception as e:
            log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Vs. –±–ª–æ–∫–æ–≤: {e}")
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ Vs. –¥–∞–Ω–Ω—ã–µ (—á–∏—Å—Ç–æ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–Ω—ã–µ –∏–≥—Ä—ã), –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if hltb_data and "vs" in hltb_data and len(hltb_data) == 1:
            log_message("üéÆ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —á–∏—Å—Ç–æ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–Ω–∞—è –∏–≥—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º Vs. –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
            # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ vs
        elif hltb_data and "vs" in hltb_data and len(hltb_data) == 2 and "stores" in hltb_data:
            log_message("üéÆ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —á–∏—Å—Ç–æ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–Ω–∞—è –∏–≥—Ä–∞ —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏")
            # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ vs –∏ stores
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã
        store_links = extract_store_links(page)
        if store_links:
            hltb_data["stores"] = store_links
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if hltb_data:
            categories = []
            for key, value in hltb_data.items():
                if key != "stores" and isinstance(value, dict) and "t" in value:
                    categories.append(f"{key}: {value['t']}")
            if categories:
                log_message(f"üìä –ù–∞–π–¥–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(categories)}")
        
        return hltb_data if hltb_data else None
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return None

def extract_store_links(page):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä—ã"""
    try:
        store_links = {}
        
        # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã
        store_selectors = {
            "steam": "a[href*='store.steampowered.com']",
            "epic": "a[href*='epicgames.com']",
            "gog": "a[href*='gog.com']",
            "humble": "a[href*='humblebundle.com']",
            "itch": "a[href*='itch.io']",
            "origin": "a[href*='origin.com']",
            "uplay": "a[href*='uplay.com']",
            "battlenet": "a[href*='battle.net']",
            "psn": "a[href*='playstation.com']",
            "xbox": "a[href*='xbox.com']",
            "nintendo": "a[href*='nintendo.com']"
        }
        
        for store_name, selector in store_selectors.items():
            try:
                link_element = page.locator(selector).first
                if link_element.count() > 0:
                    href = link_element.get_attribute("href")
                    if href:
                        # –û—á–∏—â–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è GOG
                        if store_name == "gog" and "adtraction.com" in href:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π
                            import re
                            match = re.search(r'url=([^&]+)', href)
                            if match:
                                href = match.group(1)
                                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL
                                from urllib.parse import unquote
                                href = unquote(href)
                        
                        store_links[store_name] = href
            except:
                continue
        
        if store_links:
            log_message(f"üõí –ù–∞–π–¥–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã: {list(store_links.keys())}")
        
        return store_links if store_links else None
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã: {e}")
        return None

def extract_hltb_row_data(row_text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã HLTB (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)"""
    try:
        import re
        
        # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º K —Ñ–æ—Ä–º–∞—Ç –∏ —Ç–∞–±—ã)
        # –ü—Ä–∏–º–µ—Ä—ã: "Main Story 54 660h 37m" -> 54, "Main Story	1.7K	15h 31m" -> 1700
        polled_match = re.search(r'^[A-Za-z\s/\+]+\s+(\d+(?:\.\d+)?[Kk]?)\s+', row_text)
        if not polled_match:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Å —Ç–∞–±–∞–º–∏: "Main Story	1.7K	15h 31m"
            polled_match = re.search(r'^[A-Za-z\s/\+]+\t+(\d+(?:\.\d+)?[Kk]?)\t+', row_text)
        if not polled_match:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫: —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
            polled_match = re.search(r'(\d+(?:\.\d+)?[Kk]?)\s+(?:\d+h|\d+\s*Hours?)', row_text)
        
        polled = None
        if polled_match:
            polled_str = polled_match.group(1)
            if 'K' in polled_str.upper():
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º K –≤ —Ç—ã—Å—è—á–∏
                number = float(polled_str.replace('K', '').replace('k', ''))
                polled = int(number * 1000)
            else:
                polled = int(float(polled_str))
        
        # –ò—â–µ–º –≤—Ä–µ–º–µ–Ω–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        times = []
        
        # –£–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –∏–∑ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏
        # –ü—Ä–∏–º–µ—Ä: "Main Story 707 5h 7m 5h 2h 45m 9h 1m" -> "5h 7m 5h 2h 45m 9h 1m"
        # –ò–ª–∏: "Main Story	1.7K	15h 31m	15h	11h 37m	25h 37m" -> "15h 31m	15h	11h 37m	25h 37m"
        time_part = re.sub(r'^[A-Za-z\s/\+]+\s+\d+(?:\.\d+)?[Kk]?\s+', '', row_text)
        if time_part == row_text:  # –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º —Å —Ç–∞–±–∞–º–∏
            time_part = re.sub(r'^[A-Za-z\s/\+]+\t+\d+(?:\.\d+)?[Kk]?\t+', '', row_text)
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º–µ–Ω–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ: Average, Median, Rushed, Leisure
        # –§–æ—Ä–º–∞—Ç: "5h 7m 5h 2h 45m 9h 1m"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –∏—â–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–∞–±—ã –∏ –ø—Ä–æ–±–µ–ª—ã)
        combined_pattern = r'(\d+h\s*\d+m|\d+(?:\.\d+)?[¬Ω]?\s*Hours?|\d+h)'
        
        # –ò—â–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ
        matches = re.findall(combined_pattern, time_part)
        for match in matches:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ç–∞–±—ã
            clean_match = re.sub(r'\s+', ' ', match.strip())
            times.append(clean_match)
        
        if len(times) < 1:
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç—Ä–æ–∫–∏
        is_single_player = any(keyword in row_text for keyword in ["Main Story", "Main + Extras", "Completionist"])
        is_multi_player = any(keyword in row_text for keyword in ["Co-Op", "Competitive"])
        
        result = {}
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–∞ –≤—Ä–µ–º–µ–Ω–∏ (Average –∏ Median)
        average_time = times[0] if len(times) > 0 else None
        median_time = times[1] if len(times) > 1 else None
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –º–µ–∂–¥—É Average –∏ Median
        final_time = calculate_average_time(average_time, median_time)
        result["t"] = final_time if final_time else None
        
        if polled:
            result["p"] = polled
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if is_single_player and len(times) >= 4:
            # Single-Player: Average, Median, Rushed, Leisure
            result["r"] = round_time(times[2])  # Rushed (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–æ)
            result["l"] = round_time(times[3])  # Leisure (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–æ)
            
        elif is_multi_player and len(times) >= 4:
            # Multi-Player: Average, Median, Least, Most
            result["min"] = round_time(times[2])  # Least (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–æ)
            result["max"] = round_time(times[3])  # Most (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–æ)
            
        return result
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏: {e}")
        return None

def calculate_average_time(time1_str, time2_str):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –¥–≤—É–º—è –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
    try:
        def parse_time_to_minutes(time_str):
            if not time_str:
                return 0
            
            # –£–±–∏—Ä–∞–µ–º "Hours" –µ—Å–ª–∏ –µ—Å—Ç—å
            time_str = time_str.replace("Hours", "").strip()
            
            total_minutes = 0
            
            # –ü–∞—Ä—Å–∏–º —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
            if "h" in time_str and "m" in time_str:
                # –§–æ—Ä–º–∞—Ç "660h 37m"
                import re
                hours_match = re.search(r'(\d+)h', time_str)
                minutes_match = re.search(r'(\d+)m', time_str)
                
                if hours_match:
                    total_minutes += int(hours_match.group(1)) * 60
                if minutes_match:
                    total_minutes += int(minutes_match.group(1))
                    
            elif "h" in time_str:
                # –¢–æ–ª—å–∫–æ —á–∞—Å—ã "660h"
                import re
                hours_match = re.search(r'(\d+)h', time_str)
                if hours_match:
                    total_minutes = int(hours_match.group(1)) * 60
                    
            elif time_str.replace(".", "").isdigit():
                # –¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ (—á–∞—Å—ã)
                total_minutes = float(time_str) * 60
                
            return total_minutes
        
        minutes1 = parse_time_to_minutes(time1_str)
        minutes2 = parse_time_to_minutes(time2_str)
        
        if minutes1 == 0 and minutes2 == 0:
            # –ï—Å–ª–∏ –æ–±–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–≤–Ω—ã 0, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ, –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
            return round_time(time1_str or time2_str) if (time1_str or time2_str) else None
        
        if minutes2 == 0:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ, –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
            return round_time(time1_str) if time1_str else None
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ
        avg_minutes = (minutes1 + minutes2) / 2
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∞—Å—ã
        hours = avg_minutes / 60
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ round_time
        if hours >= 1:
            return round_time(f"{hours:.1f}h")
        else:
            return f"{int(avg_minutes)}m"
            
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return time1_str or time2_str

def extract_vs_data_from_text(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç Vs. –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    try:
        import re
        
        # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è —á–∏—Ç–∞–µ–º–æ–≥–æ –ª–æ–≥–∞
        clean_text = text.replace('\n', ' ').replace('\r', ' ')
        log_message(f"üîç –ò—â–µ–º Vs. –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ: '{clean_text[:200]}...'")
        
        # –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã Vs. –¥–∞–Ω–Ω—ã—Ö
        patterns = [
            r'Vs\.\s*\|\s*(\d+(?:\.\d+)?)\s*Hours?',  # "Vs. | 1767 Hours"
            r'Vs\.\s+(\d+(?:\.\d+)?)\s*Hours?',        # "Vs. 1767 Hours"
            r'Vs\.\s*(\d+(?:\.\d+)?)\s*Hours?',        # "Vs.1767 Hours"
            r'Vs\.\s*(\d+(?:\.\d+)?[¬Ω]?)\s*Hours?',    # "Vs. 1767¬Ω Hours"
        ]
        
        for pattern in patterns:
            vs_match = re.search(pattern, text)
            if vs_match:
                time_str = vs_match.group(1)
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä–æ–±–Ω—ã–µ —á–∞—Å—ã —Å ¬Ω
                if '¬Ω' in time_str:
                    time_str = time_str.replace('¬Ω', '.5')
                
                hours = float(time_str)
                
                if hours >= 1:
                    if hours == int(hours):
                        formatted_time = f"{int(hours)}h"
                    else:
                        formatted_time = f"{hours:.1f}h"
                else:
                    formatted_time = f"{int(hours * 60)}m"
                
                log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã Vs. –¥–∞–Ω–Ω—ã–µ: {formatted_time}")
                return {"t": formatted_time}
        
        log_message("‚ùå Vs. –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Vs. –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None



def save_results(games_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    try:
        with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
            for i, game in enumerate(games_data):
                # –ö–∞–∂–¥–∞—è –∏–≥—Ä–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –±–µ–∑ –æ—Ç—Å—Ç—É–ø–æ–≤
                if i > 0:
                    f.write("\n")
                json.dump(game, f, separators=(',', ':'), ensure_ascii=False)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        categories, total_polled, na_count = count_hltb_data(games_data)
        successful = len([g for g in games_data if "hltb" in g])
        
        log_message(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {OUTPUT_FILE}")
        log_message(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {successful}/{len(games_data)} –∏–≥—Ä —Å –¥–∞–Ω–Ω—ã–º–∏ HLTB")
        log_message(f"üìä Main Story: {categories['ms']} ({total_polled['ms']} –≥–æ–ª–æ—Å–æ–≤), Main+Extras: {categories['mpe']} ({total_polled['mpe']} –≥–æ–ª–æ—Å–æ–≤)")
        log_message(f"üìä Completionist: {categories['comp']} ({total_polled['comp']} –≥–æ–ª–æ—Å–æ–≤), All: {categories['all']} ({total_polled['all']} –≥–æ–ª–æ—Å–æ–≤)")
        log_message(f"üìä Co-Op: {categories['coop']} ({total_polled['coop']} –≥–æ–ª–æ—Å–æ–≤), Vs: {categories['vs']} ({total_polled['vs']} –≥–æ–ª–æ—Å–æ–≤)")
        log_message(f"üìä N/A (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ): {na_count} –∏–≥—Ä")
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        raise

def log_progress(current, total, start_time):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    elapsed = time.time() - start_time
    rate = current / elapsed * 60 if elapsed > 0 else 0  # –∏–≥—Ä –≤ –º–∏–Ω—É—Ç—É
    eta = (total - current) / rate if rate > 0 else 0  # –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    
    log_message(f"üìä {current}/{total} | {rate:.1f} –∏–≥—Ä/–º–∏–Ω | ETA: {eta:.0f} –º–∏–Ω")

def update_html_with_hltb(html_file, hltb_data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç HTML —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ HLTB –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º HTML
        with open(html_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º gamesList
        start = content.find('const gamesList = [')
        if start == -1:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω const gamesList –≤ HTML —Ñ–∞–π–ª–µ")
        
        end = content.find('];', start) + 2
        if end == 1:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ gamesList")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π JSON —Å HLTB –¥–∞–Ω–Ω—ã–º–∏ (–≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É)
        new_games_list = json.dumps(hltb_data, separators=(',', ':'), ensure_ascii=False)
        new_content = content[:start] + f'const gamesList = {new_games_list}' + content[end:]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π HTML
        with open(html_file, 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        log_message(f"‚úÖ HTML —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {html_file}")
        return True
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è HTML: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞"""
    print("üîß –§—É–Ω–∫—Ü–∏—è main() –≤—ã–∑–≤–∞–Ω–∞")
    log_message("üöÄ –ó–∞–ø—É—Å–∫ HLTB Worker")
    log_message(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    log_message(f"üìÑ –ò—â–µ–º —Ñ–∞–π–ª: {GAMES_LIST_FILE}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(GAMES_LIST_FILE):
        log_message(f"‚ùå –§–∞–π–ª {GAMES_LIST_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    log_message(f"‚úÖ –§–∞–π–ª {GAMES_LIST_FILE} –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(GAMES_LIST_FILE)} –±–∞–π—Ç")
    
    setup_directories()
    log_message("üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    try:
        log_message("üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä...")
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä
        games_list = extract_games_list(GAMES_LIST_FILE)
        total_games = len(games_list)
        log_message(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {total_games} –∏–≥—Ä")
        
        start_index = 0
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        log_message("üåê –ó–∞–ø—É—Å–∫–∞–µ–º Playwright...")
        with sync_playwright() as p:
            log_message("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Chromium...")
            browser = p.chromium.launch(headless=True)
            log_message("‚úÖ Chromium –∑–∞–ø—É—â–µ–Ω")
            
            log_message("üîß –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞...")
            context = browser.new_context(
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0 Safari/537.36",
                viewport={"width": 1280, "height": 800},
                locale="en-US"
            )
            log_message("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω")
            
            log_message("üìÑ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
            page = context.new_page()
            log_message("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–π –±–∞–Ω IP
            log_message("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å HowLongToBeat.com...")
            try:
                page.goto(BASE_URL, timeout=15000)
                page.wait_for_load_state("domcontentloaded", timeout=10000)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                title = page.title()
                log_message(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {title}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                search_box = page.locator('input[type="search"], input[name="q"]')
                if search_box.count() > 0:
                    log_message("‚úÖ –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ - —Å–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    log_message("‚ö†Ô∏è –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                page_content = page.content()
                if "blocked" in page_content.lower() or "access denied" in page_content.lower():
                    log_message("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ë–õ–û–ö–ò–†–û–í–ö–ê IP! –°–∞–π—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –¥–æ—Å—Ç—É–ø")
                    return
                elif "cloudflare" in page_content.lower() and "checking your browser" in page_content.lower():
                    log_message("‚ö†Ô∏è Cloudflare –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ - –∂–¥–µ–º...")
                    time.sleep(5)
                    page_content = page.content()
                    if "checking your browser" in page_content.lower():
                        log_message("‚ùå Cloudflare –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø")
                        return
                
                log_message("‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–≥—Ä")
                
            except Exception as e:
                log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞: {e}")
                log_message("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã...")
            
            start_time = time.time()
            processed_count = 0
            blocked_count = 0  # –°—á–µ—Ç—á–∏–∫ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–≥—Ä—ã
            for i in range(start_index, total_games):
                game = games_list[i]
                game_title = game["title"]
                game_year = game.get("year")
                
                log_message(f"üéÆ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {i+1}/{total_games}: {game_title}" + (f" ({game_year})" if game_year else ""))
                
                # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ HLTB
                hltb_data = search_game_on_hltb(page, game_title, game_year)
                
                if hltb_data:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ logs.py
                    game["hltb"] = hltb_data
                    processed_count += 1
                    blocked_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                    log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {hltb_data}")
                else:
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º N/A –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                    game["hltb"] = {"ms": "N/A", "mpe": "N/A", "comp": "N/A", "all": "N/A"}
                    log_message(f"‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è: {game_title} - –∑–∞–ø–∏—Å–∞–Ω–æ N/A")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    page_content = page.content()
                    if "blocked" in page_content.lower() or "access denied" in page_content.lower():
                        blocked_count += 1
                        log_message(f"üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ #{blocked_count}")
                        
                        # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø–æ–¥—Ä—è–¥ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                        if blocked_count >= 3:
                            log_message("üí• –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø–æ–¥—Ä—è–¥! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É.")
                            log_message("üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ.")
                            break
                
                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏ –¥–ª—è GitHub Actions
                random_delay()
                
                # –î–ª–∏–Ω–Ω—ã–µ –ø–∞—É–∑—ã –∫–∞–∂–¥—ã–µ LONG_PAUSE_EVERY –∏–≥—Ä –¥–ª—è GitHub Actions
                if (i + 1) % LONG_PAUSE_EVERY == 0:
                    min_pause, max_pause = LONG_PAUSE_DURATION
                    pause_duration = random.uniform(min_pause, max_pause)
                    log_message(f"‚è∏Ô∏è –î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞ {pause_duration:.1f} —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ {i + 1} –∏–≥—Ä...")
                    time.sleep(pause_duration)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –∏–≥—Ä
                if (i + 1) % 50 == 0:
                    log_progress(i + 1, total_games, start_time)
            
            browser.close()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        save_results(games_list)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        successful = len([g for g in games_list if "hltb" in g])
        log_message(f"üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {successful}/{total_games} –∏–≥—Ä ({successful/total_games*100:.1f}%)")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º HTML —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        log_message("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HTML —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ HLTB...")
        if update_html_with_hltb(GAMES_LIST_FILE, games_list):
            log_message("‚úÖ HTML —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        else:
            log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å HTML —Ñ–∞–π–ª")
        
    except Exception as e:
        log_message(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    print("üéØ –ó–∞–ø—É—Å–∫–∞–µ–º main()...")
    try:
        main()
        print("‚úÖ main() –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}")
        import traceback
        traceback.print_exc()
        raise
