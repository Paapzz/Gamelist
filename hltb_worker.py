#!/usr/bin/env python3

print("üöÄ HLTB Worker –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
print("üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏...")

import json
import time
import random
import re
import os
from datetime import datetime
from urllib.parse import quote
from playwright.sync_api import sync_playwright

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "https://howlongtobeat.com"
GAMES_LIST_FILE = "index111.html"
OUTPUT_DIR = "hltb_data"
OUTPUT_FILE = f"{OUTPUT_DIR}/hltb_data.json"
PROGRESS_FILE = "progress.json"

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è GitHub Actions
DEBUG_MODE = os.getenv("HLTB_DEBUG", "false").lower() == "true"
CHUNK_INDEX = int(os.getenv("CHUNK_INDEX", "0"))
CHUNK_SIZE = int(os.getenv("CHUNK_SIZE", "0"))

# –ó–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è GitHub Actions (6 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã)
BREAK_INTERVAL_MIN = 15 * 60  # 15 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
BREAK_INTERVAL_MAX = 25 * 60  # 25 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
BREAK_DURATION_MIN = 60  # 60 —Å–µ–∫—É–Ω–¥
BREAK_DURATION_MAX = 120  # 120 —Å–µ–∫—É–Ω–¥
LONG_PAUSE_EVERY = 50  # –î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞ –∫–∞–∂–¥—ã–µ 50 –∏–≥—Ä
LONG_PAUSE_DURATION_MIN = 30  # 30 —Å–µ–∫—É–Ω–¥
LONG_PAUSE_DURATION_MAX = 90  # 90 —Å–µ–∫—É–Ω–¥

def setup_directories():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print(f"üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {OUTPUT_DIR}")
    try:
        os.makedirs(OUTPUT_DIR, exist_ok=True)
        print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {OUTPUT_DIR} —Å–æ–∑–¥–∞–Ω–∞/—Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
        raise
    
def log_message(message, level="INFO"):
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] [{level}] {message}"
        print(log_entry)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if DEBUG_MODE or level in ["ERROR", "WARNING", "DEBUG"]:
            try:
                with open("hltb_debug.log", "a", encoding="utf-8") as f:
                    f.write(log_entry + "\n")
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}")

def log_debug(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    log_message(message, "DEBUG")

def log_warning(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
    log_message(message, "WARNING")

def log_error(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
    log_message(message, "ERROR")

def count_hltb_data(hltb_data):
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö HLTB –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    categories = {"ms": 0, "mpe": 0, "comp": 0, "all": 0, "coop": 0, "vs": 0}
    total_polled = {"ms": 0, "mpe": 0, "comp": 0, "all": 0, "coop": 0, "vs": 0}
    na_count = 0
    
    for game in hltb_data:
        if "hltb" in game:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ N/A –∑–∞–ø–∏—Å—å—é
            if (isinstance(game["hltb"], dict) and 
                game["hltb"].get("ms") == "N/A" and 
                game["hltb"].get("mpe") == "N/A" and 
                game["hltb"].get("comp") == "N/A" and 
                game["hltb"].get("all") == "N/A"):
                na_count += 1
                continue
            
            for category in categories:
                if category in game["hltb"] and game["hltb"][category] and game["hltb"][category] != "N/A":
                    categories[category] += 1
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤
                    if isinstance(game["hltb"][category], dict) and "p" in game["hltb"][category]:
                        total_polled[category] += game["hltb"][category]["p"]
    
    return categories, total_polled, na_count

def extract_games_list(html_file):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –∏–∑ HTML —Ñ–∞–π–ª–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ª–æ–≥–∏–∫–µ –∏–∑ logs.py"""
    try:
        log_message(f"üìñ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª {html_file}...")
        with open(html_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        log_message(f"üìÑ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        log_message(f"üìÑ –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ —Ñ–∞–π–ª–∞: {content[:500]}")
        
        # –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã gamesList
        gameslist_patterns = [
            r'const\s+gamesList\s*=',
            r'let\s+gamesList\s*=',
            r'var\s+gamesList\s*=',
            r'gamesList\s*=',
            r'gamesList\s*:'
        ]
        
        found_patterns = []
        for pattern in gameslist_patterns:
            if re.search(pattern, content, re.IGNORECASE):
                found_patterns.append(pattern)
        
        log_message(f"üìÑ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã gamesList: {found_patterns}")
        
        # –°–ø–æ—Å–æ–± 1: JS-array parsing
        log_message("üîç –ü—Ä–æ–±—É–µ–º JS-array parsing...")
        games_list = try_js_array_parsing(content)
        if games_list:
            log_message(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(games_list)} –∏–≥—Ä —á–µ—Ä–µ–∑ JS-array parsing")
            return games_list
        
        # –°–ø–æ—Å–æ–± 2: –ü–æ–∏—Å–∫ –ª—é–±—ã—Ö JSON –æ–±—ä–µ–∫—Ç–æ–≤ —Å title (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π fallback)
        log_message("üîç –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ JSON –æ–±—ä–µ–∫—Ç–æ–≤...")
        games_list = try_json_objects_search(content)
        if games_list:
            log_message(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(games_list)} –∏–≥—Ä —á–µ—Ä–µ–∑ JSON –ø–æ–∏—Å–∫")
            return games_list
        
        # –°–ø–æ—Å–æ–± 3: Heuristic regex
        log_message("üîç –ü—Ä–æ–±—É–µ–º heuristic regex...")
        games_list = try_heuristic_regex(content)
        if games_list:
            log_message(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(games_list)} –∏–≥—Ä —á–µ—Ä–µ–∑ heuristic regex")
            return games_list
        
        # –°–ø–æ—Å–æ–± 4: Fallback –Ω–∞ anchors
        log_message("üîç –ü—Ä–æ–±—É–µ–º anchor fallback...")
        games_list = try_anchor_fallback(content)
        if games_list:
            log_message(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(games_list)} –∏–≥—Ä —á–µ—Ä–µ–∑ anchor fallback")
            return games_list
        
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤")
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä: {e}")
        raise

def try_js_array_parsing(content):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä —á–µ—Ä–µ–∑ JS-array parsing"""
    try:
        # –ò—â–µ–º const/let/var gamesList = [ ... ];
        patterns = [
            r'const\s+gamesList\s*=\s*\[(.*?)\];',
            r'let\s+gamesList\s*=\s*\[(.*?)\];',
            r'var\s+gamesList\s*=\s*\[(.*?)\];',
            r'gamesList\s*=\s*\[(.*?)\];',
            r'const\s+gamesList\s*=\s*\[(.*?)\]',
            r'let\s+gamesList\s*=\s*\[(.*?)\]',
            r'var\s+gamesList\s*=\s*\[(.*?)\]',
            r'gamesList\s*=\s*\[(.*?)\]'
        ]
        
        # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è gamesList –≤ —Ñ–∞–π–ª–µ
        gameslist_positions = []
        for match in re.finditer(r'gamesList', content):
            start = max(0, match.start() - 50)
            end = min(len(content), match.end() + 50)
            context = content[start:end]
            gameslist_positions.append((match.start(), context))
        
        log_message(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(gameslist_positions)} –≤—Ö–æ–∂–¥–µ–Ω–∏–π 'gamesList' –≤ —Ñ–∞–π–ª–µ")
        for i, (pos, context) in enumerate(gameslist_positions[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            log_message(f"üìù –í—Ö–æ–∂–¥–µ–Ω–∏–µ {i+1} (–ø–æ–∑–∏—Ü–∏—è {pos}): {context}")
        
        for i, pattern in enumerate(patterns):
            log_message(f"üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω {i+1}: {pattern}")
            match = re.search(pattern, content, re.DOTALL)
            if match:
                log_message(f"‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω {i+1} –Ω–∞–π–¥–µ–Ω!")
                array_content = match.group(1)
                log_message(f"üìù –ù–∞–π–¥–µ–Ω JS –º–∞—Å—Å–∏–≤, —Ä–∞–∑–º–µ—Ä: {len(array_content)} —Å–∏–º–≤–æ–ª–æ–≤")
                log_message(f"üìù –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {array_content[:200]}")
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JS –≤ Python-safe
                # –£–¥–∞–ª—è–µ–º trailing commas
                array_content = re.sub(r',\s*\]', ']', array_content)
                array_content = re.sub(r',\s*$', '', array_content)
                
                # –ó–∞–º–µ–Ω—è–µ–º null/true/false
                array_content = array_content.replace('null', 'None')
                array_content = array_content.replace('true', 'True')
                array_content = array_content.replace('false', 'False')
                
                # –ó–∞–º–µ–Ω—è–µ–º JavaScript –æ–±—ä–µ–∫—Ç—ã –Ω–∞ Python —Å–ª–æ–≤–∞—Ä–∏
                # {"key": "value"} -> {"key": "value"}
                # –ù–æ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –Ω–∞ –¥–≤–æ–π–Ω—ã–µ –¥–ª—è –∫–ª—é—á–µ–π
                array_content = re.sub(r"'([^']+)':", r'"\1":', array_content)
                
                log_message(f"üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {array_content[:200]}")
                
                try:
                    # –ü–∞—Ä—Å–∏–º –∫–∞–∫ Python –∫–æ–¥
                    import ast
                    games_list = ast.literal_eval('[' + array_content + ']')
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    formatted_games = []
                    for game in games_list:
                        if isinstance(game, str):
                            # "Title (YYYY)" -> {"title": "Title", "year": YYYY}
                            title, year = extract_title_and_year(game)
                            formatted_games.append({"title": title, "year": year})
                        elif isinstance(game, dict):
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º title –∏ year –∏–∑ –æ–±—ä–µ–∫—Ç–∞
                            title = game.get("title", "")
                            year = game.get("year")
                            formatted_games.append({"title": title, "year": year})
                    
                    log_message(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(formatted_games)} –∏–≥—Ä –∏–∑ JS –º–∞—Å—Å–∏–≤–∞")
                    return formatted_games
                    
                except Exception as parse_error:
                    log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JS –º–∞—Å—Å–∏–≤–∞: {parse_error}")
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ regex
                    return extract_games_from_js_objects(array_content)
        
        return None
        
    except Exception as e:
        log_message(f"‚ö†Ô∏è JS-array parsing –Ω–µ —É–¥–∞–ª—Å—è: {e}")
        return None

def extract_games_from_js_objects(array_content):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–≥—Ä—ã –∏–∑ JS –æ–±—ä–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ regex"""
    try:
        formatted_games = []
        
        # –ò—â–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤ –º–∞—Å—Å–∏–≤–µ
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤: {"key": "value", ...}
        object_pattern = r'\{[^}]*"title"[^}]*"year"[^}]*\}'
        matches = re.findall(object_pattern, array_content)
        
        log_message(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(matches)} –æ–±—ä–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ regex")
        
        for match in matches:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º title
                title_match = re.search(r'"title":\s*"([^"]*)"', match)
                title = title_match.group(1) if title_match else ""
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º year
                year_match = re.search(r'"year":\s*(\d+)', match)
                year = int(year_match.group(1)) if year_match else None
                
                if title:
                    formatted_games.append({"title": title, "year": year})
                    log_message(f"üìù –ò–∑–≤–ª–µ—á–µ–Ω–∞ –∏–≥—Ä–∞: {title} ({year})")
                    
            except Exception as e:
                log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä–µ–∫—Ç–∞: {e}")
                continue
        
        log_message(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(formatted_games)} –∏–≥—Ä —á–µ—Ä–µ–∑ regex")
        return formatted_games if formatted_games else None
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ regex: {e}")
        return None

def try_json_objects_search(content):
    """–ü–æ–∏—Å–∫ –ª—é–±—ã—Ö JSON –æ–±—ä–µ–∫—Ç–æ–≤ —Å title –≤ —Ñ–∞–π–ª–µ"""
    try:
        formatted_games = []
        
        # –ò—â–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å "title" –≤ —Ñ–∞–π–ª–µ
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤: {"title": "...", ...}
        object_pattern = r'\{[^}]*"title"[^}]*\}'
        matches = re.findall(object_pattern, content)
        
        log_message(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(matches)} –æ–±—ä–µ–∫—Ç–æ–≤ —Å title —á–µ—Ä–µ–∑ JSON –ø–æ–∏—Å–∫")
        
        for match in matches:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º title
                title_match = re.search(r'"title":\s*"([^"]*)"', match)
                title = title_match.group(1) if title_match else ""
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º year (–µ—Å–ª–∏ –µ—Å—Ç—å)
                year_match = re.search(r'"year":\s*(\d+)', match)
                year = int(year_match.group(1)) if year_match else None
                
                if title:
                    formatted_games.append({"title": title, "year": year})
                    log_message(f"üìù JSON –ø–æ–∏—Å–∫: {title} ({year})")
                    
            except Exception as e:
                log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –æ–±—ä–µ–∫—Ç–∞: {e}")
                continue
        
        log_message(f"‚úÖ JSON –ø–æ–∏—Å–∫: –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(formatted_games)} –∏–≥—Ä")
        return formatted_games if formatted_games else None
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ JSON –ø–æ–∏—Å–∫–∞: {e}")
        return None

def try_heuristic_regex(content):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä —á–µ—Ä–µ–∑ heuristic regex"""
    try:
        # –ò—â–µ–º —à–∞–±–ª–æ–Ω—ã >Title (YYYY)< –≤ HTML
        pattern = r'>([^<]+)\s*\((\d{4})\)<'
        matches = re.findall(pattern, content)
        
        games_list = []
        for title, year in matches:
            title = title.strip()
            if title and year:
                games_list.append({"title": title, "year": int(year)})
        
        return games_list if games_list else None
        
    except Exception as e:
        log_message(f"‚ö†Ô∏è Heuristic regex –Ω–µ —É–¥–∞–ª—Å—è: {e}")
        return None

def try_anchor_fallback(content):
    """Fallback –Ω–∞ anchors - —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ <a ...>Title</a> —Å—Å—ã–ª–∫–∏"""
    try:
        # –ò—â–µ–º –≤—Å–µ <a ...>Title</a> —Å—Å—ã–ª–∫–∏
        pattern = r'<a[^>]*>([^<]+)</a>'
        matches = re.findall(pattern, content)
        
        games_list = []
        for match in matches:
            title = match.strip()
            # –û—á–∏—â–∞–µ–º –æ—Ç —Ç–µ–≥–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
            title = re.sub(r'<[^>]+>', '', title)
            title = re.sub(r'\s+', ' ', title).strip()
            
            if title:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –≥–æ–¥ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
                title_clean, year = extract_title_and_year(title)
                games_list.append({"title": title_clean, "year": year})
        
        return games_list if games_list else None
        
    except Exception as e:
        log_message(f"‚ö†Ô∏è Anchor fallback –Ω–µ —É–¥–∞–ª—Å—è: {e}")
        return None

def extract_title_and_year(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≥–æ–¥ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    try:
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "Title (YYYY)"
        match = re.search(r'^(.+?)\s*\((\d{4})\)$', text.strip())
        if match:
            title = match.group(1).strip()
            year = int(match.group(2))
            return title, year
        
        # –ï—Å–ª–∏ –≥–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ
        return text.strip(), None
        
    except Exception as e:
        log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –≥–æ–¥–∞: {e}")
        return text.strip(), None

def parse_time_to_hours(time_str):
    """–ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Xh Ym' –∏–ª–∏ 'X Hours' –≤ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã"""
    if not time_str or time_str == "N/A":
        return 0, 0
    
    # –£–±–∏—Ä–∞–µ–º "Hours" –µ—Å–ª–∏ –µ—Å—Ç—å
    time_str = time_str.replace("Hours", "").strip()
    
    # –ò—â–µ–º —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥—Ä–æ–±–Ω—ã–µ —á–∞—Å—ã)
    hours_match = re.search(r'(\d+(?:\.\d+)?)h', time_str)
    minutes_match = re.search(r'(\d+)m', time_str)
    
    hours = float(hours_match.group(1)) if hours_match else 0
    minutes = int(minutes_match.group(1)) if minutes_match else 0
    
    # –ï—Å–ª–∏ –Ω–µ—Ç "h" –∏ "m", –Ω–æ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (—á–∞—Å—ã)
    if hours == 0 and minutes == 0:
        number_match = re.search(r'(\d+(?:\.\d+)?)', time_str)
        if number_match:
            hours = float(number_match.group(1))
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å –≤ –º–∏–Ω—É—Ç—ã
            if hours != int(hours):
                minutes = int((hours - int(hours)) * 60)
                hours = int(hours)
    
    # –ï—Å–ª–∏ —á–∞—Å—ã –¥—Ä–æ–±–Ω—ã–µ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å –≤ –º–∏–Ω—É—Ç—ã
    if hours != int(hours):
        minutes += int((hours - int(hours)) * 60)
        hours = int(hours)
    
    return hours, minutes

def round_time(time_str):
    """–û–∫—Ä—É–≥–ª—è–µ—Ç –≤—Ä–µ–º—è –∫ –±–ª–∏–∂–∞–π—à–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é"""
    if not time_str or time_str == "N/A":
        return None
    
    hours, minutes = parse_time_to_hours(time_str)
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ hours - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    hours = int(hours)
    
    if minutes <= 14:
        return f"{hours}h"           # 0-14 –º–∏–Ω ‚Üí —Ü–µ–ª—ã–π —á–∞—Å
    elif minutes <= 44:
        return f"{hours}.5h"         # 15-44 –º–∏–Ω ‚Üí +0.5 —á–∞—Å–∞
    else:
        return f"{hours + 1}h"       # 45-59 –º–∏–Ω ‚Üí +1 —á–∞—Å

def random_delay(min_seconds, max_seconds):
    """–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"""
    delay = random.uniform(min_seconds, max_seconds)
    time.sleep(delay)

def check_break_time(start_time, games_processed):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ—Ä—ã–≤"""
    elapsed_seconds = time.time() - start_time
    
    # –î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞ –∫–∞–∂–¥—ã–µ LONG_PAUSE_EVERY –∏–≥—Ä
    if games_processed % LONG_PAUSE_EVERY == 0 and games_processed > 0:
        long_pause_duration = random.randint(LONG_PAUSE_DURATION_MIN, LONG_PAUSE_DURATION_MAX)
        log_message(f"‚è∏Ô∏è  –î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞ {long_pause_duration} —Å–µ–∫—É–Ω–¥... (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {games_processed} –∏–≥—Ä)")
        time.sleep(long_pause_duration)
        return time.time()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    
    # –†–∞–Ω–¥–æ–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–µ—Ä–µ—Ä—ã–≤–∞–º–∏
    break_interval = random.randint(BREAK_INTERVAL_MIN, BREAK_INTERVAL_MAX)
    
    if elapsed_seconds >= break_interval:
        # –†–∞–Ω–¥–æ–º–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ä—ã–≤–∞
        break_duration = random.randint(BREAK_DURATION_MIN, BREAK_DURATION_MAX)
        log_message(f"‚è∏Ô∏è  –ü–µ—Ä–µ—Ä—ã–≤ {break_duration} —Å–µ–∫—É–Ω–¥... (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {games_processed} –∏–≥—Ä)")
        time.sleep(break_duration)
        return time.time()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    
    return start_time

def search_game_on_hltb(page, game_title, game_year=None):
    """–ò—â–µ—Ç –∏–≥—Ä—É –Ω–∞ HLTB –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    max_attempts = 2  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è GitHub Actions
    delays = [0, (30, 45)]  # –£–≤–µ–ª–∏—á–µ–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è GitHub Actions
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ª–æ–≥–∏–∫–µ –∏–∑ logs.py
    search_variants = generate_search_variants(game_title, game_year)
    log_message(f"üîÑ –ü–æ–∏—Å–∫–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è '{game_title}': {search_variants[:5]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
    
    for attempt in range(max_attempts):
        try:
            if attempt > 0:
                log_message(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts} –¥–ª—è '{game_title}'")
                if isinstance(delays[attempt], tuple):
                    min_delay, max_delay = delays[attempt]
                    log_message(f"‚è≥ –ü–∞—É–∑–∞ {min_delay}-{max_delay} —Å–µ–∫—É–Ω–¥...")
                    random_delay(min_delay, max_delay)
                else:
                    log_message(f"‚è≥ –ü–∞—É–∑–∞ {delays[attempt]} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(delays[attempt])
            
            # –ü—Ä–æ–±—É–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
            best_candidate = None
            best_score = 0
            all_candidates = []
            
            for variant in search_variants:
                candidates = search_candidates_on_hltb(page, variant)
                if candidates:
                    all_candidates.extend(candidates)
                    # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                    chosen_candidate = choose_best_candidate(candidates, game_title, game_year)
                    if chosen_candidate and chosen_candidate.get('score', 0) > best_score:
                        best_score = chosen_candidate.get('score', 0)
                        best_candidate = chosen_candidate
                    
                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
                    if best_score >= 0.95:
                        log_message(f"üéØ –ù–∞–π–¥–µ–Ω–æ –æ—Ç–ª–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ! –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫.")
                        break
            
            if best_candidate and best_candidate.get('score', 0) >= 0.6:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                hltb_data = extract_hltb_data_from_candidate(page, best_candidate)
                if hltb_data:
                    if attempt > 0:
                        log_message(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–æ —Å –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1}")
                    log_message(f"üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{best_candidate.get('text', '')}' (—Å—Ö–æ–∂–µ—Å—Ç—å: {best_score:.2f})")
                    return hltb_data
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã
                    save_debug_info(game_title, search_variants, all_candidates, best_candidate, None)
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
                if best_score < 0.6:
                    save_debug_info(game_title, search_variants, all_candidates, best_candidate, None)
            
        except Exception as e:
            log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1} –¥–ª—è '{game_title}': {e}")
            if attempt == max_attempts - 1:
                log_message(f"üí• –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è '{game_title}'")
                return None
    
    return None

def search_candidates_on_hltb(page, search_variant):
    """–ò—â–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ HLTB –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–∏—Å–∫–∞"""
    try:
        log_message(f"üîç –ò—â–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è: '{search_variant}'")
        
        # –ö–æ–¥–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è URL
        safe_title = quote(search_variant, safe="")
        search_url = f"{BASE_URL}/?q={safe_title}"
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞
        page.goto(search_url, timeout=20000)
        page.wait_for_load_state("domcontentloaded", timeout=15000)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        page_content = page.content()
        if "blocked" in page_content.lower() or "access denied" in page_content.lower():
            log_message("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ë–õ–û–ö–ò–†–û–í–ö–ê IP –ø—Ä–∏ –ø–æ–∏—Å–∫–µ!")
            return []
        elif "cloudflare" in page_content.lower() and "checking your browser" in page_content.lower():
            log_message("‚ö†Ô∏è Cloudflare –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ - –∂–¥–µ–º...")
            time.sleep(5)
            page_content = page.content()
            if "checking your browser" in page_content.lower():
                log_message("‚ùå Cloudflare –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫")
                return []
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ (React –∫–æ–Ω—Ç–µ–Ω—Ç)
        random_delay(2, 4)  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 2-4 —Å–µ–∫—É–Ω–¥—ã
        
        # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—ã
        game_links = page.locator('a[href^="/game/"]')
        found_count = game_links.count()
        
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç, –∂–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ
        if found_count == 0:
            random_delay(2, 4)
            found_count = game_links.count()
        
        if found_count == 0:
            return []
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        candidates = []
        for i in range(min(found_count, 10)):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            try:
                link = game_links.nth(i)
                href = link.get_attribute("href")
                text = link.inner_text().strip()
                
                if href and text:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–≥–æ–¥, –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã)
                    years = extract_years_from_candidate(link)
                    
                    candidate = {
                        "text": text,
                        "href": href,
                        "years": years
                    }
                    candidates.append(candidate)
                    
            except Exception as e:
                log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {i}: {e}")
                continue
        
        log_message(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è '{search_variant}'")
        return candidates
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è '{search_variant}': {e}")
        return []

def extract_years_from_candidate(link_element):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–æ–¥—ã –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        parent = link_element.locator("..")
        if parent.count() > 0:
            parent_text = parent.inner_text()
        else:
            parent_text = link_element.inner_text()
        
        # –ò—â–µ–º –≥–æ–¥—ã –≤ —Ç–µ–∫—Å—Ç–µ
        years = []
        year_matches = re.findall(r'\b(19|20)\d{2}\b', parent_text)
        for year_match in year_matches:
            try:
                year = int(year_match)
                if 1950 <= year <= 2030:  # –†–∞–∑—É–º–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∏–≥—Ä
                    years.append(year)
            except:
                continue
        
        return sorted(set(years))  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–æ–¥—ã
        
    except Exception as e:
        log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–æ–¥–æ–≤: {e}")
        return []

def choose_best_candidate(candidates, orig_title, input_year):
    """–í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ª–æ–≥–∏–∫–µ –∏–∑ logs.py"""
    if not candidates:
            return None
        
    try:
        # –í—ã—á–∏—Å–ª—è–µ–º score –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        scored_candidates = []
        for candidate in candidates:
            score = calculate_title_similarity(orig_title, candidate["text"])
            
            # –£–±–∏—Ä–∞–µ–º –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫—É - –æ–Ω –∑–∞–≤—ã—à–∞–µ—Ç –æ—Ü–µ–Ω–∫–∏
            # –¢–µ–ø–µ—Ä—å –ø–æ–ª–∞–≥–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–ª–≥–æ—Ä–∏—Ç–º —Å—Ö–æ–∂–µ—Å—Ç–∏
            
            # earliest_year = min(candidate.years) –µ—Å–ª–∏ –µ—Å—Ç—å –≥–æ–¥—ã
            earliest_year = min(candidate["years"]) if candidate["years"] else None
            
            scored_candidate = {
                **candidate,
                "score": score,
                "earliest_year": earliest_year
            }
            scored_candidates.append(scored_candidate)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ score desc, tie-break –ø–æ earliest_year (–º–µ–Ω—å—à–µ ‚Äî –ª—É—á—à–µ)
        scored_candidates.sort(key=lambda x: (-x["score"], x["earliest_year"] or 9999))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ambiguous –µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å score >= 0.80
        high_score_candidates = [c for c in scored_candidates if c["score"] >= 0.80]
        ambiguous = len(high_score_candidates) > 1
        
        # –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–Ω—è—Ç–∏—è
        best_candidate = scored_candidates[0]
        
        # Rule 1: score >= 0.95 ‚Üí –ø—Ä–∏–Ω—è—Ç—å
        if best_candidate["score"] >= 0.95:
            best_candidate["reason"] = "score_>=_0.95"
            return best_candidate
        
        # Rule 2: score >= 0.88 and candidate_earliest_year <= input_year
        if (best_candidate["score"] >= 0.88 and 
            best_candidate["earliest_year"] and 
            input_year and 
            best_candidate["earliest_year"] <= input_year):
            
            reason = "score_>=_0.88_and_year_ok"
            if ambiguous:
                reason += "_and_ambiguous"
            best_candidate["reason"] = reason
            return best_candidate
        
        # Rule 3: score >= 0.92 and candidate contains orig substring
        if (best_candidate["score"] >= 0.92 and 
            orig_normalized in candidate_normalized):
            best_candidate["reason"] = "score_>=_0.92_and_contains_orig"
            return best_candidate
        
        # Rule 4 (fallback): –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        if len(scored_candidates) >= 2:
            top1, top2 = scored_candidates[0], scored_candidates[1]
            if abs(top1["score"] - top2["score"]) < 0.02:
                # –ï—Å–ª–∏ —Ç–æ–ø-2 –ø–æ—á—Ç–∏ —Ä–∞–≤–Ω—ã, –≤—ã–±—Ä–∞—Ç—å —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º earliest_year
                if (top1["earliest_year"] and top2["earliest_year"] and 
                    top1["earliest_year"] > top2["earliest_year"]):
                    best_candidate = top2
        
        best_candidate["reason"] = "fallback_best_score"
        return best_candidate
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {e}")
        return candidates[0] if candidates else None

def extract_hltb_data_from_candidate(page, candidate):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ HLTB —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    try:
        href = candidate.get("href")
        if not href:
            return None
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä—ã
        full_url = f"{BASE_URL}{href}"
        page.goto(full_url, timeout=20000)
        page.wait_for_load_state("domcontentloaded", timeout=15000)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        page_content = page.content()
        if "blocked" in page_content.lower() or "access denied" in page_content.lower():
            log_message("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ë–õ–û–ö–ò–†–û–í–ö–ê IP –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–≥—Ä—ã!")
            return None
        elif "cloudflare" in page_content.lower() and "checking your browser" in page_content.lower():
            log_message("‚ö†Ô∏è Cloudflare –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–≥—Ä—ã - –∂–¥–µ–º...")
            time.sleep(5)
            page_content = page.content()
            if "checking your browser" in page_content.lower():
                log_message("‚ùå Cloudflare –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä—ã")
                return None
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
        random_delay(2, 4)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        hltb_data = extract_hltb_data_from_page(page)
        return hltb_data
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {e}")
        return None



def clean_title_for_comparison(title):
    """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    import re
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    cleaned = re.sub(r'[^\w\s]', '', title.lower())
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    cleaned = re.sub(r'\s+', ' ', cleaned).strip()
    return cleaned


def convert_arabic_to_roman(num_str):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—Ä–∞–±—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –≤ —Ä–∏–º—Å–∫–∏–µ"""
    try:
        num = int(num_str)
        if num == 1:
            return "I"
        elif num == 2:
            return "II"
        elif num == 3:
            return "III"
        elif num == 4:
            return "IV"
        elif num == 5:
            return "V"
        elif num == 6:
            return "VI"
        elif num == 7:
            return "VII"
        elif num == 8:
            return "VIII"
        elif num == 9:
            return "IX"
        elif num == 10:
            return "X"
        else:
            return num_str
    except:
        return num_str

def generate_search_variants(title, year=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ª–æ–≥–∏–∫–µ –∏–∑ logs.py"""
    variants = []
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ–¥, –¥–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç —Å –≥–æ–¥–æ–º –≤ –Ω–∞—á–∞–ª–æ (—Å–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
    if year:
        variants.append(f"{title} {year}")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    variants.append(title)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å "/"
    if "/" in title:
        if " / " in title:  # –°–ª—ç—à –æ–∫—Ä—É–∂–µ–Ω –ø—Ä–æ–±–µ–ª–∞–º–∏ (A / B)
            parts = [part.strip() for part in title.split(" / ")]
            
            # –î–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º sub-variants
            for part in parts:
                part_variants = generate_part_variants(part)
                variants.extend(part_variants)
            
            # –î–æ–±–∞–≤–ª—è–µ–º full-title-variants
            full_variants = generate_part_variants(title)
            variants.extend(full_variants)
            
        else:  # –°–ª—ç—à –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ (A/B/C)
            parts = [part.strip() for part in title.split("/")]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º Base (–ø—Ä–µ—Ñ–∏–∫—Å)
            base = determine_base(parts)
            
            # –ü–∞—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: Base A and B, Base B and C, etc.
            for i in range(len(parts) - 1):
                for j in range(i + 1, len(parts)):
                    if base:
                        pair_variant = f"{base} {parts[i]} and {parts[j]}"
                    else:
                        pair_variant = f"{parts[i]} and {parts[j]}"
                    variants.append(pair_variant)
            
            # –û–¥–∏–Ω–æ—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: Base A, Base B, Base C
            for part in parts:
                if base:
                    single_variant = f"{base} {part}"
                else:
                    single_variant = part
                variants.append(single_variant)
            
            # –¢—Ä–æ–π–Ω—ã–µ / –≤—Å–µ –≤–º–µ—Å—Ç–µ
            if len(parts) >= 3:
                if base:
                    triple_variant = f"{base} {' and '.join(parts)}"
                else:
                    triple_variant = " and ".join(parts)
                variants.append(triple_variant)
            
            # Without_parentheses, —Ä–∏–º—Å–∫–∏–µ/ampersand –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ title
            full_variants = generate_part_variants(title)
            variants.extend(full_variants)
    else:
        # –ï—Å–ª–∏ —Å–ª—ç—à–∞ –Ω–µ—Ç - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        part_variants = generate_part_variants(title)
        variants.extend(part_variants)
    
    # –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
    seen = set()
    unique_variants = []
    for variant in variants:
        if variant not in seen:
            seen.add(variant)
            unique_variants.append(variant)
    
    return unique_variants

def generate_part_variants(part):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    variants = [part]
    
    # 1. part_without_parentheses ‚Äî —É–¥–∞–ª—è–µ–º (...)
    without_parentheses = re.sub(r'\([^)]*\)', '', part).strip()
    if without_parentheses and without_parentheses != part:
        variants.append(without_parentheses)
    
    # 2. —Ä–∏–º—Å–∫–æ‚Üî–∞—Ä–∞–±—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (II ‚Üî 2, —Ç.–¥.)
    roman_variants = generate_roman_variants(part)
    variants.extend(roman_variants)
    
    # 3. ampersand-variants (&‚Üíand, –∏ —É–¥–∞–ª–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ & Suffix)
    ampersand_variants = generate_ampersand_variants(part)
    variants.extend(ampersand_variants)
    
    return variants

def determine_base(parts):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–∞–∑–æ–≤—É—é —á–∞—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ —á–∞—Å—Ç–µ–π"""
    if not parts:
        return ""
    
    # –≠–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã, –±–µ—Ä–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
    first_part = parts[0]
    if " " in first_part:
        words = first_part.split()
        if len(words) >= 2:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—â–∏–º (Red, Blue, Yellow, etc.)
            last_word = words[-1].lower()
            common_words = {"red", "blue", "yellow", "green", "black", "white", "gold", "silver", "crystal"}
            if last_word in common_words:
                return " ".join(words[:-1])
    
    return ""

def generate_roman_variants(text):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å —Ä–∏–º—Å–∫–∏–º–∏/–∞—Ä–∞–±—Å–∫–∏–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏"""
    variants = []
    
    # –ê—Ä–∞–±—Å–∫–∏–µ ‚Üí —Ä–∏–º—Å–∫–∏–µ
    arabic_pattern = r'\b(\d+)\b'
    matches = re.findall(arabic_pattern, text)
    
    for match in matches:
        roman = convert_arabic_to_roman(match)
        if roman != match:
            roman_variant = re.sub(r'\b' + match + r'\b', roman, text)
            variants.append(roman_variant)
    
    # –†–∏–º—Å–∫–∏–µ ‚Üí –∞—Ä–∞–±—Å–∫–∏–µ
    roman_pattern = r'\b([IVX]+)\b'
    roman_matches = re.findall(roman_pattern, text)
    
    for match in roman_matches:
        arabic = convert_roman_to_arabic(match)
        if arabic != match:
            arabic_variant = re.sub(r'\b' + match + r'\b', arabic, text)
            variants.append(arabic_variant)
    
    return variants

def generate_ampersand_variants(text):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –∞–º–ø–µ—Ä—Å–∞–Ω–¥–æ–º"""
    variants = []
    
    # & ‚Üí and
    if "&" in text:
        and_variant = text.replace("&", "and")
        variants.append(and_variant)
    
    # and ‚Üí &
    if " and " in text:
        amp_variant = text.replace(" and ", " & ")
        variants.append(amp_variant)
    
    # –£–¥–∞–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ & Suffix (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Game & DLC" ‚Üí "Game")
    amp_suffix_pattern = r'\s*&\s*\w{1,3}\b'
    without_suffix = re.sub(amp_suffix_pattern, '', text).strip()
    if without_suffix and without_suffix != text:
        variants.append(without_suffix)
    
    return variants

def convert_roman_to_arabic(roman_str):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –≤ –∞—Ä–∞–±—Å–∫–∏–µ"""
    roman_to_arabic = {
        'I': 1, 'II': 2, 'III': 3, 'IV': 4, 'V': 5,
        'VI': 6, 'VII': 7, 'VIII': 8, 'IX': 9, 'X': 10
    }
    return str(roman_to_arabic.get(roman_str, roman_str))

def calculate_title_similarity(title1, title2):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏–≥—Ä"""
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –≤ –∞—Ä–∞–±—Å–∫–∏–µ)
        normalized1 = normalize_title_for_comparison(title1)
        normalized2 = normalize_title_for_comparison(title2)
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å—Ö–æ–∂–µ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö —Å–ª–æ–≤
        words1 = set(normalized1.split())
        words2 = set(normalized2.split())
        
        if not words1 or not words2:
            return 0.0
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–ª–æ–≤
        common_words = words1.intersection(words2)
        total_words = words1.union(words2)
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å –ø–æ —Å–ª–æ–≤–∞–º
        word_similarity = len(common_words) / len(total_words)
        
        # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if normalized1 == normalized2:
            return 1.0
        
        # –£–±–∏—Ä–∞–µ–º –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫—É - –æ–Ω –∑–∞–≤—ã—à–∞–µ—Ç –æ—Ü–µ–Ω–∫–∏
        # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥—É—é –æ—Ü–µ–Ω–∫—É
        
        # –ë–æ–Ω—É—Å –∑–∞ –æ–±—â–∏–µ –¥–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (–±–æ–ª–µ–µ 4 —Å–∏–º–≤–æ–ª–æ–≤)
        long_common = [w for w in common_words if len(w) > 4]
        if long_common:
            word_similarity += 0.05 * len(long_common)  # –£–º–µ–Ω—å—à–µ–Ω –±–æ–Ω—É—Å
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–ª–∏–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–π
        length_diff = abs(len(normalized1) - len(normalized2))
        max_length = max(len(normalized1), len(normalized2))
        if max_length > 0:
            length_penalty = (length_diff / max_length) * 0.1
            word_similarity -= length_penalty
        
        return max(0.0, min(word_similarity, 1.0))
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ö–æ–∂–µ—Å—Ç–∏: {e}")
        return 0.0

def normalize_title_for_comparison(title):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—è —Ä–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –≤ –∞—Ä–∞–±—Å–∫–∏–µ"""
    try:
        import re
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ä–∏–º—Å–∫–∏—Ö —Ü–∏—Ñ—Ä –≤ –∞—Ä–∞–±—Å–∫–∏–µ
        roman_to_arabic = {
            'I': '1', 'II': '2', 'III': '3', 'IV': '4', 'V': '5',
            'VI': '6', 'VII': '7', 'VIII': '8', 'IX': '9', 'X': '10'
        }
        
        # –ó–∞–º–µ–Ω—è–µ–º —Ä–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –Ω–∞ –∞—Ä–∞–±—Å–∫–∏–µ
        normalized = title
        for roman, arabic in roman_to_arabic.items():
            # –ò—â–µ–º —Ä–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
            pattern = r'\b' + roman + r'\b'
            normalized = re.sub(pattern, arabic, normalized)
        
        return normalized
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
        return title

def extract_gamestats_data(page):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ GameStats –±–ª–æ–∫–∞ (ul/li/h4-h5)"""
    try:
        hltb_data = {}
        
        # –ò—â–µ–º GameStats –±–ª–æ–∫
        gamestats = page.locator('.GameStats_game_times__ ul li')
        if gamestats.count() == 0:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            gamestats = page.locator('[class*="GameStats"] ul li')
        
        if gamestats.count() == 0:
            return None
        
        log_message(f"üìä –ù–∞–π–¥–µ–Ω GameStats –±–ª–æ–∫ —Å {gamestats.count()} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
        
        for i in range(gamestats.count()):
            try:
                li = gamestats.nth(i)
                
                # –ò—â–µ–º h4 (–∫–∞—Ç–µ–≥–æ—Ä–∏—è) –∏ h5 (–≤—Ä–µ–º—è)
                h4 = li.locator('h4')
                h5 = li.locator('h5')
                
                if h4.count() > 0 and h5.count() > 0:
                    category = h4.inner_text().strip()
                    time_text = h5.inner_text().strip()
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∏–ª–∏ "--" –∑–Ω–∞—á–µ–Ω–∏—è
                    if not time_text or time_text == "--":
                        continue
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    category_key = None
                    if "Main Story" in category:
                        category_key = "ms"
                    elif "Main + Extras" in category or "Main +Extra" in category:
                        category_key = "mpe"
                    elif "Completionist" in category:
                        category_key = "comp"
                    elif "Co-Op" in category or "Coop" in category:
                        category_key = "coop"
                    elif "Vs." in category or "Competitive" in category:
                        category_key = "vs"
                    
                    if category_key:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è
                        rounded_time = round_time(time_text)
                        if rounded_time:
                            hltb_data[category_key] = {"t": rounded_time}
                            log_message(f"üìä GameStats: {category} -> {rounded_time}")
                
            except Exception as e:
                log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ GameStats —ç–ª–µ–º–µ–Ω—Ç–∞ {i}: {e}")
                continue
        
        return hltb_data if hltb_data else None
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è GameStats –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def extract_earliest_year_from_page(page):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π –≥–æ–¥ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_text = page.inner_text()
        
        # –ò—â–µ–º –≤—Å–µ –≥–æ–¥—ã –≤ —Ç–µ–∫—Å—Ç–µ
        years = []
        year_matches = re.findall(r'\b(19|20)\d{2}\b', page_text)
        for year_match in year_matches:
            try:
                year = int(year_match)
                if 1950 <= year <= 2030:  # –†–∞–∑—É–º–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∏–≥—Ä
                    years.append(year)
            except:
                continue
        
        if years:
            earliest_year = min(years)
            log_message(f"üìÖ –ù–∞–π–¥–µ–Ω —Å–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π –≥–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {earliest_year}")
            return earliest_year
        
        return None
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–æ–¥–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return None

def extract_hltb_data_from_page(page):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ HLTB —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä—ã"""
    try:
        hltb_data = {}
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ GameStats –±–ª–æ–∫–∞ (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π)
        gamestats_data = extract_gamestats_data(page)
        if gamestats_data:
            hltb_data.update(gamestats_data)
            log_message(f"üìä –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ GameStats: {list(gamestats_data.keys())}")
        
        # –ò—â–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        tables = page.locator("table")
        table_count = tables.count()
        
        for table_idx in range(table_count):
            try:
                table = tables.nth(table_idx)
                table_text = table.inner_text()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω—É–∂–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                if any(keyword in table_text for keyword in ["Main Story", "Main + Extras", "Completionist", "Co-Op", "Competitive", "Vs."]):
                    log_message(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É {table_idx + 1}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                    rows = table.locator("tr")
                    row_count = rows.count()
                    
                    for row_idx in range(row_count):
                        try:
                            row_text = rows.nth(row_idx).inner_text().strip()
                            
                            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)
                            if "Main Story" in row_text and "ms" not in hltb_data:
                                hltb_data["ms"] = extract_hltb_row_data(row_text)
                            elif "Main + Extras" in row_text and "mpe" not in hltb_data:
                                hltb_data["mpe"] = extract_hltb_row_data(row_text)
                            elif "Completionist" in row_text and "comp" not in hltb_data:
                                hltb_data["comp"] = extract_hltb_row_data(row_text)
                            elif "Co-Op" in row_text and "coop" not in hltb_data:
                                hltb_data["coop"] = extract_hltb_row_data(row_text)
                            elif "Competitive" in row_text and "vs" not in hltb_data:
                                hltb_data["vs"] = extract_hltb_row_data(row_text)
                                
                        except Exception as e:
                            log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {row_idx}: {e}")
                            continue
                            
            except Exception as e:
                log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table_idx}: {e}")
                continue
        
        # –ò—â–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ —Å "Vs." (–Ω–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö)
        try:
            vs_elements = page.locator('text="Vs."')
            vs_count = vs_elements.count()
            if vs_count > 0:
                for i in range(min(3, vs_count)):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –≤—Ö–æ–∂–¥–µ–Ω–∏—è
                    try:
                        vs_element = vs_elements.nth(i)
                        surrounding_text = vs_element.evaluate("(e) => (e.closest('div')||e.parentElement||e).innerText")
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–±–ª–∏—Ü–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Ä–µ–º—è, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                        if "Hours" in surrounding_text and "table" not in str(vs_element.locator("..").get_attribute("tagName")).lower():
                            vs_data = extract_vs_data_from_text(surrounding_text)
                            if vs_data and "vs" not in hltb_data:
                                hltb_data["vs"] = vs_data
                                log_message(f"üéØ –ù–∞–π–¥–µ–Ω—ã Vs. –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –±–ª–æ–∫–µ: {vs_data}")
                    except Exception as e:
                        log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Vs. –±–ª–æ–∫–∞ {i}: {e}")
                        continue
        except Exception as e:
            log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Vs. –±–ª–æ–∫–æ–≤: {e}")
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ Vs. –¥–∞–Ω–Ω—ã–µ (—á–∏—Å—Ç–æ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–Ω—ã–µ –∏–≥—Ä—ã), –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if hltb_data and "vs" in hltb_data and len(hltb_data) == 1:
            log_message("üéÆ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —á–∏—Å—Ç–æ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–Ω–∞—è –∏–≥—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º Vs. –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
            # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ vs
        elif hltb_data and "vs" in hltb_data and len(hltb_data) == 2 and "stores" in hltb_data:
            log_message("üéÆ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —á–∏—Å—Ç–æ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–Ω–∞—è –∏–≥—Ä–∞ —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏")
            # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ vs –∏ stores
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã
        store_links = extract_store_links(page)
        if store_links:
            hltb_data["stores"] = store_links
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if hltb_data:
            categories = []
            for key, value in hltb_data.items():
                if key != "stores" and isinstance(value, dict) and "t" in value:
                    categories.append(f"{key}: {value['t']}")
            if categories:
                log_message(f"üìä –ù–∞–π–¥–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(categories)}")
        
        return hltb_data if hltb_data else None
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return None

def extract_store_links(page):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä—ã"""
    try:
        store_links = {}
        
        # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã
        store_selectors = {
            "steam": "a[href*='store.steampowered.com']",
            "epic": "a[href*='epicgames.com']",
            "gog": "a[href*='gog.com']",
            "humble": "a[href*='humblebundle.com']",
            "itch": "a[href*='itch.io']",
            "origin": "a[href*='origin.com']",
            "uplay": "a[href*='uplay.com']",
            "battlenet": "a[href*='battle.net']",
            "psn": "a[href*='playstation.com']",
            "xbox": "a[href*='xbox.com']",
            "nintendo": "a[href*='nintendo.com']"
        }
        
        for store_name, selector in store_selectors.items():
            try:
                link_element = page.locator(selector).first
                if link_element.count() > 0:
                    href = link_element.get_attribute("href")
                    if href:
                        # –û—á–∏—â–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è GOG
                        if store_name == "gog" and "adtraction.com" in href:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π
                            import re
                            match = re.search(r'url=([^&]+)', href)
                            if match:
                                href = match.group(1)
                                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL
                                from urllib.parse import unquote
                                href = unquote(href)
                        
                        store_links[store_name] = href
            except:
                continue
        
        if store_links:
            log_message(f"üõí –ù–∞–π–¥–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã: {list(store_links.keys())}")
        
        return store_links if store_links else None
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã: {e}")
        return None

def extract_hltb_row_data(row_text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã HLTB (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)"""
    try:
        import re
        
        # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º K —Ñ–æ—Ä–º–∞—Ç –∏ —Ç–∞–±—ã)
        # –ü—Ä–∏–º–µ—Ä—ã: "Main Story 54 660h 37m" -> 54, "Main Story	1.7K	15h 31m" -> 1700
        polled_match = re.search(r'^[A-Za-z\s/\+]+\s+(\d+(?:\.\d+)?[Kk]?)\s+', row_text)
        if not polled_match:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Å —Ç–∞–±–∞–º–∏: "Main Story	1.7K	15h 31m"
            polled_match = re.search(r'^[A-Za-z\s/\+]+\t+(\d+(?:\.\d+)?[Kk]?)\t+', row_text)
        if not polled_match:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫: —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
            polled_match = re.search(r'(\d+(?:\.\d+)?[Kk]?)\s+(?:\d+h|\d+\s*Hours?)', row_text)
        
        polled = None
        if polled_match:
            polled_str = polled_match.group(1)
            if 'K' in polled_str.upper():
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º K –≤ —Ç—ã—Å—è—á–∏
                number = float(polled_str.replace('K', '').replace('k', ''))
                polled = int(number * 1000)
            else:
                polled = int(float(polled_str))
        
        # –ò—â–µ–º –≤—Ä–µ–º–µ–Ω–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        times = []
        
        # –£–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –∏–∑ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏
        # –ü—Ä–∏–º–µ—Ä: "Main Story 707 5h 7m 5h 2h 45m 9h 1m" -> "5h 7m 5h 2h 45m 9h 1m"
        # –ò–ª–∏: "Main Story	1.7K	15h 31m	15h	11h 37m	25h 37m" -> "15h 31m	15h	11h 37m	25h 37m"
        time_part = re.sub(r'^[A-Za-z\s/\+]+\s+\d+(?:\.\d+)?[Kk]?\s+', '', row_text)
        if time_part == row_text:  # –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º —Å —Ç–∞–±–∞–º–∏
            time_part = re.sub(r'^[A-Za-z\s/\+]+\t+\d+(?:\.\d+)?[Kk]?\t+', '', row_text)
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º–µ–Ω–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ: Average, Median, Rushed, Leisure
        # –§–æ—Ä–º–∞—Ç: "5h 7m 5h 2h 45m 9h 1m"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –∏—â–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–∞–±—ã –∏ –ø—Ä–æ–±–µ–ª—ã)
        combined_pattern = r'(\d+h\s*\d+m|\d+(?:\.\d+)?[¬Ω]?\s*Hours?|\d+h)'
        
        # –ò—â–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ
        matches = re.findall(combined_pattern, time_part)
        for match in matches:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ç–∞–±—ã
            clean_match = re.sub(r'\s+', ' ', match.strip())
            times.append(clean_match)
        
        if len(times) < 1:
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç—Ä–æ–∫–∏
        is_single_player = any(keyword in row_text for keyword in ["Main Story", "Main + Extras", "Completionist"])
        is_multi_player = any(keyword in row_text for keyword in ["Co-Op", "Competitive"])
        
        result = {}
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–∞ –≤—Ä–µ–º–µ–Ω–∏ (Average –∏ Median)
        average_time = times[0] if len(times) > 0 else None
        median_time = times[1] if len(times) > 1 else None
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –º–µ–∂–¥—É Average –∏ Median
        final_time = calculate_average_time(average_time, median_time)
        result["t"] = round_time(final_time) if final_time else None
        
        if polled:
            result["p"] = polled
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if is_single_player and len(times) >= 4:
            # Single-Player: Average, Median, Rushed, Leisure
            result["r"] = round_time(times[2])  # Rushed (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–æ)
            result["l"] = round_time(times[3])  # Leisure (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–æ)
            
        elif is_multi_player and len(times) >= 4:
            # Multi-Player: Average, Median, Least, Most
            result["min"] = round_time(times[2])  # Least (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–æ)
            result["max"] = round_time(times[3])  # Most (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–æ)
            
        return result
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏: {e}")
        return None

def calculate_average_time(time1_str, time2_str):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –¥–≤—É–º—è –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
    try:
        def parse_time_to_minutes(time_str):
            if not time_str:
                return 0
            
            # –£–±–∏—Ä–∞–µ–º "Hours" –µ—Å–ª–∏ –µ—Å—Ç—å
            time_str = time_str.replace("Hours", "").strip()
            
            total_minutes = 0
            
            # –ü–∞—Ä—Å–∏–º —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
            if "h" in time_str and "m" in time_str:
                # –§–æ—Ä–º–∞—Ç "660h 37m"
                import re
                hours_match = re.search(r'(\d+)h', time_str)
                minutes_match = re.search(r'(\d+)m', time_str)
                
                if hours_match:
                    total_minutes += int(hours_match.group(1)) * 60
                if minutes_match:
                    total_minutes += int(minutes_match.group(1))
                    
            elif "h" in time_str:
                # –¢–æ–ª—å–∫–æ —á–∞—Å—ã "660h"
                import re
                hours_match = re.search(r'(\d+)h', time_str)
                if hours_match:
                    total_minutes = int(hours_match.group(1)) * 60
                    
            elif time_str.replace(".", "").isdigit():
                # –¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ (—á–∞—Å—ã)
                total_minutes = float(time_str) * 60
                
            return total_minutes
        
        minutes1 = parse_time_to_minutes(time1_str)
        minutes2 = parse_time_to_minutes(time2_str)
        
        if minutes1 == 0 and minutes2 == 0:
            # –ï—Å–ª–∏ –æ–±–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–≤–Ω—ã 0, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ, –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
            return round_time(time1_str or time2_str) if (time1_str or time2_str) else None
        
        if minutes2 == 0:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ, –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
            return round_time(time1_str) if time1_str else None
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ
        avg_minutes = (minutes1 + minutes2) / 2
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∞—Å—ã
        hours = avg_minutes / 60
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ
        if hours >= 1:
            if hours == int(hours):
                return f"{int(hours)}h"
            else:
                return f"{hours:.1f}h"
        else:
            return f"{int(avg_minutes)}m"
            
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return time1_str or time2_str

def extract_vs_data_from_text(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç Vs. –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    try:
        import re
        
        # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è —á–∏—Ç–∞–µ–º–æ–≥–æ –ª–æ–≥–∞
        clean_text = text.replace('\n', ' ').replace('\r', ' ')
        log_message(f"üîç –ò—â–µ–º Vs. –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ: '{clean_text[:200]}...'")
        
        # –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã Vs. –¥–∞–Ω–Ω—ã—Ö
        patterns = [
            r'Vs\.\s*\|\s*(\d+(?:\.\d+)?)\s*Hours?',  # "Vs. | 1767 Hours"
            r'Vs\.\s+(\d+(?:\.\d+)?)\s*Hours?',        # "Vs. 1767 Hours"
            r'Vs\.\s*(\d+(?:\.\d+)?)\s*Hours?',        # "Vs.1767 Hours"
            r'Vs\.\s*(\d+(?:\.\d+)?[¬Ω]?)\s*Hours?',    # "Vs. 1767¬Ω Hours"
        ]
        
        for pattern in patterns:
            vs_match = re.search(pattern, text)
            if vs_match:
                time_str = vs_match.group(1)
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä–æ–±–Ω—ã–µ —á–∞—Å—ã —Å ¬Ω
                if '¬Ω' in time_str:
                    time_str = time_str.replace('¬Ω', '.5')
                
                hours = float(time_str)
                
                if hours >= 1:
                    if hours == int(hours):
                        formatted_time = f"{int(hours)}h"
                    else:
                        formatted_time = f"{hours:.1f}h"
                else:
                    formatted_time = f"{int(hours * 60)}m"
                
                log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã Vs. –¥–∞–Ω–Ω—ã–µ: {formatted_time}")
                return {"t": formatted_time}
        
        log_message("‚ùå Vs. –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Vs. –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def extract_time_and_polled_from_row(row_text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        # –ò—â–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "Xh Ym"
        time_match = re.search(r'(\d+h\s*\d*m)', row_text)
        if time_match:
            time_str = time_match.group(1)
            rounded_time = round_time(time_str)
            
            # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ - –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–æ–∏—Å–∫
            polled_count = None
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –ò—â–µ–º —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ "Polled"
            polled_match = re.search(r'(\d+(?:\.\d+)?[Kk]?)\s*(?:Polled|polled)', row_text, re.IGNORECASE)
            if polled_match:
                polled_str = polled_match.group(1)
                polled_count = parse_polled_number(polled_str)
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –ò—â–µ–º —á–∏—Å–ª–æ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (—á–∞—Å—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º)
            if not polled_count:
                first_number_match = re.search(r'^(\d+(?:\.\d+)?[Kk]?)', row_text.strip())
                if first_number_match:
                    polled_str = first_number_match.group(1)
                    polled_count = parse_polled_number(polled_str)
            
            # –í–∞—Ä–∏–∞–Ω—Ç 3: –ò—â–µ–º –ª—é–±–æ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–µ (–µ—Å–ª–∏ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏)
            if not polled_count:
                any_number_match = re.search(r'(\d+(?:\.\d+)?[Kk]?)', row_text)
                if any_number_match:
                    polled_str = any_number_match.group(1)
                    polled_count = parse_polled_number(polled_str)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
            result = {"t": rounded_time}
            if polled_count:
                result["p"] = polled_count
            
            return result
        return None
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏: {e}")
        return None

def parse_polled_number(polled_str):
    """–ü–∞—Ä—Å–∏—Ç —á–∏—Å–ª–æ –≥–æ–ª–æ—Å–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    try:
        if 'K' in polled_str.upper():
            return int(float(polled_str.upper().replace('K', '')) * 1000)
        else:
            return int(float(polled_str))
    except:
        return None


def save_progress(games_data, current_index, total_games):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    progress_data = {
        "current_index": current_index,
        "total_games": total_games,
        "processed_games": len([g for g in games_data if "hltb" in g]),
        "last_updated": datetime.now().isoformat(),
        "status": "in_progress" if current_index < total_games else "completed"
    }
    
    with open(PROGRESS_FILE, "w", encoding="utf-8") as f:
        json.dump(progress_data, f, indent=2, ensure_ascii=False)

def save_debug_info(game_title, search_variants, candidates, chosen_candidate, hltb_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    try:
        debug_info = {
            "timestamp": datetime.now().isoformat(),
            "game_title": game_title,
            "search_variants": search_variants,
            "candidates": candidates,
            "chosen_candidate": chosen_candidate,
            "hltb_data": hltb_data
        }
        
        debug_file = f"debug_{game_title.replace(' ', '_').replace('/', '_')[:50]}.json"
        with open(debug_file, "w", encoding="utf-8") as f:
            json.dump(debug_info, f, indent=2, ensure_ascii=False)
        
        log_debug(f"–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {debug_file}")
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")

def save_results(games_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    try:
        with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
            for i, game in enumerate(games_data):
                # –ö–∞–∂–¥–∞—è –∏–≥—Ä–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –±–µ–∑ –æ—Ç—Å—Ç—É–ø–æ–≤
                if i > 0:
                    f.write("\n")
                json.dump(game, f, separators=(',', ':'), ensure_ascii=False)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        categories, total_polled, na_count = count_hltb_data(games_data)
        successful = len([g for g in games_data if "hltb" in g])
        
        log_message(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {OUTPUT_FILE}")
        log_message(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {successful}/{len(games_data)} –∏–≥—Ä —Å –¥–∞–Ω–Ω—ã–º–∏ HLTB")
        log_message(f"üìä Main Story: {categories['ms']} ({total_polled['ms']} –≥–æ–ª–æ—Å–æ–≤), Main+Extras: {categories['mpe']} ({total_polled['mpe']} –≥–æ–ª–æ—Å–æ–≤)")
        log_message(f"üìä Completionist: {categories['comp']} ({total_polled['comp']} –≥–æ–ª–æ—Å–æ–≤), All: {categories['all']} ({total_polled['all']} –≥–æ–ª–æ—Å–æ–≤)")
        log_message(f"üìä Co-Op: {categories['coop']} ({total_polled['coop']} –≥–æ–ª–æ—Å–æ–≤), Vs: {categories['vs']} ({total_polled['vs']} –≥–æ–ª–æ—Å–æ–≤)")
        log_message(f"üìä N/A (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ): {na_count} –∏–≥—Ä")
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        raise

def log_progress(current, total, start_time):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    elapsed = time.time() - start_time
    rate = current / elapsed * 60 if elapsed > 0 else 0  # –∏–≥—Ä –≤ –º–∏–Ω—É—Ç—É
    eta = (total - current) / rate if rate > 0 else 0  # –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    
    log_message(f"üìä {current}/{total} | {rate:.1f} –∏–≥—Ä/–º–∏–Ω | ETA: {eta:.0f} –º–∏–Ω")

def update_html_with_hltb(html_file, hltb_data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç HTML —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ HLTB –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º HTML
        with open(html_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º gamesList
        start = content.find('const gamesList = [')
        if start == -1:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω const gamesList –≤ HTML —Ñ–∞–π–ª–µ")
        
        # –ò—â–µ–º –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ - –º–æ–∂–µ—Ç –±—ã—Ç—å ]; –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ ]
        end = content.find('];', start)
        if end == -1:
            end = content.find('\n];', start)
        if end == -1:
            end = content.find(']', start)
        if end == -1:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ gamesList")
        
        end += 1  # –í–∫–ª—é—á–∞–µ–º —Å–∏–º–≤–æ–ª ]
        if content[end] == ';':
            end += 1  # –í–∫–ª—é—á–∞–µ–º —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –µ—Å–ª–∏ –µ—Å—Ç—å
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π JSON —Å HLTB –¥–∞–Ω–Ω—ã–º–∏ (–≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É)
        new_games_list = json.dumps(hltb_data, separators=(',', ':'), ensure_ascii=False)
        new_content = content[:start] + f'const gamesList = {new_games_list}' + content[end:]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π HTML
        with open(html_file, 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        log_message(f"‚úÖ HTML —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {html_file}")
        return True
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è HTML: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞"""
    print("üîß –§—É–Ω–∫—Ü–∏—è main() –≤—ã–∑–≤–∞–Ω–∞")
    log_message("üöÄ –ó–∞–ø—É—Å–∫ HLTB Worker")
    log_message(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    log_message(f"üìÑ –ò—â–µ–º —Ñ–∞–π–ª: {GAMES_LIST_FILE}")
    log_message(f"üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {DEBUG_MODE}")
    log_message(f"üì¶ –ß–∞–Ω–∫: {CHUNK_INDEX}, —Ä–∞–∑–º–µ—Ä: {CHUNK_SIZE}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(GAMES_LIST_FILE):
        log_message(f"‚ùå –§–∞–π–ª {GAMES_LIST_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    log_message(f"‚úÖ –§–∞–π–ª {GAMES_LIST_FILE} –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(GAMES_LIST_FILE)} –±–∞–π—Ç")
    
    setup_directories()
    log_message("üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    try:
        log_message("üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä...")
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä
        games_list = extract_games_list(GAMES_LIST_FILE)
        total_games = len(games_list)
        log_message(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {total_games} –∏–≥—Ä")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–æ–≤ –¥–ª—è GitHub Actions
        if CHUNK_SIZE > 0 and CHUNK_INDEX >= 0:
            start_idx = CHUNK_INDEX * CHUNK_SIZE
            end_idx = min(start_idx + CHUNK_SIZE, total_games)
            games_list = games_list[start_idx:end_idx]
            log_message(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫ {CHUNK_INDEX}: –∏–≥—Ä—ã {start_idx}-{end_idx-1} ({len(games_list)} –∏–≥—Ä)")
        elif CHUNK_INDEX > 0:
            log_message(f"‚ö†Ô∏è CHUNK_INDEX={CHUNK_INDEX} –Ω–æ CHUNK_SIZE=0, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–≥—Ä—ã")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å, –µ—Å–ª–∏ –µ—Å—Ç—å
        if os.path.exists(PROGRESS_FILE):
            with open(PROGRESS_FILE, "r", encoding="utf-8") as f:
                progress = json.load(f)
            start_index = progress.get("current_index", 0)
            log_message(f"üìÇ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø–æ–∑–∏—Ü–∏–∏ {start_index}")
        else:
            start_index = 0
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        log_message("üåê –ó–∞–ø—É—Å–∫–∞–µ–º Playwright...")
        with sync_playwright() as p:
            log_message("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Chromium...")
            browser = p.chromium.launch(headless=True)
            log_message("‚úÖ Chromium –∑–∞–ø—É—â–µ–Ω")
            
            log_message("üîß –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞...")
            context = browser.new_context(
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0 Safari/537.36",
                viewport={"width": 1280, "height": 800},
                locale="en-US"
            )
            log_message("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω")
            
            log_message("üìÑ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
            page = context.new_page()
            log_message("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–π –±–∞–Ω IP
            log_message("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å HowLongToBeat.com...")
            try:
                page.goto(BASE_URL, timeout=15000)
                page.wait_for_load_state("domcontentloaded", timeout=10000)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                title = page.title()
                log_message(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {title}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                search_box = page.locator('input[type="search"], input[name="q"]')
                if search_box.count() > 0:
                    log_message("‚úÖ –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ - —Å–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    log_message("‚ö†Ô∏è –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                page_content = page.content()
                if "blocked" in page_content.lower() or "access denied" in page_content.lower():
                    log_message("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ë–õ–û–ö–ò–†–û–í–ö–ê IP! –°–∞–π—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –¥–æ—Å—Ç—É–ø")
                    return
                elif "cloudflare" in page_content.lower() and "checking your browser" in page_content.lower():
                    log_message("‚ö†Ô∏è Cloudflare –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ - –∂–¥–µ–º...")
                    time.sleep(5)
                    page_content = page.content()
                    if "checking your browser" in page_content.lower():
                        log_message("‚ùå Cloudflare –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø")
                        return
                
                log_message("‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–≥—Ä")
                
            except Exception as e:
                log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞: {e}")
                log_message("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã...")
            
            start_time = time.time()
            processed_count = 0
            blocked_count = 0  # –°—á–µ—Ç—á–∏–∫ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–≥—Ä—ã
            for i in range(start_index, total_games):
                game = games_list[i]
                game_title = game.get("title", "")
                game_year = game.get("year")
                
                log_message(f"üéÆ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {i+1}/{total_games}: {game_title} ({game_year})")
                
                # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ HLTB —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
                hltb_data = search_game_on_hltb(page, game_title, game_year)
                
                if hltb_data:
                    game["hltb"] = hltb_data
                    processed_count += 1
                    blocked_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                    log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {hltb_data}")
                else:
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º N/A –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                    game["hltb"] = {"ms": "N/A", "mpe": "N/A", "comp": "N/A", "all": "N/A"}
                    log_message(f"‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è: {game_title} - –∑–∞–ø–∏—Å–∞–Ω–æ N/A")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    page_content = page.content()
                    if "blocked" in page_content.lower() or "access denied" in page_content.lower():
                        blocked_count += 1
                        log_message(f"üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ #{blocked_count}")
                        
                        # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø–æ–¥—Ä—è–¥ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                        if blocked_count >= 3:
                            log_message("üí• –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø–æ–¥—Ä—è–¥! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É.")
                            log_message("üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ.")
                            break
                
                # –í–µ–∂–ª–∏–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏ –¥–ª—è GitHub Actions
                random_delay(0.4, 1.2)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫ –±–æ—Ç
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ä—ã–≤
                start_time = check_break_time(start_time, i + 1)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 25 –∏–≥—Ä (—É–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è GitHub Actions)
                if (i + 1) % 25 == 0:
                    save_progress(games_list, i + 1, total_games)
                    log_progress(i + 1, total_games, start_time)
            
            browser.close()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        save_results(games_list)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        successful = len([g for g in games_list if "hltb" in g])
        log_message(f"üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {successful}/{total_games} –∏–≥—Ä ({successful/total_games*100:.1f}%)")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º HTML —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        log_message("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HTML —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ HLTB...")
        if update_html_with_hltb(GAMES_LIST_FILE, games_list):
            log_message("‚úÖ HTML —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        else:
            log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å HTML —Ñ–∞–π–ª")
        
    except Exception as e:
        log_message(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    print("üéØ –ó–∞–ø—É—Å–∫–∞–µ–º main()...")
    try:
        main()
        print("‚úÖ main() –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}")
        import traceback
        traceback.print_exc()
        raise
