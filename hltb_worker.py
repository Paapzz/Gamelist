#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
HLTB Worker - –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∏ –æ—Ç–ª–∞–∂–µ–Ω–Ω—ã–π
–ó–∞–º–µ–Ω–∞/—É–ª—É—á—à–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.
–û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
 - –±–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å–ø–∏—Å–∫–∞ –∏–≥—Ä –∏–∑ HTML (—É—Å—Ç—Ä–∞–Ω—è–µ—Ç JSONDecodeError)
 - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–∞–º–ø–æ–≤ (–±–µ–∑ ':', '?' –∏ —Ç.–ø.)
 - wait_for_selector / —É–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è '0 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤'
 - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML/screenshot/candidates –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 - –±–æ–ª–µ–µ —è–≤–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ —Å–æ–≤–µ—Ç—ã –ø–æ git/artefacts
"""

import os
import re
import json
import time
import random
import logging
import string
import traceback
from urllib.parse import quote
from typing import Optional, Tuple, List, Dict, Any

import requests

# Playwright (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π API)
from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeoutError

# ---------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ---------------------------
BASE_URL = "https://howlongtobeat.com"
GAMES_LIST_FILE = "index111.html"  # –≤–∞—à —Ñ–∞–π–ª —Å const gamesList = [...]
DEBUG_DIR = "debug_dumps"
HLTB_DATA_DIR = "hltb_data"
HLTB_DATA_FILE = os.path.join(HLTB_DATA_DIR, "hltb_data.json")

# –õ–∏–º–∏—Ç—ã/—Ç–∞–π–º–∞—É—Ç—ã
PAGE_NAV_TIMEOUT = 20000
DOMCONTENT_TIMEOUT = 15000
SEARCH_WAIT_SELECTOR_TIMEOUT = 8000

# –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–∞—É–∑ (–º–æ–∂–Ω–æ –ø–æ–¥–±–∏—Ä–∞—Ç—å, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –ø–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
BREAK_INTERVAL_MIN = 300
BREAK_INTERVAL_MAX = 900
BREAK_DURATION_MIN = 30
BREAK_DURATION_MAX = 90

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_FILE = "hltb_worker.log"
VERBOSE = True

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(DEBUG_DIR, exist_ok=True)
os.makedirs(HLTB_DATA_DIR, exist_ok=True)

# ---------------------------
# –ü–æ–º–æ—â–Ω–∏–∫–∏
# ---------------------------
def log_message(msg: str, level: str = "info", show_ts: bool = True):
    ts = time.strftime("[%Y-%m-%d %H:%M:%S]")
    line = f"{ts} {msg}" if show_ts else msg
    if VERBOSE:
        print(line)
    # append to file
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(line + "\n")


def sanitize_filename(name: str) -> str:
    """
    –°–¥–µ–ª–∞—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –¥–ª—è upload-artifact (—É–¥–∞–ª–∏—Ç—å –¥–≤–æ–µ—Ç–æ—á–∏—è –∏ —Ç.–¥.).
    –¢–∞–∫–∂–µ –æ–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º.
    """
    # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    forbidden = r'<>:"/\\|?*\n\r'
    cleaned = "".join(c if c not in forbidden else "_" for c in name)
    # –∑–∞–º–µ–Ω–∏–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ underscore –¥–ª—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    cleaned = re.sub(r'\s+', '_', cleaned).strip('_')
    # –û–±—Ä–µ–∑–∞–µ–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if len(cleaned) > 180:
        cleaned = cleaned[:180]
    return cleaned


def save_debug_dump(name: str, content: Any, mode: str = "text"):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–º–ø –≤ debug_dumps —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–º–µ–Ω–µ–º.
    mode: "text", "json", "binary"
    """
    safe = sanitize_filename(name)
    path = os.path.join(DEBUG_DIR, safe)
    try:
        if mode == "json":
            with open(path + ".json", "w", encoding="utf-8") as f:
                json.dump(content, f, ensure_ascii=False, indent=2)
            log_message(f"üóÇÔ∏è –°–æ—Ö—Ä–∞–Ω—ë–Ω –¥–∞–º–ø –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {path}.json")
        elif mode == "binary":
            with open(path, "wb") as f:
                f.write(content)
            log_message(f"üì∏ –°–æ—Ö—Ä–∞–Ω—ë–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª: {path}")
        else:
            with open(path + ("" if name.endswith(".html") else ".txt"), "w", encoding="utf-8") as f:
                f.write(content if isinstance(content, str) else str(content))
            log_message(f"üìù –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–∞–º–ø: {path}")
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–º–ø–∞ {path}: {e}")


def random_delay(min_seconds: float, max_seconds: float):
    delay = random.uniform(min_seconds, max_seconds)
    log_message(f"‚è≥ –ü–∞—É–∑–∞ {delay:.1f}—Å")
    time.sleep(delay)


# ---------------------------
# –ü–∞—Ä—Å–µ—Ä —Å–ø–∏—Å–∫–∞ –∏–≥—Ä –∏–∑ HTML —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç JSONDecodeError
# ---------------------------
def js_array_to_json(js_text: str) -> str:
    """–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≤–µ—Å—Ç–∏ JS-–ø–æ–¥–æ–±–Ω—ã–π –º–∞—Å—Å–∏–≤ / –æ–±—ä–µ–∫—Ç –∫ –≤–∞–ª–∏–¥–Ω–æ–º—É JSON-—Ñ–æ—Ä–º–∞—Ç—É.
       - —É–¥–∞–ª—è–µ—Ç JS-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
       - —É–¥–∞–ª—è–µ—Ç trailing commas
       - –∑–∞–º–µ–Ω—è–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –Ω–∞ –¥–≤–æ–π–Ω—ã–µ (–¥–ª—è —Å—Ç—Ä–æ–∫)
       - –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –≤ –∫–∞–≤—ã—á–∫–∏
    """
    text = js_text

    # remove JS comments (single-line and multi-line)
    text = re.sub(r'//.*?\n', '\n', text)
    text = re.sub(r'/\*.*?\*/', '', text, flags=re.S)

    # remove newlines inside strings carefully - simpler: work mostly with structural fixes
    # remove trailing commas before ] or }
    text = re.sub(r',\s*(?=[}\]])', '', text)

    # replace single-quoted strings with double-quoted strings (naive, but works for many cases)
    def _single_to_double(m):
        inner = m.group(1)
        # unescape existing escapes
        inner = inner.replace('\\"', '"').replace("\\'", "'")
        # JSON encode properly
        return json.dumps(inner)
    text = re.sub(r"'([^'\\]*(?:\\.[^'\\]*)*)'", _single_to_double, text)

    # quote unquoted object keys:  key:  -> "key":
    # but avoid touching already quoted ones
    text = re.sub(r'(?P<pre>[\{\s,])(?P<key>[A-Za-z_][A-Za-z0-9_\-]*)\s*:', lambda m: f'{m.group("pre")}"{m.group("key")}":', text)

    return text


def extract_games_list_from_html(content: str) -> List[Dict[str, Any]]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç const gamesList = [...] –∏–∑ HTML –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Python-list.
    –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–∏—Å—Ç—ã–π json.loads, –ø—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî –æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ js_array_to_json.
    """
    try:
        log_message("üîç –ò—â–µ–º 'const gamesList = ['.")
        start = content.find('const gamesList =')
        if start == -1:
            # –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ–∑ 'const'
            start = content.find('gamesList =')
            if start == -1:
                raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω const gamesList –≤ HTML —Ñ–∞–π–ª–µ")

        # –Ω–∞–π—Ç–∏ –Ω–∞—á–∞–ª–æ '['
        bracket_idx = content.find('[', start)
        if bracket_idx == -1:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Å–∏–º–≤–æ–ª '[' –ø–æ—Å–ª–µ gamesList")

        # –ø–∞—Ä—Å–∏–º —Å–∫–æ–±–∫–∏
        bracket_count = 0
        end_idx = None
        for i, ch in enumerate(content[bracket_idx:], bracket_idx):
            if ch == '[':
                bracket_count += 1
            elif ch == ']':
                bracket_count -= 1
                if bracket_count == 0:
                    end_idx = i + 1
                    break

        if end_idx is None:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ gamesList")

        raw = content[bracket_idx:end_idx]
        log_message(f"‚úÇÔ∏è –ò–∑–≤–ª–µ—á—ë–Ω —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ä–∞–∑–º–µ—Ä–∞ {len(raw)}")

        # –ø–æ–ø—ã—Ç–∫–∞ 1: —á–∏—Å—Ç—ã–π json.loads
        try:
            parsed = json.loads(raw)
            log_message(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ JSON —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º json.loads (–∏–≥—Ä: {len(parsed)})")
            return parsed
        except Exception as e1:
            log_message(f"‚ö†Ô∏è json.loads –Ω–µ –ø—Ä–æ—à—ë–ª: {e1} ‚Äî –ø—ã—Ç–∞–µ–º js->json —á–∏—Å—Ç–∫—É")

        # –æ—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
        cleaned = js_array_to_json(raw)
        log_message(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ parse –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏; –¥–ª–∏–Ω–∞ cleaned={len(cleaned)}")
        try:
            parsed = json.loads(cleaned)
            log_message(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ JSON –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ (–∏–≥—Ä: {len(parsed)})")
            return parsed
        except Exception as e2:
            # –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –≤—Ä—É—á–Ω—É—é reemplaza –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –∏ ast.literal_eval
            log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {e2}")
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å gamesList - —Ñ–æ—Ä–º–∞—Ç —Å–ª–∏—à–∫–æ–º –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π") from e2

    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä: {e}")
        raise


# ---------------------------
# –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –ø–∞—Ä—Å–µ—Ä—ã HLTB-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
# ---------------------------
def clean_title_for_comparison(s: str) -> str:
    if not s:
        return ""
    s = s.lower().strip()
    s = re.sub(r'[^a-z0-9–∞-—è—ë\s]', ' ', s, flags=re.I)
    s = re.sub(r'\s+', ' ', s).strip()
    return s


def calculate_title_similarity(original: str, candidate: str) -> float:
    """
    –ü—Ä–æ—â–µ: –±–∞–∑–æ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ —Ç–æ–∫–µ–Ω–∞–º + LCS.
    (–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –≤–∞—à–µ–π –≤–µ—Ä—Å–∏–µ–π, –Ω–æ —É–ø—Ä–æ—â–µ–Ω–∞/—Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞)
    """
    try:
        if not original or not candidate:
            return 0.0
        a = clean_title_for_comparison(original)
        b = clean_title_for_comparison(candidate)
        if a == b:
            return 1.0
        a_tokens = a.split()
        b_tokens = b.split()
        if not a_tokens or not b_tokens:
            return 0.0
        common = set(a_tokens) & set(b_tokens)
        precision = len(common) / max(1, len(b_tokens))
        recall = len(common) / max(1, len(a_tokens))
        # LCS rough:
        lcs = 0
        i = 0
        for token in b_tokens:
            if i < len(a_tokens) and token == a_tokens[i]:
                lcs += 1
                i += 1
        score = 0.6 * recall + 0.25 * precision + 0.15 * (lcs / max(1, len(a_tokens)))
        return min(1.0, max(0.0, score))
    except Exception:
        return 0.0


def extract_year_from_game_page(page, link_locator) -> Optional[int]:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –≥–æ–¥ –∏–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏/—Ç–µ–≥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    –í–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–ª–∞–ª–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É ‚Äî –∑–¥–µ—Å—å –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ).
    """
    try:
        txt = link_locator.text_content().strip()
        # –Ω–∞–π—Ç–∏ 4-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ
        m = re.search(r'(\b19\d{2}\b|\b20\d{2}\b)', txt)
        if m:
            return int(m.group(1))
    except Exception:
        return None
    return None


# ---------------------------
# –ü–æ–∏—Å–∫ –∏ –≤—ã–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
# ---------------------------
def find_best_match_with_year(page, game_links, original_title, game_year=None):
    """
    –ü—Ä–æ—Ö–æ–¥ –ø–æ –ø–µ—Ä–≤—ã–º N —Å—Å—ã–ª–∫–∞–º –∏ –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å —É—á—ë—Ç–æ–º title_score –∏ year_score.
    –£–ª—É—á—à–µ–Ω–∏–µ: –¥–µ–ª–∞—Ç—å .text_content(), –∂–¥–∞—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä.
    """
    try:
        best_match = None
        best_score = -1.0
        best_title = ""
        best_year_score = 0.0

        limit = min(game_links.count(), 12)
        candidates = []
        for i in range(limit):
            link = game_links.nth(i)
            try:
                link_text = link.text_content().strip()
            except Exception:
                link_text = link.inner_text().strip() if hasattr(link, "inner_text") else ""
            if not link_text:
                continue

            title_score = calculate_title_similarity(original_title, link_text)
            hltb_year = extract_year_from_game_page(page, link) if game_year else None
            year_score = 1.0 if (game_year and hltb_year and game_year == hltb_year) else 0.0
            is_exact = 1 if clean_title_for_comparison(link_text) == clean_title_for_comparison(original_title) else 0
            tokens = len(clean_title_for_comparison(link_text).split())
            combined = title_score * 0.7 + year_score * 0.3

            candidates.append({
                "link": link,
                "title": link_text,
                "title_score": title_score,
                "year_score": year_score,
                "combined": combined,
                "is_exact": is_exact,
                "tokens": tokens
            })

        # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ combined, –∑–∞—Ç–µ–º year_score, –∑–∞—Ç–µ–º is_exact, –∑–∞—Ç–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É —á–∏—Å–ª—É —Ç–æ–∫–µ–Ω–æ–≤
        if candidates:
            candidates.sort(key=lambda c: (c["combined"], c["year_score"], c["is_exact"], -c["tokens"]), reverse=True)
            best = candidates[0]
            if best["combined"] >= 0.3:
                # –ª–æ–≥–∏—Ä—É–µ–º
                if game_year and best["year_score"]:
                    log_message(f"üéØ –í—ã–±—Ä–∞–Ω–æ: '{best['title']}' (combined: {best['combined']:.2f}, –≥–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω)")
                else:
                    log_message(f"üéØ –í—ã–±—Ä–∞–Ω–æ: '{best['title']}' (combined: {best['combined']:.2f})")
                return best["link"], best["title"], best["combined"]
        return None, "", 0.0
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {e}")
        return None, "", 0.0


# ---------------------------
# –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–¥–Ω–æ–π –∏–≥—Ä—ã (single attempt)
# ---------------------------
def search_game_single_attempt(page, game_title: str, game_year: Optional[int] = None) -> Optional[Tuple[Dict[str, str], str]]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω –ø–æ–∏—Å–∫ –Ω–∞ HLTB –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–±–µ–∑ —Ä–µ—Ç—Ä–∞–µ–≤), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (hltb_data_dict, found_title) –∏–ª–∏ None.
    """
    try:
        safe_q = quote(game_title, safe="")
        search_url = f"{BASE_URL}/?q={safe_q}"
        log_message(f"üîç –ò—â–µ–º: '{game_title}' -> URL: {search_url}")

        page.goto(search_url, timeout=PAGE_NAV_TIMEOUT)
        page.wait_for_load_state("domcontentloaded", timeout=DOMCONTENT_TIMEOUT)

        # –î–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ–¥–≥—Ä—É–∑–∫–∏
        try:
            # –∂–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            page.wait_for_selector('a[href^="/game/"]', timeout=SEARCH_WAIT_SELECTOR_TIMEOUT)
        except PlaywrightTimeoutError:
            # –Ω–µ –Ω–∞—à–ª–∏ - –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º .locator.count()
            log_message("‚ö†Ô∏è wait_for_selector —Ç–∞–π–º–∞—É—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–∫–∞—Ç–æ—Ä—ã (–≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)")

        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞—Ç–æ—Ä—ã
        game_links = page.locator('a[href^="/game/"]')
        found_count = 0
        try:
            found_count = game_links.count()
        except Exception as ex:
            log_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å count() –¥–ª—è game_links: {ex}")
            found_count = 0

        log_message(f"üîé –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {found_count}")

        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ ‚Äî –ø–æ–ø—ã—Ç–∫–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ reload/fallback
        if found_count == 0:
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–º–ø—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            html = page.content()
            save_debug_dump(f"0_{game_title}_search_html_{int(time.time())}.html", html, mode="text")
            # —Å–∫—Ä–∏–Ω—à–æ—Ç (binary)
            try:
                ss = page.screenshot()
                save_debug_dump(f"0_{game_title}_screenshot_{int(time.time())}.png", ss, mode="binary")
            except Exception as e:
                log_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å screenshot: {e}")
            # –∫–∞–Ω–¥–∏–¥–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
            save_debug_dump(f"0_{game_title}_candidates_{int(time.time())}", [], mode="json")
            return None

        # –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –∏–∑ –ø–µ—Ä–≤—ã—Ö N
        best_link, best_title, similarity = find_best_match_with_year(page, game_links, game_title, game_year)
        if not best_link:
            log_message("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π best_match –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
            return None

        best_href = best_link.get_attribute("href")
        if not best_href:
            log_message("‚ö†Ô∏è best_link –Ω–µ –∏–º–µ–µ—Ç href")
            return None

        full_url = f"{BASE_URL}{best_href}"
        page.goto(full_url, timeout=PAGE_NAV_TIMEOUT)
        page.wait_for_load_state("domcontentloaded", timeout=DOMCONTENT_TIMEOUT)
        random_delay(0.5, 1.5)

        page_content = page.content()
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        if "blocked" in page_content.lower() or "access denied" in page_content.lower():
            log_message("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ë–õ–û–ö–ò–†–û–í–ö–ê IP –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–≥—Ä—ã!")
            return None
        if "cloudflare" in page_content.lower() and "checking your browser" in page_content.lower():
            log_message("‚ö†Ô∏è Cloudflare –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–≥—Ä—ã - –∂–¥–µ–º 5—Å")
            time.sleep(5)
            page_content = page.content()
            if "checking your browser" in page_content.lower():
                log_message("‚ùå Cloudflare –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä—ã")
                return None

        # –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä—ã
        hltb_data = extract_hltb_data_from_page(page)
        return (hltb_data, best_title) if hltb_data else None

    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä—ã '{game_title}': {e}")
        log_message(traceback.format_exc())
        return None


def extract_hltb_data_from_page(page) -> Optional[Dict[str, str]]:
    """
    –ú–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∏—â–µ–º –±–ª–æ–∫–∏ Single-Player, Main Story, Completionist –∏ —Ç.–ø.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –ø–æ–ª—è–º–∏: ms, mpe, comp, all
    """
    try:
        content = page.content()
        # –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ HLTB –µ—Å—Ç—å –±–ª–æ–∫–∏ '.game_times' –∏ —Ç–∞–±–ª–∏—Ü—ã; –ø–æ–ø—Ä–æ–±—É–µ–º regex-–ø–æ–∏—Å–∫
        ms = mpe = comp = all_time = None

        # –ø—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏ ‚Äî –ø–∞—Ä—Å–∏–º –≤–∏–¥–∏–º—É—é —Ç–∞–±–ª–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏
        # –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–µ–µ
        text = re.sub(r'\s+', ' ', content)

        # –ü–æ–ø—Ä–æ–±—É–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è (—É–ø—Ä–æ—â—ë–Ω–Ω–æ, —Ç.–∫. —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–π—Ç–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è)
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "Main Story 10 Hours" –∏–ª–∏ "Main Story: 10 Hours"
        patterns = {
            "ms": r'(Main Story[:\s]*\s*([0-9]+(?:\.[0-9]+)?\s*Hours?))',
            "mpe": r'(Main +/ +**???)',  # placeholder - –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        }

        # –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± ‚Äî –∏—Å–∫–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ playwright locators
        try:
            # Single Player
            el = page.locator(".game_times .game_time").first
            # —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å, –ø–æ—ç—Ç–æ–º—É –æ–±–µ—Ä–Ω—ë–º –≤ try
        except Exception:
            el = None

        # –ù–∏–∂–µ ‚Äî —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –∏—Å–∫–∞—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º 'time' –∏ –±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç
        try:
            rows = page.locator(".game_times .time")
            if rows.count() > 0:
                # —Å–æ–±—Ä–∞—Ç—å –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤
                times = []
                limit = min(rows.count(), 12)
                for i in range(limit):
                    try:
                        t = rows.nth(i).text_content().strip()
                        times.append(t)
                    except Exception:
                        continue
                # –ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –Ω–∞–∑–Ω–∞—á–∞–µ–º –≤ –ø–æ—Ä—è–¥–∫–µ –ø–æ—è–≤–ª–µ–Ω–∏—è
                if times:
                    # –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ ms/mpe/comp/all –ø–æ –Ω–∞–ª–∏—á–∏—é —Å–ª–æ–≤
                    joined = " | ".join(times)
                    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ 'all' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–ª–∞–¥–∫–∏
                    all_time = joined
        except Exception:
            pass

        # fallback - –≤—ã—Å—Ç–∞–≤–∏–º N/A —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        result = {
            "ms": ms if ms else "N/A",
            "mpe": mpe if mpe else "N/A",
            "comp": comp if comp else "N/A",
            "all": all_time if all_time else "N/A"
        }

        log_message(f"üîé –ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {result}")
        return result
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ extract_hltb_data_from_page: {e}")
        log_message(traceback.format_exc())
        return None


# ---------------------------
# –í–Ω–µ—à–Ω—è—è –æ–±—ë—Ä—Ç–∫–∞: –ø–æ–∏—Å–∫ —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
# ---------------------------
def generate_alternative_titles(game_title: str) -> List[str]:
    """
    –£–ª—É—á—à—ë–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤, –≤–∞—à–∞ –≤–µ—Ä—Å–∏—è –≤ —Ä–µ–ø–æ ‚Äî –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞.
    """
    # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: —É–±—Ä–∞—Ç—å —Å–∫–æ–±–∫–∏, /-–≤–∞—Ä–∏–∞–Ω—Ç—ã, –∑–∞–º–µ–Ω–∏—Ç—å 2 <-> II –∏ —Ç.–¥.
    alts = []
    title = game_title.strip()
    alts.append(title)

    # —É–±—Ä–∞—Ç—å —á–∞—Å—Ç—å –≤ —Å–∫–æ–±–∫–∞—Ö
    no_par = re.sub(r'\([^)]*\)', '', title).strip()
    if no_par and no_par != title:
        alts.append(no_par)

    # –µ—Å–ª–∏ –µ—Å—Ç—å '/', —Ä–∞–∑–±–∏—Ä–∞–µ–º
    if "/" in title:
        parts = [p.strip() for p in title.replace(" / ", "/").split("/")]
        for p in parts:
            if p:
                alts.append(p)
        if len(parts) >= 2:
            alts.append(f"{parts[0]} and {parts[1]}")
            alts.append(f"{parts[0]} & {parts[1]}")

    # —Ä–∏–º—Å–∫–∏–µ/–∞—Ä–∞–±—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    alts2 = set(alts)
    def _add_num_variants(s):
        # –∑–∞–º–µ–Ω–∏–º i/ii/iii –Ω–∞ 1/2/3 –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
        s2 = re.sub(r'\bII\b', '2', s, flags=re.I)
        s3 = re.sub(r'\b2\b', 'II', s, flags=re.I)
        alts2.add(s2)
        alts2.add(s3)
    for a in list(alts):
        _add_num_variants(a)

    # final list
    final = [x for x in alts2 if x]
    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ/–ø–æ–¥—Ä–æ–±–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —à–ª–∏ –ø–µ—Ä–≤—ã–º–∏
    final.sort(key=lambda x: (-len(x.split()), -len(x)))
    return final


def search_game_on_hltb(page, game_title, game_year=None):
    """
    –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –ø–æ–∏—Å–∫ —Å 3 –ø–æ–ø—ã—Ç–∫–∞–º–∏: –æ—Å–Ω–æ–≤–Ω–æ–π + –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã.
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ (–≤–∫–ª—é—á–∞—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–º–ø–æ–≤ –ø—Ä–∏ –Ω—É–ª–µ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤).
    """
    max_attempts = 3
    delays = [0, (15, 18), (65, 70)]

    log_message(f"üîç –ò—â–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: '{game_title}' (–≥–æ–¥: {game_year})")

    # –ø–æ–ø—Ä–æ–±—É–µ–º 1 —Ä–∞–∑ –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    res = search_game_single_attempt(page, game_title, game_year)
    if res:
        hltb_data, found_title = res
        sim = calculate_title_similarity(game_title, found_title)
        if sim >= 1.0:
            log_message(f"üéØ –ù–∞–π–¥–µ–Ω–æ –∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '{found_title}' (—Å—Ö–æ–∂–µ—Å—Ç—å: {sim:.2f})")
            return hltb_data
        else:
            log_message(f"üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: '{found_title}' (—Å—Ö–æ–∂–µ—Å—Ç—å: {sim:.2f})")
            best_result = hltb_data
            best_score = sim
    else:
        log_message("‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã...")
        best_result = None
        best_score = 0.0

    alternatives = generate_alternative_titles(game_title)

    for attempt in range(max_attempts):
        try:
            if attempt > 0:
                log_message(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts} –¥–ª—è '{game_title}'")
                d = delays[attempt]
                if isinstance(d, tuple):
                    random_delay(d[0], d[1])
                else:
                    time.sleep(d)

            for alt in alternatives:
                if alt == game_title:
                    continue
                result_data = search_game_single_attempt(page, alt, game_year)
                if result_data:
                    hltb_data, found_title = result_data
                    sim = calculate_title_similarity(game_title, found_title if found_title else alt)
                    log_message(f"üîé –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ '{alt}' –¥–∞–ª–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ '{found_title}' (sim {sim:.2f})")
                    if sim >= 1.0:
                        log_message(f"üéØ –ù–∞–π–¥–µ–Ω –∏–¥–µ–∞–ª –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–µ: {found_title}")
                        return hltb_data
                    if sim > best_score:
                        best_score = sim
                        best_result = hltb_data

            if best_result:
                log_message(f"üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1}: (score {best_score:.2f})")
                return best_result

        except Exception as e:
            log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1}: {e}")
            log_message(traceback.format_exc())

    return None


# ---------------------------
# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞/—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
# ---------------------------
def save_results(games_list: List[Dict[str, Any]]):
    try:
        with open(HLTB_DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(games_list, f, ensure_ascii=False, indent=2)
        log_message(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {HLTB_DATA_FILE}")
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")


def save_progress(games_list: List[Dict[str, Any]], index: int, total: int):
    try:
        tmp = os.path.join(HLTB_DATA_DIR, f"hltb_data_{index}.json")
        with open(tmp, "w", encoding="utf-8") as f:
            json.dump(games_list, f, ensure_ascii=False, indent=2)
        log_message(f"üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å: {tmp} ({index}/{total})")
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")


def main():
    log_message("üöÄ –ó–∞–ø—É—Å–∫ HLTB Worker (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
    # —á–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª —Å gamesList
    try:
        with open(GAMES_LIST_FILE, "r", encoding="utf-8") as f:
            content = f.read()
        games_list = extract_games_list_from_html(content)
    except Exception as e:
        log_message(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ games list: {e}")
        raise

    total_games = len(games_list)
    log_message(f"üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–æ {total_games} –∏–≥—Ä")

    # Playwright
    try:
        with sync_playwright() as p:
            browser = p.chromium.launch(headless=True)
            context = browser.new_context()
            page = context.new_page()
            log_message("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")

            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞
            try:
                page.goto(BASE_URL, timeout=PAGE_NAV_TIMEOUT)
                page.wait_for_load_state("domcontentloaded", timeout=DOMCONTENT_TIMEOUT)
                title = page.title()
                log_message(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {title}")
            except Exception as e:
                log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–∞: {e}")

            start_time = time.time()
            processed_count = 0
            blocked_count = 0

            for i, game in enumerate(games_list):
                game_title = game.get("title") or ""
                game_year = game.get("year")
                log_message(f"üéÆ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {i+1}/{total_games}: {game_title} ({game_year})")

                try:
                    hltb_data = search_game_on_hltb(page, game_title, game_year)
                    if hltb_data:
                        game["hltb"] = hltb_data
                        processed_count += 1
                        blocked_count = 0
                        log_message(f"‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è '{game_title}'")
                    else:
                        game["hltb"] = {"ms": "N/A", "mpe": "N/A", "comp": "N/A", "all": "N/A"}
                        log_message(f"‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è: {game_title} - –∑–∞–ø–∏—Å–∞–Ω–æ N/A")
                        # –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        try:
                            page_content = page.content()
                            if "blocked" in page_content.lower() or "access denied" in page_content.lower():
                                blocked_count += 1
                                log_message(f"üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ ({blocked_count}/3)")
                                if blocked_count >= 3:
                                    log_message("üí• –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø–æ–¥—Ä—è–¥! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É.")
                                    break
                        except Exception:
                            pass

                except Exception as e:
                    log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ '{game_title}': {e}")
                    log_message(traceback.format_exc())

                # –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–µ–π–≤
                if (i + 1) % 50 == 0:
                    save_progress(games_list, i + 1, total_games)

                # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞—É–∑—É
                if i % 10 == 0 and i > 0:
                    # –∫–æ—Ä–æ—Ç–∫–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    random_delay(2, 6)

            browser.close()

        save_results(games_list)

        successful = len([g for g in games_list if "hltb" in g and g["hltb"].get("all") != "N/A"])
        log_message(f"üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {successful}/{total_games} –∏–≥—Ä ({successful/total_games*100:.1f}%)")

    except Exception as e:
        log_message(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        log_message(traceback.format_exc())
        raise


if __name__ == "__main__":
    main()
