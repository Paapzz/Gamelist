# hltb_worker.py
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏ —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤–∞—à–µ–≥–æ —Å–∫—Ä–∞–ø–ø–µ—Ä–∞ (–∏—Å—Ö–æ–¥–Ω—ã–π: –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª). :contentReference[oaicite:1]{index=1}

print("üöÄ HLTB Worker –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

import json
import time
import random
import re
import os
from datetime import datetime
from urllib.parse import quote, unquote
from playwright.sync_api import sync_playwright

BASE_URL = "https://howlongtobeat.com"
GAMES_LIST_FILE = "index111.html"
OUTPUT_DIR = "hltb_data"
OUTPUT_FILE = f"{OUTPUT_DIR}/hltb_data.json"
PROGRESS_FILE = "progress.json"

# –¢–∞–π–º–∞—É—Ç—ã –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (—É–≤–µ–ª–∏—á–µ–Ω—ã –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏)
PAGE_GOTO_TIMEOUT = 30000
PAGE_LOAD_TIMEOUT = 20000

BREAK_INTERVAL_MIN = 8 * 60
BREAK_INTERVAL_MAX = 10 * 60
BREAK_DURATION_MIN = 40
BREAK_DURATION_MAX = 80

def setup_directories():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print(f"üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {OUTPUT_DIR}")
    try:
        os.makedirs(OUTPUT_DIR, exist_ok=True)
        print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {OUTPUT_DIR} —Å–æ–∑–¥–∞–Ω–∞/—Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
        raise

def log_message(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    try:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        print(log_entry)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}")

def extract_games_list(html_file):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –∏–∑ HTML —Ñ–∞–π–ª–∞"""
    try:
        log_message(f"üìñ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª {html_file}...")
        with open(html_file, 'r', encoding='utf-8') as f:
            content = f.read()

        log_message(f"üìÑ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")

        log_message("üîç –ò—â–µ–º 'const gamesList = ['...")
        start = content.find('const gamesList = [')
        if start == -1:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω const gamesList –≤ HTML —Ñ–∞–π–ª–µ")

        log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω const gamesList –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {start}")

        log_message("üîç –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –º–∞—Å—Å–∏–≤–∞...")
        bracket_count = 0
        end = start
        for i, char in enumerate(content[start:], start):
            if char == '[':
                bracket_count += 1
            elif char == ']':
                bracket_count -= 1
                if bracket_count == 0:
                    end = i + 1
                    break

        if bracket_count != 0:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ gamesList")

        log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {end}")

        log_message("‚úÇÔ∏è –ò–∑–≤–ª–µ–∫–∞–µ–º JSON...")
        games_json = content[start:end]
        games_json = games_json.replace('const gamesList = ', '')

        log_message(f"üìù JSON –∏–∑–≤–ª–µ—á–µ–Ω, —Ä–∞–∑–º–µ—Ä: {len(games_json)} —Å–∏–º–≤–æ–ª–æ–≤")
        log_message("üîÑ –ü–∞—Ä—Å–∏–º JSON...")

        games_list = json.loads(games_json)
        log_message(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(games_list)} –∏–≥—Ä –∏–∑ HTML —Ñ–∞–π–ª–∞")
        return games_list

    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä: {e}")
        raise

# -------------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ --------------------------

def parse_time_to_hours(time_str):
    """–ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Xh Ym' –∏–ª–∏ 'X Hours' –≤ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã"""
    if not time_str or time_str == "N/A":
        return 0, 0

    s = time_str.replace("Hours", "").replace("hours", "").strip()

    hours_match = re.search(r'(\d+(?:\.\d+)?)h', s)
    minutes_match = re.search(r'(\d+)m', s)

    hours = float(hours_match.group(1)) if hours_match else 0
    minutes = int(minutes_match.group(1)) if minutes_match else 0

    if hours == 0 and minutes == 0:
        number_match = re.search(r'(\d+(?:\.\d+)?)', s)
        if number_match:
            hours = float(number_match.group(1))
            if hours != int(hours):
                minutes = int((hours - int(hours)) * 60)
                hours = int(hours)

    if hours != int(hours):
        minutes += int((hours - int(hours)) * 60)
        hours = int(hours)

    return hours, minutes

def round_time(time_str):
    """–û–∫—Ä—É–≥–ª—è–µ—Ç –≤—Ä–µ–º—è –∫ –±–ª–∏–∂–∞–π—à–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é"""
    if not time_str or time_str == "N/A":
        return None

    hours, minutes = parse_time_to_hours(time_str)

    hours = int(hours)

    if minutes <= 14:
        return f"{hours}h"
    elif minutes <= 44:
        return f"{hours}.5h"
    else:
        return f"{hours + 1}h"

# -------------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π --------------------------

def clean_title_for_comparison(title):
    """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    cleaned = re.sub(r'[^\w\s]', '', title.lower())
    cleaned = re.sub(r'\s+', ' ', cleaned).strip()
    return cleaned

def convert_arabic_to_roman(num_str):
    try:
        num = int(num_str)
        map_ = {1:"I",2:"II",3:"III",4:"IV",5:"V",6:"VI",7:"VII",8:"VIII",9:"IX",10:"X"}
        return map_.get(num, num_str)
    except:
        return num_str

def convert_roman_to_arabic(roman_str):
    try:
        roman_to_arabic_map = {'I': 1, 'II': 2, 'III': 3, 'IV': 4, 'V': 5,
                              'VI': 6, 'VII': 7, 'VIII': 8, 'IX': 9, 'X': 10}
        return str(roman_to_arabic_map.get(roman_str, roman_str))
    except:
        return roman_str

def normalize_title_for_comparison(title):
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: –∑–∞–º–µ–Ω—è–µ–º —Ä–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –Ω–∞ –∞—Ä–∞–±—Å–∫–∏–µ, —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã"""
    try:
        roman_to_arabic = {
            ' I ': ' 1 ', ' II ': ' 2 ', ' III ': ' 3 ', ' IV ': ' 4 ', ' V ': ' 5 ',
            ' VI ': ' 6 ', ' VII ': ' 7 ', ' VIII ': ' 8 ', ' IX ': ' 9 ', ' X ': ' 10 '
        }
        s = f" {title} "
        for r,a in roman_to_arabic.items():
            s = s.replace(r, a)
        return s.strip()
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
        return title

def lcs_length(a_tokens, b_tokens):
    """LCS –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤"""
    n, m = len(a_tokens), len(b_tokens)
    if n == 0 or m == 0:
        return 0
    dp = [[0] * (m + 1) for _ in range(n + 1)]
    for i in range(1, n + 1):
        for j in range(1, m + 1):
            if a_tokens[i-1] == b_tokens[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])
    return dp[n][m]

def calculate_title_similarity(original, candidate):
    """
    –£–ª—É—á—à—ë–Ω–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏:
    - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–∏–º‚Üî–∞—Ä–∞–±
    - –ø—Ä—è–º—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —á–∞—Å—Ç–∏ -> 1.0
    - —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —á–∞—Å—Ç–∏ (–¥–æ ':') -> 0.9
    - –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ recall/precision/LCS
    """
    def _sim(a, b):
        a_clean = clean_title_for_comparison(normalize_title_for_comparison(a))
        b_clean = clean_title_for_comparison(normalize_title_for_comparison(b))
        if a_clean == b_clean:
            return 1.0
        a_tokens = a_clean.split()
        b_tokens = b_clean.split()
        if not a_tokens or not b_tokens:
            return 0.0
        common = set(a_tokens).intersection(set(b_tokens))
        precision = len(common) / len(b_tokens)
        recall = len(common) / len(a_tokens)
        lcs_len = lcs_length(a_tokens, b_tokens)
        seq = (lcs_len / len(a_tokens)) if len(a_tokens) > 0 else 0.0
        score = 0.65 * recall + 0.2 * precision + 0.15 * seq
        return max(0.0, min(1.0, score))

    try:
        if not original or not candidate:
            return 0.0

        cand_clean = clean_title_for_comparison(normalize_title_for_comparison(candidate))

        if "/" in original:
            parts = [p.strip() for p in (original.replace(" / ", "/")).split("/")]
            # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã —á–∞—Å—Ç–∏ –∏ –∏—Ö –±–∞–∑
            for part in parts:
                part_clean = clean_title_for_comparison(normalize_title_for_comparison(part))
                base = part.split(":",1)[0].strip()
                base_clean = clean_title_for_comparison(normalize_title_for_comparison(base))
                # –≤–∞—Ä–∏–∞—Ü–∏–∏ –∞—Ä–∞–±<->—Ä–∏–º
                arabic_match = re.search(r'\b(\d+)\b', part)
                if arabic_match:
                    roman = convert_arabic_to_roman(arabic_match.group(1))
                    if roman:
                        if cand_clean == clean_title_for_comparison(normalize_title_for_comparison(re.sub(r'\b' + re.escape(arabic_match.group(1)) + r'\b', roman, part))):
                            return 1.0
                # —Ä–∏–º -> –∞—Ä–∞–±
                roman_match = re.search(r'\b(I{1,3}|IV|V|VI{0,3}|IX|X)\b', part)
                if roman_match:
                    arab = convert_roman_to_arabic(roman_match.group(1))
                    if arab:
                        if cand_clean == clean_title_for_comparison(normalize_title_for_comparison(re.sub(r'\b' + re.escape(roman_match.group(1)) + r'\b', arab, part))):
                            return 1.0

                if cand_clean == part_clean:
                    return 1.0
                if cand_clean == base_clean:
                    return 0.9

            # –∏–Ω–∞—á–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è –ø–æ —á–∞—Å—Ç—è–º
            best = 0.0
            for part in parts:
                best = max(best, _sim(part, candidate))
            best = max(best, _sim(original, candidate))
            return float(best)

        orig_clean = clean_title_for_comparison(normalize_title_for_comparison(original))
        if orig_clean == cand_clean:
            return 1.0

        return float(_sim(original, candidate))
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ö–æ–∂–µ—Å—Ç–∏: {e}")
        return 0.0

def generate_alternative_titles(game_title):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞, –Ω–µ–º–Ω–æ–≥–æ —É–ø—Ä–æ—â–µ–Ω–∞)"""
    if not game_title:
        return []

    alternatives = []
    seen = set()
    def add(a):
        if not a: return
        a = re.sub(r'\s+', ' ', a).strip()
        if a and a not in seen:
            seen.add(a); alternatives.append(a)

    add(game_title)

    if "/" in game_title:
        parts = [p.strip() for p in game_title.replace(" / ", "/").split("/")]
        is_enum = all(len(p.split()) == 1 and ":" not in p for p in parts)
        if not is_enum:
            for p in parts:
                add(p)
        else:
            for p in parts:
                add(p)
            if len(parts) >= 2:
                add(f"{parts[0]} and {parts[1]}")
                add(f"{parts[0]} & {parts[1]}")
    else:
        # –≤–∞—Ä–∏–∞—Ü–∏–∏ —Å —Ä–∏–º/–∞—Ä–∞–± –∏ –±–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏—è
        add(game_title.split(":",1)[0].strip())
        m = re.search(r'\b(\d+)\b', game_title)
        if m:
            r = convert_arabic_to_roman(m.group(1))
            if r and r != m.group(1):
                add(re.sub(r'\b'+re.escape(m.group(1))+r'\b', r, game_title))
        rm = re.search(r'\b(I{1,3}|IV|V|VI{0,3}|IX|X)\b', game_title)
        if rm:
            a = convert_roman_to_arabic(rm.group(1))
            if a and a != rm.group(1):
                add(re.sub(r'\b'+re.escape(rm.group(1))+r'\b', a, game_title))

    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–ª–∏–Ω–µ (–∫–æ—Ä–æ—Ç–∫–∏–µ –≤ –∫–æ–Ω—Ü–µ) —á—Ç–æ–±—ã –¥–ª–∏–Ω–Ω—ã–µ —Ç–æ—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–≤—ã–º–∏
    alternatives = sorted(alternatives, key=lambda s: len(s.split()), reverse=True)
    return alternatives

# -------------------------- –ü–æ–∏—Å–∫ –∏ –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ --------------------------

def get_year_from_search_context(link):
    """
    –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –≥–æ–¥ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Å—ã–ª–∫–∏ (–±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É).
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º int –≥–æ–¥ –∏–ª–∏ None.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî —ç—Ç–æ –¥–µ—à–µ–≤–ª–µ, —á–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ
        context_text = link.evaluate("""(el) => {
            const p = el.closest('li') || el.closest('div') || el.parentElement;
            return p ? p.innerText : el.innerText;
        }""")
        if not context_text:
            return None
        # –∏—â–µ–º 4-–∑–Ω–∞—á–Ω—ã–µ –≥–æ–¥–∞
        matches = re.findall(r'(\b19\d{2}\b|\b20\d{2}\b)', context_text)
        if matches:
            years = [int(m) for m in matches]
            return min(years)
    except Exception:
        return None
    return None

def find_best_match_with_year(page, game_links, original_title, game_year=None):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–≥—Ä —Å —É—á—ë—Ç–æ–º –Ω–∞–∑–≤–∞–Ω–∏—è.
    –ù–ï –¥–µ–ª–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–µ (—ç–∫–æ–Ω–æ–º–∏–º –ø–µ—Ä–µ—Ö–æ–¥—ã).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (link_element, link_title, score).
    """
    try:
        best_match = None
        best_score = -1.0
        best_title = ""
        limit = min(game_links.count(), 20)  # —Ä–∞—Å—à–∏—Ä–∏–ª –¥–æ 20, –Ω–æ –±–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        orig_clean = clean_title_for_comparison(normalize_title_for_comparison(original_title))
        orig_tokens = set(orig_clean.split())

        for i in range(limit):
            link = game_links.nth(i)
            link_text = link.inner_text().strip()
            if not link_text:
                continue

            title_score = calculate_title_similarity(original_title, link_text)

            # –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –≥–æ–¥ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞)
            hltb_year = None
            if game_year:
                try:
                    hltb_year = get_year_from_search_context(link)
                except:
                    hltb_year = None

            year_score = 0.0
            if game_year and hltb_year:
                # –ø—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞: —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ == 1, –±–ª–∏–∑–æ—Å—Ç—å ¬±2 –≥–æ–¥–∞ => 0.8 –∏ —Ç.–¥.
                if hltb_year == game_year:
                    year_score = 1.0
                else:
                    diff = abs(game_year - hltb_year)
                    if diff <= 2:
                        year_score = 0.8
                    elif diff <= 5:
                        year_score = 0.5
                    else:
                        year_score = 0.1

            # boost –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –≤–∞–∂–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
            tokens = set(clean_title_for_comparison(link_text).split())
            token_overlap = len(orig_tokens.intersection(tokens)) / (len(orig_tokens) or 1)
            boost = 0.0
            if token_overlap >= 0.75:
                boost += 0.15
            if clean_title_for_comparison(link_text) == orig_clean:
                boost += 0.2

            combined = title_score * 0.75 + year_score * 0.25 + boost
            if combined > best_score:
                best_score = combined
                best_match = link
                best_title = link_text

        if best_match and best_score >= 0.25:
            if game_year:
                log_message(f"üéØ –í—ã–±—Ä–∞–Ω–æ: '{best_title}' (—Å—Ö–æ–∂–µ—Å—Ç—å: {best_score:.2f}, –æ–∂–∏–¥–∞–µ–º—ã–π –≥–æ–¥: {game_year})")
            else:
                log_message(f"üéØ –í—ã–±—Ä–∞–Ω–æ: '{best_title}' (—Å—Ö–æ–∂–µ—Å—Ç—å: {best_score:.2f})")
            return best_match, best_title, best_score
        else:
            return None, "", 0.0

    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {e}")
        return None, "", 0.0

# -------------------------- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä—ã --------------------------

def extract_hltb_data_from_page(page):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ HLTB —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä—ã.
    –ê–ª–≥–æ—Ä–∏—Ç–º:
      1) –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—ã (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
      2) –ò—â–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏ 'Vs.', 'Co-Op', 'Single-Player'
      3) Fallback: regex –ø–æ page.content()
    """
    try:
        hltb_data = {}
        page_content = page.content()

        # 1) –¢–∞–±–ª–∏—Ü—ã (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞, –Ω–æ –∑–∞—â–∏—Ç–∞ –æ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π)
        try:
            tables = page.locator("table")
            table_count = tables.count()
            for table_idx in range(table_count):
                try:
                    table = tables.nth(table_idx)
                    table_text = table.inner_text()
                    if any(keyword in table_text for keyword in ["Main Story", "Main + Extras", "Completionist", "Co-Op", "Competitive", "Vs."]):
                        rows = table.locator("tr")
                        row_count = rows.count()
                        for row_idx in range(row_count):
                            try:
                                row_text = rows.nth(row_idx).inner_text().strip()
                                if "Main Story" in row_text and "ms" not in hltb_data:
                                    d = extract_hltb_row_data(row_text)
                                    if d: hltb_data["ms"] = d
                                elif "Main + Extras" in row_text and "mpe" not in hltb_data:
                                    d = extract_hltb_row_data(row_text)
                                    if d: hltb_data["mpe"] = d
                                elif "Completionist" in row_text and "comp" not in hltb_data:
                                    d = extract_hltb_row_data(row_text)
                                    if d: hltb_data["comp"] = d
                                elif "Co-Op" in row_text and "coop" not in hltb_data:
                                    d = extract_hltb_row_data(row_text)
                                    if d: hltb_data["coop"] = d
                                elif "Competitive" in row_text and "vs" not in hltb_data:
                                    d = extract_hltb_row_data(row_text)
                                    if d: hltb_data["vs"] = d
                            except Exception as e:
                                log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {row_idx}: {e}")
                                continue
                except Exception as e:
                    log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table_idx}: {e}")
                    continue
        except Exception as e:
            log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü: {e}")

        # 2) –ò—â–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ 'Vs.', 'Co-Op', 'Single-Player'
        try:
            for keyword, keyname in [("Vs.", "vs"), ("Co-Op", "coop"), ("Single-Player", "ms")]:
                elems = page.locator(f"text={keyword}")
                cnt = elems.count()
                for i in range(min(cnt, 10)):
                    try:
                        el = elems.nth(i)
                        surrounding_text = el.evaluate("(e) => (e.closest('div') || e.parentElement || e).innerText")
                        if keyword == "Vs." and "vs" not in hltb_data:
                            vs_data = extract_vs_data_from_text(surrounding_text)
                            if vs_data:
                                hltb_data["vs"] = vs_data
                        elif keyword == "Co-Op" and "coop" not in hltb_data:
                            coop_data = extract_coop_data_from_text(surrounding_text)
                            if coop_data:
                                hltb_data["coop"] = coop_data
                        elif keyword == "Single-Player" and "ms" not in hltb_data:
                            sp_data = extract_single_player_data_from_text(surrounding_text)
                            if sp_data:
                                hltb_data["ms"] = sp_data
                    except Exception as e:
                        log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–∞ {keyword} #{i}: {e}")
                        continue
        except Exception as e:
            log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–Ω—ã—Ö –±–ª–æ–∫–æ–≤: {e}")

        # 3) Fallback: —Ä–µ–≥–µ–∫—Å–ø –ø–æ page_content, –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –≤—ë—Ä—Å—Ç–∫–∏
        if not hltb_data:
            try:
                # —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                patterns = {
                    "ms": r'(?:Main Story|Single-Player)[^\n\r]{0,160}?(\d+h(?:\s*\d+m)?|\d+(?:\.\d+)?\s*Hours?)',
                    "mpe": r'(?:Main \+ Extras|Main \+ Extras)[^\n\r]{0,160}?(\d+h(?:\s*\d+m)?|\d+(?:\.\d+)?\s*Hours?)',
                    "comp": r'(?:Completionist)[^\n\r]{0,160}?(\d+h(?:\s*\d+m)?|\d+(?:\.\d+)?\s*Hours?)',
                    "coop": r'(?:Co-Op)[^\n\r]{0,160}?(\d+h(?:\s*\d+m)?|\d+(?:\.\d+)?\s*Hours?)',
                    "vs": r'(?:Vs\.|Versus)[^\n\r]{0,160}?(\d+(?:\.\d+)?[¬Ω]?|\d+h(?:\s*\d+m)?|\d+(?:\.\d+)?\s*Hours?)'
                }
                for k, pat in patterns.items():
                    m = re.search(pat, page_content, flags=re.IGNORECASE)
                    if m:
                        tstr = m.group(1)
                        if '¬Ω' in tstr:
                            tstr = tstr.replace('¬Ω', '.5')
                        # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ—Ö–æ–∂–∏–º –æ–±—Ä–∞–∑–æ–º
                        try:
                            hours = float(re.sub(r'[^\d\.]', '', tstr))
                            if hours >= 1:
                                formatted = f"{int(hours)}h" if hours == int(hours) else f"{hours:.1f}h"
                            else:
                                formatted = f"{int(hours*60)}m"
                        except:
                            formatted = round_time(tstr)
                        hltb_data[k] = {"t": formatted}
                if hltb_data:
                    log_message("üéØ –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã —á–µ—Ä–µ–∑ fallback-—Ä–µ–≥–µ–∫—Å–ø –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            except Exception as e:
                log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ fallback-–ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")

        # store links
        store_links = extract_store_links(page)
        if store_links:
            hltb_data["stores"] = store_links

        return hltb_data if hltb_data else None

    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return None

def extract_store_links(page):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä—ã"""
    try:
        store_links = {}
        store_selectors = {
            "steam": "a[href*='store.steampowered.com']",
            "epic": "a[href*='epicgames.com']",
            "gog": "a[href*='gog.com']",
            "humble": "a[href*='humblebundle.com']",
            "itch": "a[href*='itch.io']",
            "battlenet": "a[href*='battle.net']",
            "psn": "a[href*='playstation.com']",
            "xbox": "a[href*='xbox.com']",
            "nintendo": "a[href*='nintendo.com']"
        }
        for store_name, selector in store_selectors.items():
            try:
                el = page.locator(selector).first
                if el.count() > 0:
                    href = el.get_attribute("href")
                    if href:
                        # GOG —á–µ—Ä–µ–∑ adtraction
                        if store_name == "gog" and "adtraction.com" in href:
                            match = re.search(r'url=([^&]+)', href)
                            if match:
                                href = unquote(match.group(1))
                        store_links[store_name] = href
            except Exception:
                continue
        if store_links:
            log_message(f"üõí –ù–∞–π–¥–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã: {list(store_links.keys())}")
        return store_links if store_links else None
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω—ã: {e}")
        return None

# -------------------------- –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã (–æ—Å—Ç–∞–≤–∏–ª –≤–∞—à—É –ª–æ–≥–∏–∫—É –∏ –Ω–µ–º–Ω–æ–≥–æ —É–ø—Ä–æ—Å—Ç–∏–ª) --------------------------

def extract_hltb_row_data(row_text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã HLTB (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)"""
    try:
        polled = None
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —á–∏—Å–ª–æ –æ–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö
        polled_match = re.search(r'(\d+(?:\.\d+)?[Kk]?)\s*(?:Polled|polled)?', row_text)
        if polled_match:
            polled_str = polled_match.group(1)
            if 'K' in polled_str.upper():
                number = float(polled_str.replace('K','').replace('k',''))
                polled = int(number * 1000)
            else:
                polled = int(float(polled_str))

        # –ò—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏
        combined_pattern = r'(\d+h\s*\d+m|\d+h|\d+(?:\.\d+)?\s*Hours?|\d+(?:\.\d+)?[¬Ω]?)'
        matches = re.findall(combined_pattern, row_text)
        times = [re.sub(r'\s+', ' ', m.strip()) for m in matches] if matches else []

        if not times and polled is None:
            return None

        result = {}
        if times:
            avg = times[0]
            # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º median –≤ times[1]
            result["t"] = round_time(avg)
        if polled:
            result["p"] = polled

        # –¥–æ–ø. –ø–æ–ª—è –¥–ª—è single/multi –µ—Å–ª–∏ –µ—Å—Ç—å
        if "Main Story" in row_text or "Single-Player" in row_text:
            if len(times) >= 4:
                result["r"] = round_time(times[2])
                result["l"] = round_time(times[3])
        elif "Co-Op" in row_text or "Competitive" in row_text or "Vs." in row_text:
            if len(times) >= 4:
                result["min"] = round_time(times[2])
                result["max"] = round_time(times[3])

        return result if result else None
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏: {e}")
        return None

# -------------------------- –†–∞–∑–Ω—ã–µ extract_* –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) --------------------------

def extract_vs_data_from_text(text):
    try:
        clean_text = text.replace('\n',' ').replace('\r',' ')
        patterns = [
            r'Vs\.\s*\|\s*(\d+(?:\.\d+)?)\s*Hours?',
            r'Vs\.\s+(\d+(?:\.\d+)?)\s*Hours?',
            r'Versus[^\d]*(\d+(?:\.\d+)?)\s*Hours?'
        ]
        for pat in patterns:
            m = re.search(pat, clean_text, flags=re.IGNORECASE)
            if m:
                tstr = m.group(1).replace('¬Ω', '.5')
                try:
                    hours = float(tstr)
                    formatted = f"{int(hours)}h" if hours == int(hours) else f"{hours:.1f}h"
                except:
                    formatted = round_time(tstr)
                log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã Vs. –¥–∞–Ω–Ω—ã–µ: {formatted}")
                return {"t": formatted}
        return None
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Vs. –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def extract_coop_data_from_text(text):
    try:
        clean_text = text.replace('\n',' ').replace('\r',' ')
        patterns = [r'Co-Op[^\d]*(\d+(?:\.\d+)?)\s*Hours?', r'Co-Op\s*\|\s*(\d+(?:\.\d+)?)']
        for pat in patterns:
            m = re.search(pat, clean_text, flags=re.IGNORECASE)
            if m:
                tstr = m.group(1).replace('¬Ω', '.5')
                try:
                    hours = float(tstr)
                    formatted = f"{int(hours)}h" if hours == int(hours) else f"{hours:.1f}h"
                except:
                    formatted = round_time(tstr)
                log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã Co-Op –¥–∞–Ω–Ω—ã–µ: {formatted}")
                return {"t": formatted}
        return None
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Co-Op –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def extract_single_player_data_from_text(text):
    try:
        clean_text = text.replace('\n',' ').replace('\r',' ')
        patterns = [r'Single-Player[^\d]*(\d+(?:\.\d+)?)\s*Hours?', r'Main Story[^\d]*(\d+(?:\.\d+)?)']
        for pat in patterns:
            m = re.search(pat, clean_text, flags=re.IGNORECASE)
            if m:
                tstr = m.group(1).replace('¬Ω', '.5')
                try:
                    hours = float(tstr)
                    formatted = f"{int(hours)}h" if hours == int(hours) else f"{hours:.1f}h"
                except:
                    formatted = round_time(tstr)
                log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã Single-Player –¥–∞–Ω–Ω—ã–µ: {formatted}")
                return {"t": formatted}
        return None
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Single-Player –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

# -------------------------- –ü–æ–∏—Å–∫ –æ–¥–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ —Å —Ä–µ—Ç—Ä–∞—è–º–∏ --------------------------

def search_game_single_attempt(page, game_title, game_year=None):
    """–û–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä—ã –Ω–∞ HLTB (–±–µ–∑ –∏–∑–ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤)"""
    try:
        log_message(f"üîç –ò—â–µ–º: '{game_title}'")
        safe_title = quote(game_title, safe="")
        search_url = f"{BASE_URL}/?q={safe_title}"

        page.goto(search_url, timeout=PAGE_GOTO_TIMEOUT)
        page.wait_for_load_state("domcontentloaded", timeout=PAGE_LOAD_TIMEOUT)

        page_content = page.content()
        if "blocked" in page_content.lower() or "access denied" in page_content.lower():
            log_message("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ë–õ–û–ö–ò–†–û–í–ö–ê IP –ø—Ä–∏ –ø–æ–∏—Å–∫–µ!")
            return None
        elif "cloudflare" in page_content.lower() and "checking your browser" in page_content.lower():
            log_message("‚ö†Ô∏è Cloudflare –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ - –∂–¥–µ–º...")
            time.sleep(3)
            page_content = page.content()
            if "checking your browser" in page_content.lower():
                log_message("‚ùå Cloudflare –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫")
                return None

        random_delay(1.5, 3.0)

        game_links = page.locator('a[href^="/game/"]')
        found_count = game_links.count()

        # –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ–ø—Ä–æ–±—É–µ–º —Ç–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ –∫–∞–≤—ã—á–∫–∞—Ö
        if found_count > 30:
            log_message(f"‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ({found_count}), –ø—Ä–æ–±—É–µ–º —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –∫–∞–≤—ã—á–∫–∞—Ö")
            quoted_title = f'"{game_title}"'
            quoted_url = f"{BASE_URL}/?q={quote(quoted_title, safe='')}"
            page.goto(quoted_url, timeout=PAGE_GOTO_TIMEOUT)
            page.wait_for_load_state("domcontentloaded", timeout=PAGE_LOAD_TIMEOUT)
            random_delay(1.5, 3.0)
            game_links = page.locator('a[href^="/game/"]')
            found_count = game_links.count()

        if found_count == 0:
            return None

        # –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç (–±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ –∫–∞–∂–¥–æ–º—É)
        best_match, best_title, similarity = find_best_match_with_year(page, game_links, game_title, game_year)
        if not best_match:
            return None

        best_url = best_match.get_attribute("href")
        if not best_url:
            return None

        # –µ—Å–ª–∏ —Å–ª–∞–±–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å –∏ –Ω–µ—Ç –≥–æ–¥–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if similarity < 0.5 and not game_year:
            log_message(f"‚ö†Ô∏è  –ù–∏–∑–∫–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å ({similarity:.2f}), –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
            return None

        full_url = f"{BASE_URL}{best_url}"
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        page.goto(full_url, timeout=PAGE_GOTO_TIMEOUT)
        page.wait_for_load_state("domcontentloaded", timeout=PAGE_LOAD_TIMEOUT)
        random_delay(1.5, 3.0)

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞
        page_content = page.content()
        if "blocked" in page_content.lower() or "access denied" in page_content.lower():
            log_message("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ë–õ–û–ö–ò–†–û–í–ö–ê IP –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–≥—Ä—ã!")
            return None

        hltb_data = extract_hltb_data_from_page(page)
        # –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        return (hltb_data, best_title) if hltb_data else None

    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä—ã '{game_title}': {e}")
        return None

def search_game_on_hltb(page, game_title, game_year=None):
    """–ò—â–µ—Ç –∏–≥—Ä—É –Ω–∞ HLTB –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    max_attempts = 3
    delays = [0, (15, 18), (65, 70)]

    good_result = None
    good_score = 0
    good_title = None

    log_message(f"üîç –ò—â–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: '{game_title}' (–≥–æ–¥: {game_year})")
    result_data = search_game_single_attempt(page, game_title, game_year)

    if result_data is not None:
        hltb_data, found_title = result_data
        score = calculate_title_similarity(game_title, found_title) if found_title else 0

        if score >= 1.0:
            log_message(f"üéØ –ù–∞–π–¥–µ–Ω–æ –∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '{found_title}' (—Å—Ö–æ–∂–µ—Å—Ç—å: {score:.2f})")
            return hltb_data

        log_message(f"üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{found_title}' (—Å—Ö–æ–∂–µ—Å—Ç—å: {score:.2f})")
        good_result = hltb_data
        good_score = score
        good_title = found_title
    else:
        log_message("‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã...")

    alternative_titles = generate_alternative_titles(game_title)

    for attempt in range(max_attempts):
        try:
            if attempt > 0:
                log_message(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts} –¥–ª—è '{game_title}'")
                if isinstance(delays[attempt], tuple):
                    min_delay, max_delay = delays[attempt]
                    log_message(f"‚è≥ –ü–∞—É–∑–∞ {min_delay}-{max_delay} —Å–µ–∫—É–Ω–¥...")
                    random_delay(min_delay, max_delay)
                else:
                    log_message(f"‚è≥ –ü–∞—É–∑–∞ {delays[attempt]} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(delays[attempt])

            best_result = good_result
            best_score = good_score
            best_title = good_title

            for alt_title in alternative_titles:
                if alt_title == game_title:
                    continue
                result_data = search_game_single_attempt(page, alt_title, game_year)
                if result_data is not None:
                    hltb_data, found_title = result_data
                    score = calculate_title_similarity(game_title, found_title if found_title else alt_title)
                    if score >= 1.0:
                        log_message(f"üéØ –ù–∞–π–¥–µ–Ω –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{found_title}' (—Å—Ö–æ–∂–µ—Å—Ç—å: {score:.2f})")
                        return hltb_data
                    if score > best_score:
                        best_score = score
                        best_result = hltb_data
                        best_title = found_title

            if best_result is not None:
                log_message(f"üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{best_title}' (—Å—Ö–æ–∂–µ—Å—Ç—å: {best_score:.2f})")
                return best_result

        except Exception as e:
            log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1} –¥–ª—è '{game_title}': {e}")
            if attempt == max_attempts - 1:
                log_message(f"üí• –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è '{game_title}'")
                return None

    return None

# -------------------------- –û—Å—Ç–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∏ main --------------------------

def random_delay(min_seconds, max_seconds):
    delay = random.uniform(min_seconds, max_seconds)
    time.sleep(delay)

def check_break_time(start_time, games_processed):
    elapsed_seconds = time.time() - start_time
    break_interval = random.randint(BREAK_INTERVAL_MIN, BREAK_INTERVAL_MAX)
    if elapsed_seconds >= break_interval:
        break_duration = random.randint(BREAK_DURATION_MIN, BREAK_DURATION_MAX)
        log_message(f"‚è∏Ô∏è  –ü–µ—Ä–µ—Ä—ã–≤ {break_duration} —Å–µ–∫—É–Ω–¥... (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {games_processed} –∏–≥—Ä)")
        time.sleep(break_duration)
        return time.time()
    return start_time

def count_hltb_data(hltb_data):
    categories = {"ms": 0, "mpe": 0, "comp": 0, "all": 0, "coop": 0, "vs": 0}
    total_polled = {"ms": 0, "mpe": 0, "comp": 0, "all": 0, "coop": 0, "vs": 0}
    na_count = 0

    for game in hltb_data:
        if "hltb" in game:
            if (isinstance(game["hltb"], dict) and 
                game["hltb"].get("ms") == "N/A" and 
                game["hltb"].get("mpe") == "N/A" and 
                game["hltb"].get("comp") == "N/A" and 
                game["hltb"].get("all") == "N/A"):
                na_count += 1
                continue

            for category in categories:
                if category in game["hltb"] and game["hltb"][category] and game["hltb"][category] != "N/A":
                    categories[category] += 1
                    if isinstance(game["hltb"][category], dict) and "p" in game["hltb"][category]:
                        total_polled[category] += game["hltb"][category]["p"]

    return categories, total_polled, na_count

def save_progress(games_data, current_index, total_games):
    progress_data = {
        "current_index": current_index,
        "total_games": total_games,
        "processed_games": len([g for g in games_data if "hltb" in g]),
        "last_updated": datetime.now().isoformat(),
        "status": "in_progress" if current_index < total_games else "completed"
    }
    with open(PROGRESS_FILE, "w", encoding="utf-8") as f:
        json.dump(progress_data, f, indent=2, ensure_ascii=False)

def save_results(games_data):
    try:
        with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
            for i, game in enumerate(games_data):
                if i > 0:
                    f.write("\n")
                json.dump(game, f, separators=(',', ':'), ensure_ascii=False)

        categories, total_polled, na_count = count_hltb_data(games_data)
        successful = len([g for g in games_data if "hltb" in g])

        log_message(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {OUTPUT_FILE}")
        log_message(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {successful}/{len(games_data)} –∏–≥—Ä —Å –¥–∞–Ω–Ω—ã–º–∏ HLTB")
        log_message(f"üìä Main Story: {categories['ms']} ({total_polled['ms']} –≥–æ–ª–æ—Å–æ–≤), Main+Extras: {categories['mpe']} ({total_polled['mpe']} –≥–æ–ª–æ—Å–æ–≤)")
        log_message(f"üìä Completionist: {categories['comp']} ({total_polled['comp']} –≥–æ–ª–æ—Å–æ–≤), All: {categories['all']} ({total_polled['all']} –≥–æ–ª–æ—Å–æ–≤)")
        log_message(f"üìä Co-Op: {categories['coop']} ({total_polled['coop']} –≥–æ–ª–æ—Å–æ–≤), Vs: {categories['vs']} ({total_polled['vs']} –≥–æ–ª–æ—Å–æ–≤)")
        log_message(f"üìä N/A (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ): {na_count} –∏–≥—Ä")

    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        raise

def log_progress(current, total, start_time):
    elapsed = time.time() - start_time
    rate = current / elapsed * 60 if elapsed > 0 else 0
    eta = (total - current) / rate if rate > 0 else 0
    log_message(f"üìä {current}/{total} | {rate:.1f} –∏–≥—Ä/–º–∏–Ω | ETA: {eta:.0f} –º–∏–Ω")

def update_html_with_hltb(html_file, hltb_data):
    try:
        with open(html_file, 'r', encoding='utf-8') as f:
            content = f.read()

        start = content.find('const gamesList = [')
        if start == -1:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω const gamesList –≤ HTML —Ñ–∞–π–ª–µ")

        end = content.find('];', start) + 2
        if end == 1:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ gamesList")

        new_games_list = json.dumps(hltb_data, separators=(',', ':'), ensure_ascii=False)
        new_content = content[:start] + f'const gamesList = {new_games_list}' + content[end:]

        with open(html_file, 'w', encoding='utf-8') as f:
            f.write(new_content)

        log_message(f"‚úÖ HTML —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {html_file}")
        return True

    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è HTML: {e}")
        return False

def main():
    print("üîß –§—É–Ω–∫—Ü–∏—è main() –≤—ã–∑–≤–∞–Ω–∞")
    log_message("üöÄ –ó–∞–ø—É—Å–∫ HLTB Worker")
    log_message(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    log_message(f"üìÑ –ò—â–µ–º —Ñ–∞–π–ª: {GAMES_LIST_FILE}")

    if not os.path.exists(GAMES_LIST_FILE):
        log_message(f"‚ùå –§–∞–π–ª {GAMES_LIST_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    log_message(f"‚úÖ –§–∞–π–ª {GAMES_LIST_FILE} –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(GAMES_LIST_FILE)} –±–∞–π—Ç")
    setup_directories()
    log_message("üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    try:
        log_message("üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä...")
        games_list = extract_games_list(GAMES_LIST_FILE)
        total_games = len(games_list)
        log_message(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {total_games} –∏–≥—Ä")

        if os.path.exists(PROGRESS_FILE):
            with open(PROGRESS_FILE, "r", encoding="utf-8") as f:
                progress = json.load(f)
            start_index = progress.get("current_index", 0)
            log_message(f"üìÇ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø–æ–∑–∏—Ü–∏–∏ {start_index}")
        else:
            start_index = 0

        log_message("üåê –ó–∞–ø—É—Å–∫–∞–µ–º Playwright...")
        with sync_playwright() as p:
            log_message("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Chromium...")
            browser = p.chromium.launch(headless=True)
            log_message("‚úÖ Chromium –∑–∞–ø—É—â–µ–Ω")

            log_message("üîß –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞...")
            context = browser.new_context(
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0 Safari/537.36",
                viewport={"width": 1280, "height": 800},
                locale="en-US"
            )
            log_message("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω")

            log_message("üìÑ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
            page = context.new_page()
            log_message("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")

            log_message("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å HowLongToBeat.com...")
            try:
                page.goto(BASE_URL, timeout=PAGE_GOTO_TIMEOUT)
                page.wait_for_load_state("domcontentloaded", timeout=PAGE_LOAD_TIMEOUT)
                title = page.title()
                log_message(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {title}")
                search_box = page.locator('input[type="search"], input[name="q"]')
                if search_box.count() > 0:
                    log_message("‚úÖ –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ - —Å–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    log_message("‚ö†Ô∏è –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")

                page_content = page.content()
                if "blocked" in page_content.lower() or "access denied" in page_content.lower():
                    log_message("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ë–õ–û–ö–ò–†–û–í–ö–ê IP! –°–∞–π—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –¥–æ—Å—Ç—É–ø")
                    return
                elif "cloudflare" in page_content.lower() and "checking your browser" in page_content.lower():
                    log_message("‚ö†Ô∏è Cloudflare –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ - –∂–¥–µ–º...")
                    time.sleep(3)
                    page_content = page.content()
                    if "checking your browser" in page_content.lower():
                        log_message("‚ùå Cloudflare –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø")
                        return

                log_message("‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–≥—Ä")

            except Exception as e:
                log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞: {e}")
                log_message("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã...")

            start_time = time.time()
            processed_count = 0
            blocked_count = 0

            for i in range(start_index, total_games):
                game = games_list[i]
                game_title = game.get("title") or ""
                game_year = game.get("year")

                log_message(f"üéÆüéÆüéÆ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {i+1}/{total_games}: {game_title} ({game_year})")

                hltb_data = search_game_on_hltb(page, game_title, game_year)

                if hltb_data:
                    game["hltb"] = hltb_data
                    processed_count += 1
                    blocked_count = 0
                    log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {hltb_data}")
                else:
                    game["hltb"] = {"ms": "N/A", "mpe": "N/A", "comp": "N/A", "all": "N/A"}
                    log_message(f"‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è: {game_title} - –∑–∞–ø–∏—Å–∞–Ω–æ N/A")

                    page_content = page.content()
                    if "blocked" in page_content.lower() or "access denied" in page_content.lower():
                        blocked_count += 1
                        log_message(f"üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ ({blocked_count}/3)")
                        if blocked_count >= 3:
                            log_message("üí• –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø–æ–¥—Ä—è–¥! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É.")
                            break

                start_time = check_break_time(start_time, i + 1)

                if (i + 1) % 50 == 0:
                    save_progress(games_list, i + 1, total_games)
                    log_progress(i + 1, total_games, start_time)

            browser.close()

        save_results(games_list)

        successful = len([g for g in games_list if "hltb" in g])
        log_message(f"üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {successful}/{total_games} –∏–≥—Ä ({successful/total_games*100:.1f}%)")

        log_message("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HTML —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ HLTB...")
        if update_html_with_hltb(GAMES_LIST_FILE, games_list):
            log_message("‚úÖ HTML —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        else:
            log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å HTML —Ñ–∞–π–ª")

    except Exception as e:
        log_message(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    print("üéØ –ó–∞–ø—É—Å–∫–∞–µ–º main()...")
    try:
        main()
        print("‚úÖ main() –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}")
        import traceback
        traceback.print_exc()
        raise
